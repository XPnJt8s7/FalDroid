LOCATION_INFORMATION:
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderEnabled(java.lang.String)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderStatus(java.lang.String)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.ACCESS_LOCATION_EXTRA_COMMANDS android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION android.permission.ACCESS_MOCK_LOCATION (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)> (LOCATION_INFORMATION)
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> (LOCATION_INFORMATION)
<com.android.server.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> (LOCATION_INFORMATION)
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: boolean sendNiResponse(int,int)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: boolean providerMeetsCriteria(java.lang.String,android.location.Criteria)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (LOCATION_INFORMATION)
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)> (LOCATION_INFORMATION)
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: void removeGpsStatusListener(android.location.IGpsStatusListener)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> android.permission.ACCESS_LOCATION_EXTRA_COMMANDS android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderLocation(java.lang.String)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (LOCATION_INFORMATION)
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (LOCATION_INFORMATION)
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean)> (LOCATION_INFORMATION)
<android.location.LocationManager: boolean sendNiResponse(int,int)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> (LOCATION_INFORMATION)
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.ACCESS_LOCATION_EXTRA_COMMANDS android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION android.permission.ACCESS_MOCK_LOCATION (LOCATION_INFORMATION)

PHONE_CONNECTION:
<com.android.internal.telephony.gsm.GSMPhone: void sendBurstDtmf(java.lang.String)> (PHONE_CONNECTION)
<com.android.internal.telephony.cdma.CDMAPhone: void sendDtmf(char)> android.permission.WAKE_LOCK (PHONE_CONNECTION)
<com.android.internal.telephony.RIL: void hangupWaitingOrBackground(android.os.Message)> android.permission.WAKE_LOCK (PHONE_CONNECTION)
<com.android.internal.telephony.RIL: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (PHONE_CONNECTION)
<com.android.internal.telephony.sip.SipPhone: void sendBurstDtmf(java.lang.String)> (PHONE_CONNECTION)
<com.android.internal.telephony.DataConnectionAc: void addApnContextSync(com.android.internal.telephony.ApnContext)> (PHONE_CONNECTION)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void notifyTetheredOfNewUpstreamIface(java.lang.String)> (PHONE_CONNECTION)
<com.android.internal.telephony.CallManager: boolean sendDtmf(char)> (PHONE_CONNECTION)
<com.android.internal.telephony.sip.SipPhone: void sendUssdResponse(java.lang.String)> (PHONE_CONNECTION)
<com.android.internal.telephony.gsm.GsmDataConnection: void onConnect(com.android.internal.telephony.DataConnection$ConnectionParams)> android.permission.WAKE_LOCK (PHONE_CONNECTION)
<com.android.internal.telephony.PhoneProxy: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (PHONE_CONNECTION)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void notify(int)> (PHONE_CONNECTION)
<com.android.internal.telephony.cdma.CDMALTEPhone: void sendDtmf(char)> android.permission.WAKE_LOCK (PHONE_CONNECTION)
<com.android.internal.telephony.DataConnectionAc: com.android.internal.telephony.DataConnection$UpdateLinkPropertyResult updateLinkPropertiesDataCallStateSync(com.android.internal.telephony.DataCallState)> (PHONE_CONNECTION)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> android.permission.READ_PHONE_STATE android.permission.BLUETOOTH android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE android.permission.CHANGE_NETWORK_STATE android.permission.BLUETOOTH_ADMIN android.permission.ACCESS_NETWORK_STATE (PHONE_CONNECTION)
<com.android.internal.telephony.gsm.GSMPhone: void sendDtmf(char)> (PHONE_CONNECTION)
<com.android.internal.telephony.cdma.CDMAPhone: void startDtmf(char)> (PHONE_CONNECTION)
<com.android.internal.telephony.gsm.GsmMmiCode: void sendUssd(java.lang.String)> (PHONE_CONNECTION)
<com.android.internal.telephony.sip.SipPhone: void sendDtmf(char)> (PHONE_CONNECTION)
<com.android.internal.telephony.gsm.GSMPhone: void sendUssdResponse(java.lang.String)> (PHONE_CONNECTION)
<com.android.internal.telephony.gsm.GSMPhone: void startDtmf(char)> (PHONE_CONNECTION)
<com.android.internal.telephony.cdma.CDMAPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (PHONE_CONNECTION)
<com.android.internal.telephony.DataConnectionAc: void setReconnectIntentSync(android.app.PendingIntent)> (PHONE_CONNECTION)
<com.android.internal.telephony.CallManager: boolean sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (PHONE_CONNECTION)
<com.android.internal.telephony.DataConnectionAc: void reqSetReconnectIntent(android.app.PendingIntent)> (PHONE_CONNECTION)
<com.android.internal.telephony.PhoneProxy: void sendUssdResponse(java.lang.String)> (PHONE_CONNECTION)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnUpstreamMobileConnection(int)> android.permission.READ_PHONE_STATE android.permission.BLUETOOTH android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE android.permission.CHANGE_NETWORK_STATE android.permission.BLUETOOTH_ADMIN android.permission.ACCESS_NETWORK_STATE (PHONE_CONNECTION)
<com.android.internal.telephony.PhoneProxy: void sendDtmf(char)> android.permission.STOP_APP_SWITCHES (PHONE_CONNECTION)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnUpstreamMobileConnection(int)> android.permission.READ_PHONE_STATE android.permission.BLUETOOTH android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE android.permission.CHANGE_NETWORK_STATE android.permission.BLUETOOTH_ADMIN android.permission.ACCESS_NETWORK_STATE (PHONE_CONNECTION)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)> (PHONE_CONNECTION)
<com.android.internal.telephony.RIL: void sendDtmf(char,android.os.Message)> (PHONE_CONNECTION)
<com.android.server.ConnectivityService: void sendConnectedBroadcast(android.net.NetworkInfo)> (PHONE_CONNECTION)
<com.android.internal.telephony.DataConnectionAc: void setLinkPropertiesHttpProxySync(android.net.ProxyProperties)> (PHONE_CONNECTION)
<com.android.internal.telephony.DataConnectionAc: void removeApnContextSync(com.android.internal.telephony.ApnContext)> (PHONE_CONNECTION)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)> (PHONE_CONNECTION)
<com.android.internal.telephony.sip.SipPhone: void startDtmf(char)> (PHONE_CONNECTION)

VOIP:
<gov.nist.javax.sip.stack.SIPTransactionStack: void putDialog(gov.nist.javax.sip.stack.SIPDialog)> (VOIP)
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String)> (VOIP)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> android.permission.USE_SIP (VOIP)
<com.android.internal.telephony.sip.SipPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)> (VOIP)
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)> (VOIP)
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRinging(android.net.sip.ISipSession,android.net.sip.SipProfile,java.lang.String)> (VOIP)
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.Connection dial(java.lang.String)> android.permission.WAKE_LOCK (VOIP)
<android.net.sip.ISipSession$Stub$Proxy: void makeCall(android.net.sip.SipProfile,java.lang.String,int)> (VOIP)
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallEnded(android.net.sip.ISipSession)> (VOIP)
<android.net.sip.ISipSession$Stub$Proxy: void setListener(android.net.sip.ISipSessionListener)> (VOIP)
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)> (VOIP)
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallTransferring(android.net.sip.ISipSession,java.lang.String)> (VOIP)
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)> (VOIP)
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> android.permission.USE_SIP android.permission.WAKE_LOCK (VOIP)
<com.android.server.sip.SipService: void open(android.net.sip.SipProfile)> (VOIP)
<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener)> (VOIP)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String)> (VOIP)
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistering(android.net.sip.ISipSession)> (VOIP)
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationTimeout(android.net.sip.ISipSession)> (VOIP)
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)> (VOIP)
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRingingBack(android.net.sip.ISipSession)> (VOIP)
<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)> (VOIP)
<android.net.sip.ISipSessionListener$Stub$Proxy: void onError(android.net.sip.ISipSession,int,java.lang.String)> (VOIP)
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationDone(android.net.sip.ISipSession,int)> (VOIP)
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String)> android.permission.WAKE_LOCK (VOIP)
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallBusy(android.net.sip.ISipSession)> (VOIP)
<com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (VOIP)
<com.android.internal.telephony.sip.SipPhoneBase: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)> (VOIP)
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationFailed(android.net.sip.ISipSession,int,java.lang.String)> (VOIP)
<android.net.sip.SimpleSessionDescription$Fields: void access$200(android.net.sip.SimpleSessionDescription$Fields,java.lang.StringBuilder)> (VOIP)
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> android.permission.USE_SIP (VOIP)
<android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> (VOIP)
<android.net.sip.ISipService$Stub$Proxy: boolean isOpened(java.lang.String)> (VOIP)
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallEstablished(android.net.sip.ISipSession,java.lang.String)> (VOIP)
<com.android.phone.sip.SipProfileDb: void saveProfile(android.net.sip.SipProfile)> (VOIP)
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallChangeFailed(android.net.sip.ISipSession,int,java.lang.String)> (VOIP)
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCalling(android.net.sip.ISipSession)> (VOIP)

PHONE_STATE:
<com.android.internal.telephony.RIL: void supplyIccPukForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (PHONE_STATE)
<com.android.internal.telephony.UiccCardApplication: void changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)> (PHONE_STATE)
<com.android.internal.telephony.RIL: void separateConnection(int,android.os.Message)> (PHONE_STATE)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDisconnect(com.android.internal.telephony.Connection)> (PHONE_STATE)
<com.android.internal.telephony.UiccCardApplication: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)> (PHONE_STATE)
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataConnectionStateChanged(int,int)> (PHONE_STATE)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnection(java.lang.String,java.lang.String)> android.permission.BROADCAST_STICKY (PHONE_STATE)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyDataConnection(java.lang.String)> (PHONE_STATE)
<com.android.internal.telephony.sip.SipPhone: void notifyDataConnection(java.lang.String,java.lang.String)> android.permission.BROADCAST_STICKY (PHONE_STATE)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String,java.lang.String)> (PHONE_STATE)
<com.android.internal.telephony.PhoneBase: void notifyNewRingingConnectionP(com.android.internal.telephony.Connection)> (PHONE_STATE)
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> android.permission.BROADCAST_STICKY (PHONE_STATE)
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String)> (PHONE_STATE)
<com.android.internal.telephony.RIL: void supplyIccPinForApp(java.lang.String,java.lang.String,android.os.Message)> (PHONE_STATE)
<com.android.internal.telephony.ApnContext: void setDataConnection(com.android.internal.telephony.DataConnection)> (PHONE_STATE)
<com.android.internal.telephony.BaseCommands: void setOnIccRefresh(android.os.Handler,int,java.lang.Object)> (PHONE_STATE)
<com.android.internal.telephony.BaseCommands: void setOnIccSmsFull(android.os.Handler,int,java.lang.Object)> (PHONE_STATE)
<com.android.internal.telephony.UiccCardApplication: void changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)> (PHONE_STATE)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)> android.permission.BROADCAST_STICKY (PHONE_STATE)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataConnection(java.lang.String,java.lang.String)> android.permission.BROADCAST_STICKY (PHONE_STATE)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyNewRingingConnection(com.android.internal.telephony.Connection)> (PHONE_STATE)
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)> android.permission.BROADCAST_STICKY (PHONE_STATE)
<com.android.internal.telephony.IccCardProxy: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)> (PHONE_STATE)
<com.android.server.TelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)> (PHONE_STATE)
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (PHONE_STATE)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDisconnect(com.android.internal.telephony.Connection)> (PHONE_STATE)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)> (PHONE_STATE)
<com.android.internal.telephony.UiccCardApplication: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)> (PHONE_STATE)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDisconnect(com.android.internal.telephony.Connection)> (PHONE_STATE)
<com.android.internal.telephony.DataConnectionTracker: void notifyDataConnection(java.lang.String)> (PHONE_STATE)
<com.android.internal.telephony.RIL: void supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)> android.permission.WAKE_LOCK (PHONE_STATE)
<com.android.internal.telephony.PhoneBase: void notifyDisconnectP(com.android.internal.telephony.Connection)> (PHONE_STATE)
<com.android.internal.telephony.ApnContext: void setDataConnectionAc(com.android.internal.telephony.DataConnectionAc)> (PHONE_STATE)
<com.android.internal.telephony.RIL: void supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> android.permission.WAKE_LOCK (PHONE_STATE)
<com.android.internal.telephony.gsm.GSMPhone: void notifyNewRingingConnection(com.android.internal.telephony.Connection)> (PHONE_STATE)
<com.android.internal.telephony.PhoneBase: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (PHONE_STATE)
<com.android.internal.telephony.RIL: void iccIOForApp(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (PHONE_STATE)
<com.android.internal.telephony.RIL: void hangupConnection(int,android.os.Message)> (PHONE_STATE)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyNewRingingConnection(com.android.internal.telephony.Connection)> (PHONE_STATE)
<com.android.internal.telephony.RIL: void changeIccPin2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (PHONE_STATE)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (PHONE_STATE)
<com.android.internal.telephony.RIL: void changeIccPinForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (PHONE_STATE)
<com.android.internal.telephony.IccCardProxy: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)> (PHONE_STATE)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyDataConnection(java.lang.String,java.lang.String)> android.permission.BROADCAST_STICKY (PHONE_STATE)

EMAIL:
<com.android.emailcommon.internet.MimeHeader: void setHeader(java.lang.String,java.lang.String)> (EMAIL)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void deleteAccountPIMData(long)> (EMAIL)
<com.android.email.service.EmailServiceUtils$NullEmailService: void setLogging(int)> (EMAIL)
<com.android.email.activity.setup.DebugFragment: void onCheckedChanged(android.widget.CompoundButton,boolean)> (EMAIL)
<com.android.email.mail.transport.EOLConvertingOutputStream: void write(int)> (EMAIL)
<com.android.email.NotificationController: void showPasswordExpiredNotification(long)> (EMAIL)
<com.android.email.Controller$LegacyListener: void sendPendingMessagesFailed(long,long,java.lang.Exception)> (EMAIL)
<com.android.email.activity.MessageViewFragment: com.android.email.activity.MessageViewFragment newInstance(long)> (EMAIL)
<com.android.email.RefreshManager: boolean refreshMailboxList(long)> (EMAIL)
<com.android.email.provider.ContentCache$CounterMap: void add(java.lang.Object)> (EMAIL)
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void reconcileAccounts(java.lang.String,java.lang.String)> (EMAIL)
<com.android.email.Controller: boolean isMessagingController(long)> (EMAIL)
<com.android.email.activity.ShortcutPickerFragment$MailboxShortcutPickerFragment: com.android.email.activity.ShortcutPickerFragment$MailboxShortcutPickerFragment newInstance(android.content.Context,com.android.emailcommon.provider.Account,java.lang.Integer)> (EMAIL)
<com.android.email.MessagingController: void checkMail(long,long,com.android.email.MessagingListener)> (EMAIL)
<com.android.email.activity.UiUtilities: void setVisibilitySafe(android.app.Activity,int,int)> (EMAIL)
<com.android.email.RefreshManager$ControllerResult: void sendMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (EMAIL)
<com.android.email.Controller$LegacyListener: void sendPendingMessagesStarted(long,long)> (EMAIL)
<com.android.email.activity.setup.AccountSettings: void onEditQuickResponses(com.android.emailcommon.provider.Account)> (EMAIL)
<com.android.email.activity.setup.AccountSettingsUtils: void commitSettings(android.content.Context,com.android.emailcommon.provider.Account)> (EMAIL)
<com.android.email.RefreshManager$ControllerResult: void updateMailboxCallback(com.android.emailcommon.mail.MessagingException,long,long,int,int,java.util.ArrayList)> (EMAIL)
<com.android.email.SecurityPolicy: void setAccountHoldFlag(android.content.Context,long,boolean)> (EMAIL)
<com.android.emailcommon.service.PolicyServiceProxy: void setAccountHoldFlag(android.content.Context,com.android.emailcommon.provider.Account,boolean)> (EMAIL)
<com.android.email.service.AttachmentDownloadService$ServiceCallback: void sendMessageStatus(long,java.lang.String,int,int)> (EMAIL)
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void notifyLoginFailed(long)> (EMAIL)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void updateFolderList(long)> (EMAIL)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: boolean deleteFolder(long,java.lang.String)> (EMAIL)
<com.android.email.Controller: void sendMessage(com.android.emailcommon.provider.EmailContent$Message)> (EMAIL)
<com.android.email.activity.MailboxListItem: void setDropTargetBackground(boolean,long)> (EMAIL)
<com.android.email.mail.store.ImapConnection: java.lang.String sendComplexCommand(java.util.List,boolean)> (EMAIL)
<com.android.email.activity.setup.AccountSetupBasics$NoteDialogFragment: com.android.email.activity.setup.AccountSetupBasics$NoteDialogFragment newInstance(java.lang.String)> (EMAIL)
<com.android.email.Controller$LegacyListener: void listFoldersFailed(long,java.lang.String)> (EMAIL)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (EMAIL)
<com.android.emailcommon.provider.EmailContent$Message: android.net.Uri save(android.content.Context)> (EMAIL)
<com.android.email.activity.setup.AccountSettings: android.content.Intent createAccountSettingsIntent(android.content.Context,long,java.lang.String)> (EMAIL)
<com.android.emailcommon.service.AccountServiceProxy: void notifyLoginSucceeded(long)> (EMAIL)
<com.android.email.activity.MessageListItem: void setTimestamp(long)> (EMAIL)
<com.android.emailcommon.service.PolicyServiceProxy: void setAccountPolicy(android.content.Context,long,com.android.emailcommon.provider.Policy,java.lang.String)> (EMAIL)
<com.android.email.service.PopImapAuthenticatorService$PopImapAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (EMAIL)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: boolean renameFolder(long,java.lang.String,java.lang.String)> (EMAIL)
<com.android.email.activity.MessageListFragment: void setLayout(com.android.email.activity.ThreePaneLayout)> (EMAIL)
<com.android.email.activity.setup.MailboxSettings: void start(android.app.Activity,long)> (EMAIL)
<com.android.email.activity.UIControllerTwoPane: void openInternal(com.android.email.MessageListContext,long)> (EMAIL)
<com.android.email.activity.setup.AccountSettings$LoginWarningDialog: com.android.email.activity.setup.AccountSettings$LoginWarningDialog newInstance(java.lang.String)> (EMAIL)
<com.android.email.activity.EmailActivity$ControllerResult: void sendMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (EMAIL)
<com.android.email.MessagingController$8: void onMessageUidChange(com.android.emailcommon.mail.Message,java.lang.String)> (EMAIL)
<com.android.email.MessagingController$9: void onMessageUidChange(com.android.emailcommon.mail.Message,java.lang.String)> (EMAIL)
<com.android.email.activity.MessageCompose: boolean actionCompose(android.content.Context,java.lang.String,long)> (EMAIL)
<com.android.email.Preferences: void setEnableStrictMode(boolean)> (EMAIL)
<com.android.email.Preferences: void setLastUsedAccountId(long)> (EMAIL)
<com.android.email.MessagingController: void listFolders(long,com.android.email.MessagingListener)> (EMAIL)
<com.android.email.Controller: int searchMessages(long,com.android.emailcommon.service.SearchParams)> (EMAIL)
<com.android.email.activity.ActivityHelper: boolean openUrlInMessage(android.app.Activity,java.lang.String,long)> (EMAIL)
<com.android.email.service.EmailBroadcastProcessorService: void processDevicePolicyMessage(android.content.Context,int)> (EMAIL)
<com.android.email.service.AttachmentDownloadService: boolean canPrefetchForAccount(com.android.emailcommon.provider.Account,java.io.File)> (EMAIL)
<com.android.email.Preferences: void setTextZoom(int)> (EMAIL)
<com.android.email.service.EmailServiceUtils$NullEmailService: void sendMeetingResponse(long,int)> (EMAIL)
<com.android.emailcommon.service.AccountServiceProxy: void notifyLoginFailed(long)> (EMAIL)
<com.android.email.activity.setup.MailboxSettings: void setupLookbackPreferenceOptions(android.content.Context,android.preference.ListPreference,com.android.emailcommon.provider.Account)> (EMAIL)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void setCallback(com.android.emailcommon.service.IEmailServiceCallback)> (EMAIL)
<com.android.email.activity.MessageCompose: void setFocusShifter(int,int)> (EMAIL)
<com.android.emailcommon.service.EmailServiceProxy: void sendMeetingResponse(long,int)> (EMAIL)
<com.android.emailcommon.service.EmailServiceProxy: void setLogging(int)> (EMAIL)
<com.android.emailcommon.service.EmailServiceProxy: void sendMail(long)> (EMAIL)
<com.android.email.service.PolicyService$1: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)> (EMAIL)
<com.android.email.activity.DeleteMessageConfirmationDialog: com.android.email.activity.DeleteMessageConfirmationDialog newInstance(int,android.app.Fragment)> (EMAIL)
<com.android.email.Preferences: void setAutoAdvanceDirection(int)> (EMAIL)
<com.android.email.Controller$ServiceCallback: void syncMailboxStatus(long,int,int)> (EMAIL)
<com.android.email.service.MailService: void setupAccountManagerAccount(android.content.Context,com.android.emailcommon.provider.Account,boolean,boolean,boolean,android.accounts.AccountManagerCallback)> (EMAIL)
<com.android.email.activity.setup.AccountSetupActivity: void onSaveInstanceState(android.os.Bundle)> (EMAIL)
<com.android.email.activity.MessageListFragment: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (EMAIL)
<com.android.email.view.CertificateSelector$SavedState: void writeToParcel(android.os.Parcel,int)> (EMAIL)
<com.android.email.Email: boolean setServicesEnabledSync(android.content.Context)> (EMAIL)
<com.android.email.mail.store.ImapFolder: void fetchInternal(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.FetchProfile,com.android.emailcommon.mail.Folder$MessageRetrievalListener)> (EMAIL)
<com.android.email.mail.store.imap.ImapList: boolean is(int,java.lang.String,boolean)> (EMAIL)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void endDownload(long,int)> (EMAIL)
<com.android.email.activity.UiUtilities: void setVisibilitySafe(android.view.View,int,int)> (EMAIL)
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void loadMessageStatus(long,int,int)> (EMAIL)
<com.android.email.Controller$LegacyListener: void sendPendingMessagesCompleted(long)> (EMAIL)
<com.android.email.MessagingListener: void sendPendingMessagesStarted(long,long)> (EMAIL)
<com.android.emailcommon.provider.Account: void refresh(android.content.Context)> (EMAIL)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: boolean createFolder(long,java.lang.String)> (EMAIL)
<com.android.email.activity.MessageViewFragment: void onMessageShown(long,com.android.emailcommon.provider.Mailbox)> (EMAIL)
<com.android.email.activity.ThreePaneLayout: void setMessageListWidthAnim(int)> (EMAIL)
<com.android.email.Preferences: void setEnableExchangeLogging(boolean)> (EMAIL)
<com.android.emailcommon.internet.MimeBodyPart: void setHeader(java.lang.String,java.lang.String)> (EMAIL)
<com.android.email.activity.InsertQuickResponseDialog: com.android.email.activity.InsertQuickResponseDialog newInstance(android.app.Fragment,com.android.emailcommon.provider.Account)> (EMAIL)
<com.android.email.activity.MessageViewFragmentBase: void onCreate(android.os.Bundle)> (EMAIL)
<com.android.email.GroupMessagingListener: void sendPendingMessagesFailed(long,long,java.lang.Exception)> (EMAIL)
<com.android.email.activity.setup.AccountSecurity$SecurityNeededDialog: com.android.email.activity.setup.AccountSecurity$SecurityNeededDialog newInstance(java.lang.String)> (EMAIL)
<com.android.email.mail.store.ImapStore$ImapMessage: void setFlagInternal(com.android.emailcommon.mail.Flag,boolean)> (EMAIL)
<com.android.email.service.EmailBroadcastProcessorService: void processBroadcastIntent(android.content.Context,android.content.Intent)> (EMAIL)
<com.android.email.activity.Welcome: void startActivity(android.content.Intent)> (EMAIL)
<com.android.email.mail.store.ImapFolder: void copyMessages(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.Folder,com.android.emailcommon.mail.Folder$MessageUpdateCallbacks)> (EMAIL)
<com.android.email.LegacyConversions: void saveAttachmentBody(android.content.Context,com.android.emailcommon.mail.Part,com.android.emailcommon.provider.EmailContent$Attachment,long)> (EMAIL)
<com.android.emailcommon.mail.PackedString$Builder: void put(java.lang.String,java.lang.String)> (EMAIL)
<com.android.email.service.EasTestAuthenticatorService$EasAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (EMAIL)
<com.android.emailcommon.internet.Rfc822Output: void writeTo(android.content.Context,long,java.io.OutputStream,boolean,boolean)> (EMAIL)
<com.android.emailcommon.service.PolicyServiceProxy: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)> (EMAIL)
<com.android.email.activity.MoveMessageToDialog: com.android.email.activity.MoveMessageToDialog newInstance(long[],android.app.Fragment)> (EMAIL)
<com.android.email.GroupMessagingListener: void addListener(com.android.email.MessagingListener)> (EMAIL)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void stopSync(long)> (EMAIL)
<com.android.emailcommon.mail.Message: boolean isMimeType(java.lang.String)> (EMAIL)
<com.android.email.MessagingListener: void sendPendingMessagesCompleted(long)> (EMAIL)
<com.android.email.activity.UIControllerBase: void onSearchSubmit(java.lang.String)> (EMAIL)
<com.android.email.Preferences: void setEnableDebugLogging(boolean)> (EMAIL)
<com.android.email.SecurityPolicy: void setAccountHoldFlag(android.content.Context,com.android.emailcommon.provider.Account,boolean)> (EMAIL)
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void syncMailboxListStatus(long,int,int)> (EMAIL)
<com.android.email.NotificationController: void setupSoundAndVibration(android.app.Notification$Builder,com.android.emailcommon.provider.Account)> (EMAIL)
<com.android.email.activity.setup.AccountSecurity: android.content.Intent actionDevicePasswordExpirationIntent(android.content.Context,long,boolean)> (EMAIL)
<com.android.email.activity.MailboxListItem: void setBackgroundDrawable(android.graphics.drawable.Drawable)> (EMAIL)
<com.android.email.activity.setup.AccountSettingsFragment: android.os.Bundle buildArguments(long,java.lang.String)> (EMAIL)
<com.android.email.ControllerResultUiThreadWrapper: void setRegistered(boolean)> (EMAIL)
<com.android.email.activity.setup.AccountSecurity$PasswordExpirationDialog: com.android.email.activity.setup.AccountSecurity$PasswordExpirationDialog newInstance(java.lang.String,boolean)> (EMAIL)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void startSync(long,boolean)> (EMAIL)
<com.android.email.activity.setup.DuplicateAccountDialogFragment: com.android.email.activity.setup.DuplicateAccountDialogFragment newInstance(java.lang.String)> (EMAIL)
<com.android.email.LegacyConversions: int inferMailboxTypeFromName(android.content.Context,java.lang.String)> (EMAIL)
<com.android.email.Preferences: void setSenderAsTrusted(java.lang.String)> (EMAIL)
<com.android.email.activity.setup.AccountSettings$UnsavedChangesDialogFragment: com.android.email.activity.setup.AccountSettings$UnsavedChangesDialogFragment newInstanceForHeader(int)> (EMAIL)
<com.android.emailcommon.provider.Mailbox: void writeToParcel(android.os.Parcel,int)> (EMAIL)
<com.android.email.MessagingController: void loadAttachment(long,long,long,long,com.android.email.MessagingListener,boolean)> (EMAIL)
<com.android.email.service.MailService: void setupSyncReportsLocked(long,android.content.Context)> (EMAIL)
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void notifyLoginSucceeded(long)> (EMAIL)
<com.android.email.mail.store.Pop3Store$Pop3Message: void setSize(int)> (EMAIL)
<com.android.email.Preferences: void setEnableExchangeFileLogging(boolean)> (EMAIL)
<com.android.email.activity.setup.AccountSetupExchangeFragment: boolean setHostAuthFromAutodiscover(com.android.emailcommon.provider.HostAuth)> (EMAIL)
<com.android.email.Controller: void sendMeetingResponse(long,int)> (EMAIL)
<com.android.email.Preferences: void setForceOneMinuteRefresh(boolean)> (EMAIL)
<com.android.email.mail.store.ImapStore$ImapMessage: void setSize(int)> (EMAIL)
<com.android.email.provider.EmailProvider: void restoreIfNeeded(android.content.Context,android.database.sqlite.SQLiteDatabase)> (EMAIL)
<com.android.emailcommon.service.PolicyServiceProxy: void setAccountHoldFlag(long,boolean)> (EMAIL)
<com.android.email.activity.MessageListItemCoordinates: com.android.email.activity.MessageListItemCoordinates forWidth(android.content.Context,int,boolean)> (EMAIL)
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void loadAttachmentStatus(long,long,int,int)> (EMAIL)
<com.android.email.activity.setup.AccountSettings$AccountServerSettingsFragmentCallback: void onProceedNext(int,com.android.email.activity.setup.AccountServerBaseFragment)> (EMAIL)
<com.android.email.MessageListContext: void writeToParcel(android.os.Parcel,int)> (EMAIL)
<com.android.email.activity.ThreePaneLayout$SavedState: void writeToParcel(android.os.Parcel,int)> (EMAIL)
<com.android.email.service.EasAuthenticatorService$EasAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (EMAIL)
<com.android.email.mail.store.ImapStore$ImapMessage: void setFlag(com.android.emailcommon.mail.Flag,boolean)> (EMAIL)
<com.android.email.Controller: void setMessageFavoriteSync(long,boolean)> (EMAIL)
<com.android.email.ControllerResultUiThreadWrapper: void sendMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (EMAIL)
<com.android.email.activity.UIControllerOnePane: boolean onUrlInMessageClicked(java.lang.String)> (EMAIL)
<com.android.email.activity.MessageListFragment: com.android.email.activity.MessageListFragment newInstance(com.android.email.MessageListContext)> (EMAIL)
<com.android.emailcommon.service.IPolicyService$Stub$Proxy: void setAccountHoldFlag(long,boolean)> (EMAIL)
<com.android.email.activity.MessagesAdapter: void toggleSelected(com.android.email.activity.MessageListItem)> (EMAIL)
<com.android.emailcommon.provider.Account: void writeToParcel(android.os.Parcel,int)> (EMAIL)
<com.android.email.mail.transport.MailTransport: void writeLine(java.lang.String,java.lang.String)> (EMAIL)
<com.android.email.activity.UiUtilities: void setVisibilitySafe(android.view.View,int)> (EMAIL)
<com.android.emailcommon.provider.Policy: void setAttachmentFlagsForNewPolicy(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Policy)> (EMAIL)
<com.android.email.MessagingController: void sendPendingMessages(com.android.emailcommon.provider.Account,long,com.android.email.MessagingListener)> (EMAIL)
<com.android.email.activity.setup.AccountSettings: android.content.Intent onBuildStartFragmentIntent(java.lang.String,android.os.Bundle,int,int)> (EMAIL)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void sendMail(long)> (EMAIL)
<com.android.email.Preferences: void setOneTimeInitializationProgress(int)> (EMAIL)
<com.android.email.SecurityPolicy: void setAccountPolicy(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Policy,java.lang.String)> (EMAIL)
<com.android.email.service.EmailServiceUtils: void startService(android.content.Context,java.lang.String)> (EMAIL)
<com.android.email.activity.AttachmentInfoDialog: com.android.email.activity.AttachmentInfoDialog newInstance(android.content.Context,int)> (EMAIL)
<com.android.email.activity.setup.AccountSecurity: android.content.Intent actionUpdateSecurityIntent(android.content.Context,long,boolean)> (EMAIL)
<com.android.email.activity.setup.AccountSettingsFragment$DeleteAccountFragment: com.android.email.activity.setup.AccountSettingsFragment$DeleteAccountFragment newInstance(com.android.emailcommon.provider.Account,android.app.Fragment)> (EMAIL)
<com.android.email.MessagingController: void processPendingActions(long)> (EMAIL)
<com.android.emailcommon.mail.Address: void setAddress(java.lang.String)> (EMAIL)
<com.android.email.mail.store.ImapConnection: java.lang.String sendCommand(java.lang.String,boolean)> (EMAIL)
<com.android.email.GroupMessagingListener: void sendPendingMessagesCompleted(long)> (EMAIL)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (EMAIL)
<com.android.email.RefreshManager$ControllerResult: void serviceCheckMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int,long)> (EMAIL)
<com.android.email.activity.UIControllerOnePane: void onSaveInstanceState(android.os.Bundle)> (EMAIL)
<com.android.email.Preferences: void setHasShownRequireManualSync(android.content.Context,com.android.emailcommon.provider.Account,boolean)> (EMAIL)
<com.android.email.Controller: void sendPendingMessages(long)> (EMAIL)
<com.android.email.activity.MessageListFragment: void onActivityCreated(android.os.Bundle)> (EMAIL)
<com.android.email.Controller: com.android.emailcommon.utility.EmailAsyncTask setMessageFavorite(long,boolean)> (EMAIL)
<com.android.emailcommon.service.IPolicyService$Stub$Proxy: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)> (EMAIL)
<com.android.email.NotificationController: void showPasswordExpiringNotification(long)> (EMAIL)
<com.android.email.MessagingController: void loadMessageForView(long,com.android.email.MessagingListener)> (EMAIL)
<com.android.email.service.MailService: void actionSendPendingMail(android.content.Context,long)> (EMAIL)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void sendMeetingResponse(long,int)> (EMAIL)
<com.android.email.activity.MessageViewFragment: com.android.emailcommon.provider.EmailContent$Message openMessageSync(android.app.Activity)> (EMAIL)
<com.android.email.activity.EmailActivity: android.content.Intent createSearchIntent(android.app.Activity,long,long,java.lang.String)> (EMAIL)
<com.android.email.activity.MailboxFragmentAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (EMAIL)
<com.android.email.service.PolicyService$1: void setAccountHoldFlag(long,boolean)> (EMAIL)
<com.android.email.Preferences: void setInhibitGraphicsAcceleration(boolean)> (EMAIL)
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void syncMailboxStatus(long,int,int)> (EMAIL)
<com.android.email.VendorPolicyLoader: com.android.email.activity.setup.AccountSettingsUtils$Provider findProviderForDomain(java.lang.String)> (EMAIL)
<com.android.email.Controller: void loadAttachment(long,long,long)> (EMAIL)
<com.android.email.RecipientAdapter: void setAccount(android.accounts.Account)> (EMAIL)
<com.android.email.mail.store.ImapFolder: void save(android.content.Context)> (EMAIL)
<com.android.email.Controller: void updateMailbox(long,long,boolean)> (EMAIL)
<com.android.email.MessagingController: void sendPendingMessagesSynchronous(com.android.emailcommon.provider.Account,long)> (EMAIL)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadAttachment(long,boolean)> (EMAIL)
<com.android.email.SecurityPolicy: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)> (EMAIL)
<com.android.email.activity.setup.EditQuickResponseDialog: com.android.email.activity.setup.EditQuickResponseDialog newInstance(com.android.emailcommon.provider.QuickResponse,long)> (EMAIL)
<com.android.email.Controller$ServiceCallback: void sendMessageStatus(long,java.lang.String,int,int)> (EMAIL)
<com.android.emailcommon.service.IAccountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (EMAIL)
<com.android.email.SecurityPolicy: void policiesRequired(long)> (EMAIL)
<com.android.emailcommon.internet.MimeMessage: void setHeader(java.lang.String,java.lang.String)> (EMAIL)
<com.android.email.mail.transport.MailTransport: void setSoTimeout(int)> (EMAIL)
<com.android.email.activity.setup.AccountSetupActivity: void onCreate(android.os.Bundle)> (EMAIL)
<com.android.email.activity.UIControllerTwoPane: boolean onUrlInMessageClicked(java.lang.String)> (EMAIL)
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void sendMessageStatus(long,java.lang.String,int,int)> (EMAIL)
<com.android.email.GroupMessagingListener: void sendPendingMessagesStarted(long,long)> (EMAIL)
<com.android.emailcommon.provider.EmailContent: int update(android.content.Context,android.content.ContentValues)> (EMAIL)
<com.android.email.mail.store.ImapFolder: void setFlags(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.Flag[],boolean)> (EMAIL)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void hostChanged(long)> (EMAIL)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void setLogging(int)> (EMAIL)
<com.android.email.Email: void enableStrictMode(boolean)> (EMAIL)
<com.android.email.activity.setup.AccountCheckSettingsFragment$ErrorDialog: com.android.email.activity.setup.AccountCheckSettingsFragment$ErrorDialog newInstance(android.content.Context,com.android.email.activity.setup.AccountCheckSettingsFragment,com.android.emailcommon.mail.MessagingException)> (EMAIL)
<com.android.email.RefreshManager: boolean sendPendingMessages(long)> (EMAIL)
<com.android.email.MessagingController$4: void messageRetrieved(com.android.emailcommon.mail.Message)> (EMAIL)
<com.android.email.activity.MessageCompose: void setMessageContentSelection(java.lang.String)> (EMAIL)
<com.android.email.service.EmailBroadcastProcessorService: void setImapDeletePolicy(android.content.Context)> (EMAIL)
<com.android.email.activity.MessageListFragment$1: void setField(long,boolean)> (EMAIL)
<com.android.email.activity.MessageListFragment$2: void setField(long,boolean)> (EMAIL)
<com.android.email.Controller: void setMessageReadSync(long,boolean)> (EMAIL)
<com.android.email.activity.MailboxListFragment: com.android.email.activity.MailboxListFragment newInstance(long,long,boolean)> (EMAIL)
<com.android.email.Controller: com.android.emailcommon.utility.EmailAsyncTask setMessageRead(long,boolean)> (EMAIL)
<com.android.email.service.AttachmentDownloadService: void addServiceIntentForTest(long,android.content.Intent)> (EMAIL)
<com.android.email.activity.setup.AccountCheckSettingsFragment$SecurityRequiredDialog: com.android.email.activity.setup.AccountCheckSettingsFragment$SecurityRequiredDialog newInstance(com.android.email.activity.setup.AccountCheckSettingsFragment,java.lang.String)> (EMAIL)
<com.android.email.Controller$ServiceCallback: void syncMailboxListStatus(long,int,int)> (EMAIL)
<com.android.email.MessagingListener: void sendPendingMessagesFailed(long,long,java.lang.Exception)> (EMAIL)
<com.android.email.service.EmailServiceUtils$NullEmailService: void sendMail(long)> (EMAIL)
<com.android.email.Controller$LegacyListener: void synchronizeMailboxStarted(long,long)> android.permission.READ_SYNC_SETTINGS (EMAIL)
<com.android.email.mail.store.Pop3Store$Pop3Message: void setFlag(com.android.emailcommon.mail.Flag,boolean)> (EMAIL)
<com.android.email.service.MailService$ControllerResults: void updateMailboxCallback(com.android.emailcommon.mail.MessagingException,long,long,int,int,java.util.ArrayList)> android.permission.READ_SYNC_SETTINGS (EMAIL)
<com.android.email.mail.store.Pop3Store$Pop3Folder: void setFlags(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.Flag[],boolean)> (EMAIL)
<com.android.email.MessagingController: void copyOneMessageToProvider(com.android.emailcommon.mail.Message,com.android.emailcommon.provider.EmailContent$Message,int,android.content.Context)> (EMAIL)
<com.android.email.NotificationController: void showDownloadForwardFailedNotification(com.android.emailcommon.provider.EmailContent$Attachment)> (EMAIL)
<com.android.email.activity.MailboxListFragment: void onCreate(android.os.Bundle)> (EMAIL)
<com.android.email.activity.MessageCompose: void setIntent(android.content.Intent)> (EMAIL)
<com.android.email.Controller: void setMessageAnsweredOrForwarded(long,int)> (EMAIL)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadMore(long)> (EMAIL)
<com.android.email.NotificationController: void showLoginFailedNotification(long)> (EMAIL)

BLUETOOTH:
<com.android.bluetooth.a2dp.A2dpService: boolean connect(android.bluetooth.BluetoothDevice)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterState$OffState: boolean processMessage(android.os.Message)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService: boolean setScanMode(int,int)> (BLUETOOTH)
<android.bluetooth.IBluetooth$Stub$Proxy: void unregisterCallback(android.bluetooth.IBluetoothCallback)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (BLUETOOTH)
<com.android.bluetooth.pan.PanService: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,java.lang.String,int,int,int)> (BLUETOOTH)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setScanMode(int,int)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterState$PendingCommandState: boolean processMessage(android.os.Message)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService: boolean setDiscoverableTimeout(int)> (BLUETOOTH)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean sendDtmf(int)> (BLUETOOTH)
<com.android.bluetooth.Utils: byte[] uuidsToByteArray(android.os.ParcelUuid[])> (BLUETOOTH)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (BLUETOOTH)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (BLUETOOTH)
<android.bluetooth.BluetoothTetheringDataTracker: void setTeardownRequested(boolean)> (BLUETOOTH)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: boolean processMessage(android.os.Message)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setScanMode(int,int)> (BLUETOOTH)
<com.android.bluetooth.Utils: void copyStream(java.io.InputStream,java.io.OutputStream,int)> (BLUETOOTH)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (BLUETOOTH)
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (BLUETOOTH)
<android.bluetooth.BluetoothTetheringDataTracker: boolean setRadio(boolean)> (BLUETOOTH)
<com.android.bluetooth.opp.BluetoothOppManager: void saveSendingFileInfo(java.lang.String,java.lang.String,boolean)> (BLUETOOTH)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> (BLUETOOTH)
<android.bluetooth.BluetoothInputDevice: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (BLUETOOTH)
<com.android.bluetooth.opp.BluetoothOppManager: void saveSendingFileInfo(java.lang.String,java.util.ArrayList,boolean)> (BLUETOOTH)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> (BLUETOOTH)
<com.android.bluetooth.hdp.HealthService: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> (BLUETOOTH)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (BLUETOOTH)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> (BLUETOOTH)
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.BLUETOOTH android.permission.WRITE_SETTINGS android.permission.BLUETOOTH_ADMIN android.permission.WAKE_LOCK android.permission.MODIFY_AUDIO_SETTINGS (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterProperties: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> (BLUETOOTH)
<com.android.bluetooth.opp.BluetoothOppUtility: void openReceivedFile(android.content.Context,java.lang.String,java.lang.String,java.lang.Long,android.net.Uri)> (BLUETOOTH)
<com.android.bluetooth.opp.Constants: void updateShareStatus(android.content.Context,int,int)> (BLUETOOTH)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: boolean processMessage(android.os.Message)> (BLUETOOTH)
<android.bluetooth.IBluetoothPan$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (BLUETOOTH)
<android.bluetooth.BluetoothTetheringDataTracker: void setDependencyMet(boolean)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterProperties: boolean setDiscoverableTimeout(int)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterState$OnState: boolean processMessage(android.os.Message)> (BLUETOOTH)
<com.android.bluetooth.btservice.ProfileService: void notifyProfileServiceStateChanged(int)> (BLUETOOTH)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: boolean processMessage(android.os.Message)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService: void onProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> (BLUETOOTH)
<android.bluetooth.BluetoothOutputStream: void write(byte[],int,int)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterProperties: boolean setName(java.lang.String)> (BLUETOOTH)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (BLUETOOTH)
<android.bluetooth.BluetoothDevice: boolean setPairingConfirmation(boolean)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService: void setProfileAutoConnectionPriority(android.bluetooth.BluetoothDevice,int)> (BLUETOOTH)
<com.android.bluetooth.btservice.RemoteDevices: void pinRequestCallback(byte[],byte[],int)> (BLUETOOTH)
<android.bluetooth.BluetoothAdapter: void setDiscoverableTimeout(int)> (BLUETOOTH)
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (BLUETOOTH)
<com.android.bluetooth.a2dp.A2dpService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (BLUETOOTH)
<com.android.bluetooth.btservice.BondStateMachine$StableState: boolean processMessage(android.os.Message)> (BLUETOOTH)
<com.android.bluetooth.hid.HidService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> (BLUETOOTH)
<android.bluetooth.BluetoothHeadset: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (BLUETOOTH)
<com.android.bluetooth.hid.HidService: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> (BLUETOOTH)
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (BLUETOOTH)
<com.android.bluetooth.btservice.RemoteDevices: void devicePropertyChangedCallback(byte[],int[],byte[][])> (BLUETOOTH)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> (BLUETOOTH)
<android.bluetooth.BluetoothInputDevice: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> (BLUETOOTH)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (BLUETOOTH)
<com.android.bluetooth.Utils: byte[] uuidToByteArray(android.os.ParcelUuid)> (BLUETOOTH)
<android.bluetooth.BluetoothDevice: boolean setDeviceOutOfBandData(byte[],byte[])> (BLUETOOTH)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (BLUETOOTH)
<com.android.bluetooth.hid.HidService: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> (BLUETOOTH)
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int,int)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService: boolean setName(java.lang.String)> (BLUETOOTH)
<android.bluetooth.IBluetoothPbap$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (BLUETOOTH)
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterProperties: boolean setUuids(android.os.ParcelUuid[])> (BLUETOOTH)
<android.bluetooth.IBluetoothPan$Stub$Proxy: void setBluetoothTethering(boolean)> (BLUETOOTH)
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)> (BLUETOOTH)
<android.bluetooth.IBluetoothHealth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (BLUETOOTH)
<com.android.bluetooth.hfp.HeadsetService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (BLUETOOTH)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> (BLUETOOTH)
<com.android.bluetooth.opp.BluetoothOppPreference: void setChannel(android.bluetooth.BluetoothDevice,int,int)> (BLUETOOTH)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setName(java.lang.String)> (BLUETOOTH)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: void setBluetoothTethering(boolean)> (BLUETOOTH)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> (BLUETOOTH)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (BLUETOOTH)
<android.bluetooth.IBluetoothManagerCallback$Stub$Proxy: void onBluetoothServiceUp(android.bluetooth.IBluetooth)> (BLUETOOTH)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setName(java.lang.String)> (BLUETOOTH)
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void onHealthChannelStateChange(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> (BLUETOOTH)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (BLUETOOTH)
<android.bluetooth.BluetoothTetheringDataTracker: void setUserDataEnable(boolean)> (BLUETOOTH)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: void phoneStateChanged(int,int,int,java.lang.String,int)> (BLUETOOTH)
<com.android.bluetooth.a2dp.A2dpStateMachine$Disconnected: boolean processMessage(android.os.Message)> (BLUETOOTH)
<com.android.bluetooth.btservice.RemoteDevices: void deviceFoundCallback(byte[])> (BLUETOOTH)
<com.android.bluetooth.hid.HidService: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> (BLUETOOTH)
<com.android.bluetooth.pbap.BluetoothPbapReceiver: void onReceive(android.content.Context,android.content.Intent)> (BLUETOOTH)
<com.android.bluetooth.Utils: byte[] intToByteArray(int)> (BLUETOOTH)
<android.bluetooth.BluetoothDevice: boolean setPin(byte[])> (BLUETOOTH)
<android.bluetooth.BluetoothInputDevice: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> (BLUETOOTH)
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration,int)> (BLUETOOTH)
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: boolean processMessage(android.os.Message)> (BLUETOOTH)
<com.android.bluetooth.opp.BluetoothOppService$2: void handleMessage(android.os.Message)> (BLUETOOTH)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (BLUETOOTH)
<android.bluetooth.BluetoothTetheringDataTracker: void setPolicyDataEnable(boolean)> (BLUETOOTH)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager$HandlerForStringBuffer: boolean onEntryCreated(java.lang.String)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> (BLUETOOTH)
<android.bluetooth.BluetoothServerSocket: void setServiceName(java.lang.String)> (BLUETOOTH)
<android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> (BLUETOOTH)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> (BLUETOOTH)
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (BLUETOOTH)
<com.android.bluetooth.btservice.RemoteDevices: com.android.bluetooth.btservice.RemoteDevices$DeviceProperties addDeviceProperties(byte[])> (BLUETOOTH)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setDiscoverableTimeout(int)> (BLUETOOTH)
<android.bluetooth.BluetoothDevice: boolean setTrust(boolean)> (BLUETOOTH)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> android.permission.READ_PHONE_STATE com.android.voicemail.permission.ADD_VOICEMAIL android.permission.BLUETOOTH android.permission.READ_SOCIAL_STREAM android.permission.READ_CALL_LOG android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.BLUETOOTH_ADMIN android.permission.WAKE_LOCK (BLUETOOTH)
<com.android.bluetooth.hfp.HeadsetService: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (BLUETOOTH)
<android.bluetooth.BluetoothInputDevice: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService: boolean enable(boolean)> (BLUETOOTH)
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: void setAlias(java.lang.String)> (BLUETOOTH)
<android.bluetooth.IBluetoothInputDevice$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (BLUETOOTH)
<com.android.bluetooth.hfp.HeadsetService: boolean connect(android.bluetooth.BluetoothDevice)> (BLUETOOTH)
<android.bluetooth.IBluetooth$Stub$Proxy: void registerCallback(android.bluetooth.IBluetoothCallback)> (BLUETOOTH)
<android.bluetooth.IBluetoothManager$Stub$Proxy: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> (BLUETOOTH)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (BLUETOOTH)
<com.android.bluetooth.btservice.ProfileService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (BLUETOOTH)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (BLUETOOTH)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (BLUETOOTH)
<android.bluetooth.IBluetoothCallback$Stub$Proxy: void onBluetoothStateChange(int,int)> (BLUETOOTH)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: void clccResponse(int,int,int,int,boolean,java.lang.String,int)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (BLUETOOTH)
<android.bluetooth.IBluetoothManager$Stub$Proxy: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> (BLUETOOTH)
<com.android.bluetooth.btservice.RemoteDevices: void aclStateChangeCallback(int,byte[],int)> (BLUETOOTH)
<android.bluetooth.IBluetooth$Stub$Proxy: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> (BLUETOOTH)
<com.android.bluetooth.opp.TestTcpServer: int onPut(javax.obex.Operation)> (BLUETOOTH)
<android.bluetooth.BluetoothDevice: boolean setAlias(java.lang.String)> (BLUETOOTH)
<com.android.bluetooth.opp.BluetoothOppUtility: void retryTransfer(android.content.Context,com.android.bluetooth.opp.BluetoothOppTransferInfo)> (BLUETOOTH)
<android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)> (BLUETOOTH)
<android.bluetooth.BluetoothDevice: boolean setPasskey(int)> (BLUETOOTH)
<com.android.bluetooth.opp.BluetoothOppReceiver: void onReceive(android.content.Context,android.content.Intent)> (BLUETOOTH)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: boolean processChld(int)> (BLUETOOTH)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> (BLUETOOTH)
<com.android.bluetooth.btservice.RemoteDevices: void sspRequestCallback(byte[],byte[],int,int,int)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setDiscoverableTimeout(int)> (BLUETOOTH)
<com.android.bluetooth.opp.BluetoothOppPreference: void setName(android.bluetooth.BluetoothDevice,java.lang.String)> (BLUETOOTH)
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterService: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> (BLUETOOTH)
<com.android.bluetooth.btservice.AdapterProperties: boolean setScanMode(int)> (BLUETOOTH)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> (BLUETOOTH)

ACCOUNT_SETTINGS:
<android.accounts.AccountManagerService: boolean access$1100(android.accounts.AccountManagerService,android.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES (ACCOUNT_SETTINGS)
<android.accounts.IAccountAuthenticator$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService: void installNotification(int,android.app.Notification,android.os.UserHandle)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> android.permission.USE_CREDENTIALS (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession: void sendResult()> (ACCOUNT_SETTINGS)
<android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)> (ACCOUNT_SETTINGS)
<android.test.IsolatedContext$MockAccountManager: void setPassword(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS (ACCOUNT_SETTINGS)
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(java.io.InputStream)> android.permission.SET_WALLPAPER android.permission.MANAGE_APP_TOKENS (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService: java.util.HashMap readAuthTokensForAccountFromDatabaseLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account)> (ACCOUNT_SETTINGS)
<android.accounts.AccountAuthenticatorActivity: void setRequestedOrientation(int)> android.permission.BROADCAST_STICKY android.permission.MANAGE_APP_TOKENS android.permission.UPDATE_DEVICE_STATS android.permission.DEVICE_POWER android.permission.WAKE_LOCK (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)> (ACCOUNT_SETTINGS)
<android.accounts.AccountAuthenticatorActivity: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> android.permission.BROADCAST_STICKY android.permission.MANAGE_APP_TOKENS (ACCOUNT_SETTINGS)
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onError(int,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountManager$Stub$Proxy: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> android.permission.MANAGE_ACCOUNTS (ACCOUNT_SETTINGS)
<android.accounts.IAccountAuthenticator$Stub$Proxy: void getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)> (ACCOUNT_SETTINGS)
<android.accounts.AccountAuthenticatorCache$MySerializer: void writeAsXml(java.lang.Object,org.xmlpull.v1.XmlSerializer)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManager: android.content.Intent newChooseAccountIntent(android.accounts.Account,java.util.ArrayList,java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountAuthenticatorResponse$Stub$Proxy: void onError(int,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService: void setPassword(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS (ACCOUNT_SETTINGS)
<android.accounts.AbstractAccountAuthenticator$Transport: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManager: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> android.permission.GET_ACCOUNTS (ACCOUNT_SETTINGS)
<android.accounts.IAccountAuthenticator$Stub$Proxy: void hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String[])> (ACCOUNT_SETTINGS)
<android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> (ACCOUNT_SETTINGS)
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService: void writeUserDataIntoCacheLocked(android.accounts.AccountManagerService$UserAccounts,android.database.sqlite.SQLiteDatabase,android.accounts.Account,java.lang.String,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManager$AmsTask$Response: void onError(int,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS (ACCOUNT_SETTINGS)
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)> android.permission.SET_WALLPAPER (ACCOUNT_SETTINGS)
<android.accounts.IAccountAuthenticator$Stub$Proxy: void getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManager$AmsTask: void set(android.os.Bundle)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountAuthenticator$Stub$Proxy: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService$TestFeaturesSession: void onResult(android.os.Bundle)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService: java.util.HashMap readUserDataForAccountFromDatabaseLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountAuthenticator$Stub$Proxy: void editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService: java.lang.String readAuthTokenInternal(android.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)> (ACCOUNT_SETTINGS)
<android.accounts.AccountAuthenticatorActivity: void sendBroadcast(android.content.Intent,java.lang.String)> android.permission.BROADCAST_STICKY android.permission.MANAGE_APP_TOKENS (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService: void writeAuthTokenIntoCacheLocked(android.accounts.AccountManagerService$UserAccounts,android.database.sqlite.SQLiteDatabase,android.accounts.Account,java.lang.String,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManager$AmsTask: void set(java.lang.Object)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountAuthenticator$Stub$Proxy: void getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService: void invalidateAuthToken(java.lang.String,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountAuthenticator$Stub$Proxy: void addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService: java.lang.String readUserDataInternal(android.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountManager$Stub$Proxy: void getAuthTokenLabel(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> (ACCOUNT_SETTINGS)
<android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (ACCOUNT_SETTINGS)
<android.accounts.AccountAuthenticatorActivity: android.content.ComponentName startService(android.content.Intent)> android.permission.MANAGE_APP_TOKENS (ACCOUNT_SETTINGS)
<android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService$RemoveAccountSession: void onResult(android.os.Bundle)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountManager$Stub$Proxy: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountAuthenticator$Stub$Proxy: void confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)> (ACCOUNT_SETTINGS)
<android.accounts.IAccountManager$Stub$Proxy: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> android.permission.MANAGE_ACCOUNTS (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService: android.os.IBinder onBind(android.content.Intent)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService$3: void onResult(android.os.Bundle)> (ACCOUNT_SETTINGS)
<android.accounts.AccountManagerService$4: void onResult(android.os.Bundle)> (ACCOUNT_SETTINGS)

AUDIO:
<android.media.IAudioService$Stub$Proxy: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void setRingtonePlayer(android.media.IRingtonePlayer)> (AUDIO)
<android.media.AudioManager: void setRingerMode(int)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void setBluetoothA2dpOn(boolean)> (AUDIO)
<android.media.audiofx.AudioEffect: int setParameter(int[],int[])> (AUDIO)
<android.media.AudioService$AudioHandler: void handleMessage(android.os.Message)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void playSoundEffect(int)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void unregisterAudioFocusClient(java.lang.String)> (AUDIO)
<android.media.AudioManager: void setMasterVolume(int,int)> (AUDIO)
<android.media.audiofx.AudioEffect: int setParameter(int,short)> (AUDIO)
<android.media.AudioService: void setRemoteStreamVolume(int)> (AUDIO)
<android.media.AudioTrack: int setPositionNotificationPeriod(int)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void setStreamMute(int,boolean,android.os.IBinder)> (AUDIO)
<android.media.audiofx.AudioEffect: byte[] intToByteArray(int)> (AUDIO)
<android.media.AudioService: void setStreamVolume(int,int,int)> (AUDIO)
<android.media.AudioService: void setRingerMode(int)> (AUDIO)
<android.media.AudioManager: void setBluetoothA2dpOn(boolean)> (AUDIO)
<android.media.AudioManager: void setRouting(int,int,int)> (AUDIO)
<android.media.AudioService: void setMasterMute(boolean,int,android.os.IBinder)> (AUDIO)
<android.media.IAudioFocusDispatcher$Stub$Proxy: void dispatchAudioFocusChange(int,java.lang.String)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void unregisterRemoteControlDisplay(android.media.IRemoteControlDisplay)> (AUDIO)
<android.media.AudioService: void setVibrateSetting(int,int)> (AUDIO)
<android.media.AudioService: void setWiredDeviceConnectionState(int,int,java.lang.String)> (AUDIO)
<android.media.AudioService$VolumeStreamState: boolean setIndex(int,int,boolean)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: boolean shouldVibrate(int)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int)> (AUDIO)
<android.media.AudioManager: void setMode(int)> (AUDIO)
<android.media.AudioService: void setSpeakerphoneOn(boolean)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)> (AUDIO)
<android.media.AudioService: void registerRemoteVolumeObserverForRcc(int,android.media.IRemoteVolumeObserver)> (AUDIO)
<android.media.audiofx.AudioEffect: int setParameter(int[],byte[])> (AUDIO)
<android.media.AudioManager: void setStreamMute(int,boolean)> (AUDIO)
<android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)> (AUDIO)
<android.media.AudioService: void setPlaybackInfoForRcc(int,int,int)> (AUDIO)
<android.media.AudioService: void setStreamMute(int,boolean,android.os.IBinder)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void unregisterRemoteControlClient(android.app.PendingIntent,android.media.IRemoteControlClient)> (AUDIO)
<android.media.AudioTrack: int setPlaybackRate(int)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(boolean)> (AUDIO)
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.BLUETOOTH android.permission.WRITE_SETTINGS android.permission.BROADCAST_STICKY android.permission.BLUETOOTH_ADMIN android.permission.WAKE_LOCK android.permission.MODIFY_AUDIO_SETTINGS (AUDIO)
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)> (AUDIO)
<android.media.audiofx.AudioEffect: int setParameter(int[],short[])> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void setRemoteSubmixOn(boolean,int)> (AUDIO)
<android.media.AudioManager: void setVibrateSetting(int,int)> (AUDIO)
<android.media.audiofx.Virtualizer: void setProperties(android.media.audiofx.Virtualizer$Settings)> (AUDIO)
<android.media.audiofx.AudioEffect: int setParameter(byte[],byte[])> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void setRingerMode(int)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void setWiredDeviceConnectionState(int,int,java.lang.String)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)> (AUDIO)
<android.media.audiofx.Virtualizer: void setStrength(short)> (AUDIO)
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.BLUETOOTH android.permission.WRITE_SETTINGS android.permission.BROADCAST_STICKY android.permission.BLUETOOTH_ADMIN android.permission.WAKE_LOCK android.permission.MODIFY_AUDIO_SETTINGS (AUDIO)
<android.media.IAudioService$Stub$Proxy: void setStreamSolo(int,boolean,android.os.IBinder)> (AUDIO)
<android.media.audiofx.Equalizer: void setProperties(android.media.audiofx.Equalizer$Settings)> (AUDIO)
<android.media.audiofx.AudioEffect: int setEnabled(boolean)> (AUDIO)
<android.media.AudioManager: void setRemoteSubmixOn(boolean,int)> (AUDIO)
<android.media.AudioManager: void setWiredDeviceConnectionState(int,int,java.lang.String)> (AUDIO)
<android.media.audiofx.Equalizer: void setBandLevel(short,short)> (AUDIO)
<android.media.AudioTrack: int setStereoVolume(float,float)> (AUDIO)
<android.media.AudioService: void adjustStreamVolume(int,int,int)> (AUDIO)
<android.media.audiofx.BassBoost: void setStrength(short)> (AUDIO)
<android.media.AudioService$VolumeStreamState: void setLastAudibleIndex(int,int)> (AUDIO)
<android.media.AudioManager: void setParameters(java.lang.String)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void setVibrateSetting(int,int)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder)> (AUDIO)
<android.media.audiofx.BassBoost: void setProperties(android.media.audiofx.BassBoost$Settings)> (AUDIO)
<android.media.audiofx.PresetReverb: void setProperties(android.media.audiofx.PresetReverb$Settings)> (AUDIO)
<android.media.AudioService: void setBluetoothScoOn(boolean)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void registerRemoteControlDisplay(android.media.IRemoteControlDisplay)> (AUDIO)
<android.media.audiofx.AudioEffect: int setParameter(int,int)> (AUDIO)
<android.media.AudioTrack: int setNotificationMarkerPosition(int)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void adjustLocalOrRemoteStreamVolume(int,int)> (AUDIO)
<android.media.AudioManager: void setMasterMute(boolean,int)> (AUDIO)
<android.media.AudioManager: void setMasterMute(boolean)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void adjustVolume(int,int)> (AUDIO)
<android.media.AudioTrack: int setAuxEffectSendLevel(float)> (AUDIO)
<android.media.AudioRoutesInfo: void writeToParcel(android.os.Parcel,int)> (AUDIO)
<android.media.AudioService: void playSoundEffect(int)> (AUDIO)
<android.media.AudioRecord: int setNotificationMarkerPosition(int)> (AUDIO)
<android.media.AudioService: void setMasterVolume(int,int)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void adjustMasterVolume(int,int)> (AUDIO)
<android.media.AudioService: void setRemoteSubmixOn(boolean,int)> (AUDIO)
<android.media.AudioService: void setMode(int,android.os.IBinder)> android.permission.BLUETOOTH android.permission.BROADCAST_STICKY android.permission.BLUETOOTH_ADMIN android.permission.MODIFY_AUDIO_SETTINGS (AUDIO)
<android.media.audiofx.AudioEffect: byte[] shortToByteArray(short)> (AUDIO)
<android.media.AudioManager: void setBluetoothScoOn(boolean)> (AUDIO)
<android.media.AudioManager: void setMicrophoneMute(boolean)> (AUDIO)
<android.media.AudioService: void setStreamSolo(int,boolean,android.os.IBinder)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int)> (AUDIO)
<android.media.AudioManager: void setStreamSolo(int,boolean)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void setPlaybackInfoForRcc(int,int,int)> (AUDIO)
<android.media.AudioManager: void setStreamVolume(int,int,int)> (AUDIO)
<android.media.audiofx.AudioEffect: int setParameter(int,byte[])> (AUDIO)
<android.media.AudioTrack: int setLoopPoints(int,int,int)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void setRemoteStreamVolume(int)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void forceVolumeControlStream(int,android.os.IBinder)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: int requestAudioFocus(int,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void setMasterVolume(int,int)> (AUDIO)
<android.media.AudioRecord: int setPositionNotificationPeriod(int)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: int registerRemoteControlClient(android.app.PendingIntent,android.media.IRemoteControlClient,java.lang.String)> (AUDIO)
<android.media.AudioManager: void setWiredHeadsetOn(boolean)> (AUDIO)
<android.media.AudioService: void playSoundEffectVolume(int,float)> (AUDIO)
<android.media.AudioTrack: int setPlaybackHeadPosition(int)> (AUDIO)
<android.media.AudioManager: void setSpeakerphoneOn(boolean)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void registerRemoteVolumeObserverForRcc(int,android.media.IRemoteVolumeObserver)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void remoteControlDisplayUsesBitmapSize(android.media.IRemoteControlDisplay,int,int)> (AUDIO)
<android.media.audiofx.PresetReverb: void setPreset(short)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void setMasterMute(boolean,int,android.os.IBinder)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void playSoundEffectVolume(int,float)> (AUDIO)
<android.media.AudioService: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)> (AUDIO)
<android.media.IAudioService$Stub$Proxy: void setBluetoothScoOn(boolean)> android.permission.MODIFY_AUDIO_SETTINGS (AUDIO)
<android.media.AudioService$VolumeStreamState: void setAllIndexes(android.media.AudioService$VolumeStreamState,boolean)> android.permission.STOP_APP_SWITCHES (AUDIO)

SYNCHRONIZATION_DATA:
<android.content.SyncStorageEngine: void addPeriodicSync(android.accounts.Account,int,java.lang.String,android.os.Bundle,long)> (SYNCHRONIZATION_DATA)
<com.android.server.display.DisplayManagerService$CallbackRecord: void notifyDisplayEventAsync(int,int)> (SYNCHRONIZATION_DATA)
<com.google.android.picasasync.SyncState: boolean onSyncRequested(android.database.sqlite.SQLiteDatabase,java.lang.String)> (SYNCHRONIZATION_DATA)
<android.test.mock.MockContentResolver: void setMasterSyncAutomatically(boolean)> android.permission.WRITE_SYNC_SETTINGS (SYNCHRONIZATION_DATA)
<android.content.SyncManager: void dumpSyncState(java.io.PrintWriter)> (SYNCHRONIZATION_DATA)
<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)> android.permission.WRITE_SYNC_SETTINGS (SYNCHRONIZATION_DATA)
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int,int)> (SYNCHRONIZATION_DATA)
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (SYNCHRONIZATION_DATA)
<android.app.Instrumentation: void sendCharacterSync(int)> (SYNCHRONIZATION_DATA)
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int,int,java.lang.Object)> (SYNCHRONIZATION_DATA)
<com.google.android.picasasync.PicasaFacade: android.net.Uri requestImmediateSyncOnAlbum(long)> (SYNCHRONIZATION_DATA)
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (SYNCHRONIZATION_DATA)
<android.content.IContentService$Stub$Proxy: boolean isSyncPending(android.accounts.Account,java.lang.String)> (SYNCHRONIZATION_DATA)
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (SYNCHRONIZATION_DATA)
<android.content.SyncStatusInfo: void setPeriodicSyncTime(int,long)> (SYNCHRONIZATION_DATA)
<com.android.exchange.adapter.ContactsSyncAdapter: void sendSyncOptions(java.lang.Double,com.android.exchange.adapter.Serializer,boolean)> (SYNCHRONIZATION_DATA)
<android.content.IContentService$Stub$Proxy: void cancelSync(android.accounts.Account,java.lang.String)> (SYNCHRONIZATION_DATA)
<com.android.exchange.adapter.EmailSyncAdapter: void sendSyncOptions(java.lang.Double,com.android.exchange.adapter.Serializer,boolean)> (SYNCHRONIZATION_DATA)
<com.android.camera.MosaicPreviewRenderer$EGLHandler: void sendMessageSync(int)> (SYNCHRONIZATION_DATA)
<android.content.SyncManager$ActiveSyncContext: boolean bindToSyncAdapter(android.content.pm.RegisteredServicesCache$ServiceInfo,int)> (SYNCHRONIZATION_DATA)
<android.content.SyncStorageEngine: void setSyncAutomatically(android.accounts.Account,int,java.lang.String,boolean)> (SYNCHRONIZATION_DATA)
<com.android.exchange.adapter.AccountSyncAdapter: void sendSyncOptions(java.lang.Double,com.android.exchange.adapter.Serializer,boolean)> (SYNCHRONIZATION_DATA)
<com.google.android.picasasync.MetadataSync$MetadataSyncTask: void performSync(android.content.SyncResult)> (SYNCHRONIZATION_DATA)
<android.content.SyncStorageEngine: void setMasterSyncAutomatically(boolean,int)> (SYNCHRONIZATION_DATA)
<android.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> android.permission.WRITE_SYNC_SETTINGS (SYNCHRONIZATION_DATA)
<com.google.android.picasasync.PhotoPrefetch$PrefetchFullImage: void performSync(android.content.SyncResult)> (SYNCHRONIZATION_DATA)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (SYNCHRONIZATION_DATA)
<android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (SYNCHRONIZATION_DATA)
<android.content.ISyncAdapter$Stub$Proxy: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (SYNCHRONIZATION_DATA)
<android.content.SyncManager: void dumpSyncHistory(java.io.PrintWriter)> (SYNCHRONIZATION_DATA)
<android.content.ISyncAdapter$Stub$Proxy: void cancelSync(android.content.ISyncContext)> (SYNCHRONIZATION_DATA)
<android.app.Instrumentation: void sendKeyDownUpSync(int)> (SYNCHRONIZATION_DATA)
<com.android.camera.CameraManager$CameraProxy: void setParametersAsync(android.hardware.Camera$Parameters)> (SYNCHRONIZATION_DATA)
<android.app.Instrumentation: void sendStringSync(java.lang.String)> (SYNCHRONIZATION_DATA)
<com.android.providers.contacts.TransactionContext: void syncStateUpdated(long,java.lang.Object)> (SYNCHRONIZATION_DATA)
<android.os.CommonTimeConfig: int setClientSyncInterval(int)> (SYNCHRONIZATION_DATA)
<android.content.SyncManager: void cancelActiveSync(android.accounts.Account,int,java.lang.String)> (SYNCHRONIZATION_DATA)
<android.content.IContentService$Stub$Proxy: void setMasterSyncAutomatically(boolean)> (SYNCHRONIZATION_DATA)
<com.android.exchange.ExchangeService: void startManualSync(long,int,com.android.exchange.Request)> android.permission.READ_SYNC_SETTINGS android.permission.VIBRATE android.permission.WAKE_LOCK (SYNCHRONIZATION_DATA)
<android.content.ContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (SYNCHRONIZATION_DATA)
<com.google.android.picasasync.PhotoPrefetch$PrefetchAlbumCover: void performSync(android.content.SyncResult)> (SYNCHRONIZATION_DATA)
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int)> (SYNCHRONIZATION_DATA)
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(android.os.Message)> (SYNCHRONIZATION_DATA)
<android.content.IContentService$Stub$Proxy: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (SYNCHRONIZATION_DATA)
<android.app.Instrumentation: android.app.Activity startActivitySync(android.content.Intent)> (SYNCHRONIZATION_DATA)
<android.os.Message: void setAsynchronous(boolean)> (SYNCHRONIZATION_DATA)
<com.google.android.picasasync.PicasaSyncManager: void performSync(com.google.android.picasasync.PicasaSyncManager$SyncSession)> (SYNCHRONIZATION_DATA)
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int)> (SYNCHRONIZATION_DATA)
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> android.permission.WRITE_SYNC_SETTINGS android.permission.READ_SYNC_SETTINGS android.permission.VIBRATE android.permission.WAKE_LOCK android.permission.ACCESS_NETWORK_STATE (SYNCHRONIZATION_DATA)
<android.content.IContentService$Stub$Proxy: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (SYNCHRONIZATION_DATA)
<android.content.SyncStorageEngine: void removePeriodicSync(android.accounts.Account,int,java.lang.String,android.os.Bundle)> (SYNCHRONIZATION_DATA)
<com.android.exchange.adapter.CalendarSyncAdapter: void sendSyncOptions(java.lang.Double,com.android.exchange.adapter.Serializer,boolean)> (SYNCHRONIZATION_DATA)
<com.android.exchange.adapter.AbstractSyncAdapter: void setPimSyncOptions(java.lang.Double,java.lang.String,com.android.exchange.adapter.Serializer)> (SYNCHRONIZATION_DATA)
<android.content.IContentService$Stub$Proxy: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (SYNCHRONIZATION_DATA)
<com.android.providers.calendar.CalendarDatabaseHelper: void scheduleSync(android.accounts.Account,boolean,java.lang.String)> (SYNCHRONIZATION_DATA)
<com.android.camera.CameraManager$CameraProxy: void setPreviewTextureAsync(android.graphics.SurfaceTexture)> (SYNCHRONIZATION_DATA)
<android.app.ApplicationPackageManager: boolean addPermissionAsync(android.content.pm.PermissionInfo)> (SYNCHRONIZATION_DATA)
<com.google.android.picasasync.PicasaFacade: android.net.Uri requestImmediateSyncOnAlbumList(java.lang.String)> (SYNCHRONIZATION_DATA)
<android.media.IRingtonePlayer$Stub$Proxy: void playAsync(android.net.Uri,android.os.UserHandle,boolean,int)> (SYNCHRONIZATION_DATA)
<com.google.android.picasasync.PhotoPrefetch$PrefetchScreenNail: void performSync(android.content.SyncResult)> (SYNCHRONIZATION_DATA)
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,java.lang.Object)> (SYNCHRONIZATION_DATA)
<android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String)> (SYNCHRONIZATION_DATA)
<android.content.SyncStorageEngine: void setIsSyncable(android.accounts.Account,int,java.lang.String,int)> (SYNCHRONIZATION_DATA)
<android.app.ContextImpl$ApplicationContentResolver: void setMasterSyncAutomatically(boolean)> android.permission.WRITE_SYNC_SETTINGS (SYNCHRONIZATION_DATA)
<com.google.android.picasasync.UploadsManager$UploadTask: void performSync(android.content.SyncResult)> (SYNCHRONIZATION_DATA)
<android.content.ContentService: void setMasterSyncAutomatically(boolean)> (SYNCHRONIZATION_DATA)

NETWORK:
<android.net.sip.SimpleSessionDescription: void setEncryption(java.lang.String,java.lang.String)> (NETWORK)
<android.net.Proxy: void setHttpProxySystemProperty(java.lang.String,java.lang.String,java.lang.String)> (NETWORK)
<android.net.wifi.WifiStateMachine$ScanModeState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.NetworkState: void writeToParcel(android.os.Parcel,int)> (NETWORK)
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> (NETWORK)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$UserAuthorizingInvitationState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.CaptivePortalTracker$DelayedCaptiveCheckState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.WifiManager: void save(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager$ActionListener)> (NETWORK)
<android.net.LocalSocket: void setSoTimeout(int)> (NETWORK)
<android.net.wifi.WifiStateTracker: void setDependencyMet(boolean)> (NETWORK)
<com.android.server.NetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)> (NETWORK)
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> (NETWORK)
<com.android.server.NetworkManagementService: void setFirewallEgressDestRule(java.lang.String,int,boolean)> (NETWORK)
<android.net.wifi.WifiNative: boolean setBluetoothCoexistenceMode(int)> (NETWORK)
<android.net.http.Headers: void setCacheControl(java.lang.String)> (NETWORK)
<android.net.wifi.WifiConfigStore: android.net.wifi.WpsResult startWpsWithPinFromDevice(android.net.wifi.WpsInfo)> (NETWORK)
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)> (NETWORK)
<com.android.server.net.NetworkStatsRecorder$RemoveUidRewriter: void write(java.io.OutputStream)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener)> (NETWORK)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> (NETWORK)
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setProtocol(java.lang.String)> (NETWORK)
<android.net.SntpClient: boolean requestTime(java.lang.String,int)> (NETWORK)
<android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)> (NETWORK)
<android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)> (NETWORK)
<android.net.wifi.WifiStateMachine$DriverStoppingState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.sip.ISipSession$Stub$Proxy: void answerCall(java.lang.String,int)> (NETWORK)
<android.net.sip.SipManager: android.content.Intent createIncomingCallBroadcast(java.lang.String,java.lang.String)> (NETWORK)
<android.net.wifi.WifiStateMachine$DriverUnloadedState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[])> (NETWORK)
<android.net.http.Headers: void setEtag(java.lang.String)> (NETWORK)
<android.net.wifi.WifiStateMachine$L2ConnectedState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void setUpnpServiceResponseListener(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener)> (NETWORK)
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> android.permission.READ_PHONE_STATE android.permission.BLUETOOTH android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE android.permission.CHANGE_NETWORK_STATE android.permission.BLUETOOTH_ADMIN android.permission.ACCESS_NETWORK_STATE (NETWORK)
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: void writeToParcel(android.os.Parcel,int)> (NETWORK)
<android.net.ConnectivityManager: int setUsbTethering(boolean)> (NETWORK)
<android.net.sip.SimpleSessionDescription$Media: void setFormat(java.lang.String,java.lang.String)> (NETWORK)
<android.net.nsd.INsdManager$Stub$Proxy: void setEnabled(boolean)> (NETWORK)
<android.net.wifi.WifiNative: boolean setScanResultHandling(int)> (NETWORK)
<android.net.nsd.DnsSdTxtRecord: void set(java.lang.String,java.lang.String)> (NETWORK)
<android.net.wifi.WifiNative: boolean setP2pSsidPostfix(java.lang.String)> (NETWORK)
<android.net.wifi.WifiInfo: void setSupplicantState(java.lang.String)> (NETWORK)
<android.net.wifi.WifiStateMachine$ObtainingIpState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.IConnectivityManager$Stub$Proxy: void reportInetCondition(int,int)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void addServiceRequest(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager$ActionListener)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void setDialogListener(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$DialogListener)> (NETWORK)
<android.net.InterfaceConfiguration: void writeToParcel(android.os.Parcel,int)> (NETWORK)
<android.net.wifi.p2p.WifiP2pGroup: void writeToParcel(android.os.Parcel,int)> (NETWORK)
<android.net.SSLCertificateSocketFactory: void setUseSessionTickets(java.net.Socket,boolean)> (NETWORK)
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setAutoRegistration(boolean)> (NETWORK)
<android.net.http.AndroidHttpClientConnection: void setSocketTimeout(int)> (NETWORK)
<android.net.wifi.WifiSsid$1: android.net.wifi.WifiSsid createFromParcel(android.os.Parcel)> (NETWORK)
<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)> (NETWORK)
<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)> (NETWORK)
<android.net.INetworkPolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (NETWORK)
<com.android.server.NetworkManagementService: void setFirewallUidRule(int,boolean)> (NETWORK)
<android.net.wifi.WifiManager: void disable(int,android.net.wifi.WifiManager$ActionListener)> (NETWORK)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: boolean processMessage(android.os.Message)> (NETWORK)
<com.android.server.net.NetworkStatsRecorder: void setPersistThreshold(long)> (NETWORK)
<android.net.wifi.WifiStateMachine: void setScanOnlyMode(boolean)> (NETWORK)
<android.net.wifi.WifiWatchdogStateMachine$DefaultState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.WifiConfigStore: boolean disableNetwork(int,int)> (NETWORK)
<android.net.sip.SimpleSessionDescription$Fields: void setEncryption(java.lang.String,java.lang.String)> (NETWORK)
<android.net.IThrottleManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (NETWORK)
<android.net.wifi.p2p.WifiP2pGroupList: void writeToParcel(android.os.Parcel,int)> (NETWORK)
<com.android.server.net.NetworkStatsService: void setUidForeground(int,boolean)> (NETWORK)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogEnabledState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.WifiNative: boolean setDeviceName(java.lang.String)> (NETWORK)
<com.android.server.ConnectivityService$NetworkStateTrackerHandler: void handleMessage(android.os.Message)> (NETWORK)
<com.android.server.WifiService: void setCountryCode(java.lang.String,boolean)> android.permission.WRITE_SETTINGS android.permission.CHANGE_WIFI_STATE (NETWORK)
<android.net.IConnectivityManager$Stub$Proxy: int setUsbTethering(boolean)> android.permission.ACCESS_NETWORK_STATE (NETWORK)
<com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)> (NETWORK)
<android.net.wifi.p2p.IWifiP2pManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE (NETWORK)
<android.net.sip.ISipSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (NETWORK)
<android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.WifiStateMachine$DriverStartingState: boolean processMessage(android.os.Message)> (NETWORK)
<java.net.URL: java.net.URLConnection openConnection()> android.permission.INTERNET (NETWORK)
<android.net.MobileDataStateTracker: boolean setRadio(boolean)> (NETWORK)
<android.net.wifi.p2p.WifiP2pWfdInfo: void setCoupledSinkSupportAtSink(boolean)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void discoverServices(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> (NETWORK)
<android.net.ConnectivityManager: void setDataDependency(int,boolean)> (NETWORK)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (NETWORK)
<android.net.wifi.WifiApConfigStore$DefaultState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.http.Headers: void setContentType(java.lang.String)> (NETWORK)
<android.net.NetworkPolicyManager: void setRestrictBackground(boolean)> (NETWORK)
<android.net.wifi.WifiStateMachine$SoftApStartedState: boolean processMessage(android.os.Message)> (NETWORK)
<com.android.server.NetworkManagementService: void setIpForwardingEnabled(boolean)> (NETWORK)
<android.net.SSLCertificateSocketFactory: void setHostname(java.net.Socket,java.lang.String)> (NETWORK)
<android.net.SSLCertificateSocketFactory: void setSoWriteTimeout(java.net.Socket,int)> (NETWORK)
<android.net.wifi.WifiNative: boolean setP2pGroupIdle(java.lang.String,int)> (NETWORK)
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine makeWifiWatchdogStateMachine(android.content.Context)> (NETWORK)
<android.net.wifi.WifiStateTracker: void setUserDataEnable(boolean)> (NETWORK)
<android.net.http.Headers: void setLastModified(java.lang.String)> (NETWORK)
<com.android.server.WifiService: void startScan(boolean)> (NETWORK)
<android.net.EthernetDataTracker: void setTeardownRequested(boolean)> (NETWORK)
<com.android.server.NetworkManagementService: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)> (NETWORK)
<android.net.wifi.p2p.WifiP2pDeviceList: void updateGroupCapability(java.lang.String,int)> (NETWORK)
<android.net.wifi.p2p.WifiP2pDeviceList: void writeToParcel(android.os.Parcel,int)> (NETWORK)
<android.net.IConnectivityManager$Stub$Proxy: void setGlobalProxy(android.net.ProxyProperties)> (NETWORK)
<android.net.ConnectivityManager: boolean setRadios(boolean)> (NETWORK)
<android.net.wifi.IWifiManager$Stub$Proxy: void setFrequencyBand(int,boolean)> (NETWORK)
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setPassword(java.lang.String)> (NETWORK)
<com.android.server.NetworkManagementService: void setDnsServersForInterface(java.lang.String,java.lang.String[])> (NETWORK)
<android.net.wifi.WifiStateMachine: void setDriverStart(boolean,boolean)> (NETWORK)
<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)> (NETWORK)
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void discoverPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> (NETWORK)
<android.net.rtp.AudioGroup: void add(android.net.rtp.AudioStream)> (NETWORK)
<android.net.INetworkStatsService$Stub$Proxy: void advisePersistThreshold(long)> (NETWORK)
<android.net.wifi.WifiNative: boolean setWfdDeviceInfo(java.lang.String)> (NETWORK)
<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)> (NETWORK)
<android.net.wifi.WifiConfigStore: boolean selectNetwork(int)> (NETWORK)
<com.android.server.NetworkManagementService: void setFirewallInterfaceRule(java.lang.String,boolean)> (NETWORK)
<android.net.sip.ISipSession$Stub$Proxy: void changeCall(java.lang.String,int)> (NETWORK)
<android.net.LinkCapabilities: void put(int,java.lang.String)> (NETWORK)
<android.net.LinkCapabilities$1: android.net.LinkCapabilities createFromParcel(android.os.Parcel)> (NETWORK)
<android.net.ConnectivityManager: void setNetworkPreference(int)> (NETWORK)
<com.android.server.net.NetworkIdentitySet: void writeToStream(java.io.DataOutputStream)> (NETWORK)
<android.net.BaseNetworkStateTracker: void setUserDataEnable(boolean)> (NETWORK)
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHostAddress(int,byte[])> (NETWORK)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean releaseWifiLock(android.os.IBinder)> (NETWORK)
<com.android.server.NetworkManagementService: void setDefaultInterfaceForDns(java.lang.String)> (NETWORK)
<android.net.wifi.SupplicantStateTracker$CompletedState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.http.Headers: void setAcceptRanges(java.lang.String)> (NETWORK)
<android.net.wifi.WifiManager$ServiceHandler: void handleMessage(android.os.Message)> (NETWORK)
<android.net.wifi.p2p.WifiP2pWfdInfo: void setSessionAvailable(boolean)> (NETWORK)
<android.net.wifi.WifiStateMachine: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> (NETWORK)
<android.net.wifi.WifiStateMachine$DriverLoadedState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.p2p.WifiP2pWfdInfo: boolean setDeviceType(int)> (NETWORK)
<android.net.DummyDataStateTracker: void setDependencyMet(boolean)> (NETWORK)
<android.net.wifi.ScanResult: void writeToParcel(android.os.Parcel,int)> (NETWORK)
<com.android.server.net.NetworkStatsService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.ACCESS_NETWORK_STATE (NETWORK)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean disableNetwork(int)> (NETWORK)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$UserAuthorizingJoinState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.WifiStateTracker: void setPolicyDataEnable(boolean)> (NETWORK)
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> (NETWORK)
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLong(java.io.DataOutputStream,long)> (NETWORK)
<android.net.wifi.WifiNative: boolean setPersistentReconnect(boolean)> (NETWORK)
<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies(android.net.NetworkPolicy[])> (NETWORK)
<android.net.http.RequestHandle: void setupBasicAuthResponse(boolean,java.lang.String,java.lang.String)> (NETWORK)
<com.android.server.NetworkManagementService: void startReverseTethering(java.lang.String)> (NETWORK)
<android.net.wifi.IWifiManager$Stub$Proxy: void addToBlacklist(java.lang.String)> (NETWORK)
<android.net.wifi.WifiConfiguration: void writeToParcel(android.os.Parcel,int)> (NETWORK)
<android.net.IConnectivityManager$Stub$Proxy: boolean prepareVpn(java.lang.String,java.lang.String)> (NETWORK)
<android.net.wifi.WifiStateMachine$ConnectedState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.http.RequestHandle: boolean setupRedirect(java.lang.String,int,java.util.Map)> (NETWORK)
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)> (NETWORK)
<android.net.http.Headers: void setContentEncoding(java.lang.String)> (NETWORK)
<com.android.server.NetworkManagementService: void setUidNetworkRules(int,boolean)> (NETWORK)
<android.net.wifi.WifiStateMachine$DriverStartedState: boolean processMessage(android.os.Message)> (NETWORK)
<com.android.server.NetworkManagementService: void setInterfaceUp(java.lang.String)> (NETWORK)
<android.net.wifi.WifiNative: boolean setSerialNumber(java.lang.String)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void removeServiceRequest(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager$ActionListener)> (NETWORK)
<android.net.wifi.SupplicantStateTracker$DefaultState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.EthernetDataTracker: void setDependencyMet(boolean)> (NETWORK)
<android.net.wifi.WifiStateMachine$DisconnectedState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLongArray(java.io.DataOutputStream,long[],int)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void setServiceResponseListener(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener)> (NETWORK)
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> (NETWORK)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.INetworkStatsSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (NETWORK)
<android.net.sip.SimpleSessionDescription$Media: void setBandwidth(java.lang.String,int)> (NETWORK)
<android.net.wifi.WifiWatchdogStateMachine$BssidStatistics: void updateLoss(int,double,int)> (NETWORK)
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)> (NETWORK)
<android.net.http.RequestHandle: void setupDigestAuthResponse(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (NETWORK)
<android.net.DummyDataStateTracker: void setPolicyDataEnable(boolean)> (NETWORK)
<android.net.sip.SimpleSessionDescription: void setAddress(java.lang.String)> (NETWORK)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)> android.permission.CHANGE_WIFI_STATE android.permission.CHANGE_NETWORK_STATE (NETWORK)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean enableNetwork(int,boolean)> (NETWORK)
<android.net.wifi.p2p.WifiP2pWfdInfo: void setCoupledSinkSupportAtSource(boolean)> (NETWORK)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnabledState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.WifiWatchdogStateMachine$OnlineState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void setDnsSdResponseListeners(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener,android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener)> (NETWORK)
<android.net.SSLCertificateSocketFactory: void setNpnProtocols(byte[][])> (NETWORK)
<com.android.server.WifiService: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void setDeviceName(android.net.wifi.p2p.WifiP2pManager$Channel,java.lang.String,android.net.wifi.p2p.WifiP2pManager$ActionListener)> (NETWORK)
<com.android.server.net.NetworkPolicyManagerService: void snoozeLimit(android.net.NetworkTemplate)> (NETWORK)
<android.net.wifi.WifiStateMachine$DefaultState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.WifiStateTracker: boolean setRadio(boolean)> (NETWORK)
<android.net.INetworkStatsService$Stub$Proxy: void incrementOperationCount(int,int,int)> (NETWORK)
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void requestPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PeerListListener)> (NETWORK)
<android.net.LocalSocket: void setReceiveBufferSize(int)> (NETWORK)
<android.net.nsd.NsdManager: void setEnabled(boolean)> (NETWORK)
<android.net.wifi.WifiApConfigStore$ActiveState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.http.Headers: void setProxyAuthenticate(java.lang.String)> (NETWORK)
<android.net.wifi.WifiStateMachine: boolean syncEnableNetwork(com.android.internal.util.AsyncChannel,int,boolean)> (NETWORK)
<android.net.wifi.WifiManager: void setCountryCode(java.lang.String,boolean)> (NETWORK)
<android.net.sip.ISipSession$Stub$Proxy: void register(int)> (NETWORK)
<android.net.INetworkPolicyManager$Stub$Proxy: void setUidPolicy(int,int)> (NETWORK)
<android.net.wifi.WifiStateMachine$TetheringState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)> (NETWORK)
<android.net.wifi.WifiStateMachine$TetheredState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)> (NETWORK)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean setWifiEnabled(boolean)> (NETWORK)
<android.net.wifi.WifiStateMachine: void setWifiEnabled(boolean)> (NETWORK)
<android.net.wifi.p2p.WifiP2pGroupList: void add(android.net.wifi.p2p.WifiP2pGroup)> (NETWORK)
<android.net.CaptivePortalTracker$DefaultState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.INetworkPolicyListener$Stub$Proxy: void onUidRulesChanged(int,int)> (NETWORK)
<android.net.sip.SimpleSessionDescription$Media: void setEncryption(java.lang.String,java.lang.String)> (NETWORK)
<com.android.server.net.NetworkStatsRecorder$CombiningRewriter: void write(java.io.OutputStream)> (NETWORK)
<android.net.wifi.WifiStateMachine$DisconnectingState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.TrafficStats: void setThreadStatsUid(int)> (NETWORK)
<android.net.http.AndroidHttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)> (NETWORK)
<android.net.INetworkPolicyListener$Stub$Proxy: void onMeteredIfacesChanged(java.lang.String[])> (NETWORK)
<android.net.sip.SimpleSessionDescription$Media: void setAddress(java.lang.String)> (NETWORK)
<android.net.ConnectivityManager: void setBackgroundDataSetting(boolean)> (NETWORK)
<android.net.TrafficStats: void setThreadStatsTag(int)> (NETWORK)
<android.net.DummyDataStateTracker: void setUserDataEnable(boolean)> (NETWORK)
<android.net.Uri$OpaqueUri: void writeToParcel(android.os.Parcel,int)> (NETWORK)
<com.android.server.WifiService: boolean setWifiEnabled(boolean)> (NETWORK)
<android.net.INetworkStatsService$Stub$Proxy: void setUidForeground(int,boolean)> (NETWORK)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.WifiStateMachine$DriverUnloadingState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.nsd.NsdManager: void resolveService(android.net.nsd.NsdServiceInfo,android.net.nsd.NsdManager$ResolveListener)> (NETWORK)
<android.net.nsd.NsdManager: void registerService(android.net.nsd.NsdServiceInfo,int,android.net.nsd.NsdManager$RegistrationListener)> (NETWORK)
<android.net.IConnectivityManager$Stub$Proxy: void requestNetworkTransitionWakelock(java.lang.String)> (NETWORK)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean removeNetwork(int)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void setWFDInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pWfdInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)> (NETWORK)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStateChanged(java.lang.String,boolean)> (NETWORK)
<android.net.sip.SimpleSessionDescription$Fields: void setAddress(java.lang.String)> (NETWORK)
<android.net.wifi.WifiStateMachine: boolean syncRemoveNetwork(com.android.internal.util.AsyncChannel,int)> (NETWORK)
<android.net.nsd.NsdServiceInfo: void setTxtRecord(android.net.nsd.DnsSdTxtRecord)> (NETWORK)
<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)> (NETWORK)
<android.net.wifi.WifiWatchdogStateMachine$LinkMonitoringState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.WifiNative: boolean setDeviceType(java.lang.String)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void requestGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$GroupInfoListener)> (NETWORK)
<android.net.wifi.WifiStateMachine$DriverStoppedState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.IWifiManager$Stub$Proxy: void acquireMulticastLock(android.os.IBinder,java.lang.String)> (NETWORK)
<android.net.NetworkPolicy: void writeToParcel(android.os.Parcel,int)> (NETWORK)
<android.net.wifi.WifiStateMachine: void setFrequencyBand(int,boolean)> (NETWORK)
<android.net.wifi.WifiStateMachine$SoftApStoppingState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.BaseNetworkStateTracker: void setTeardownRequested(boolean)> (NETWORK)
<android.net.wifi.WifiStateMachine: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> (NETWORK)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.ConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)> (NETWORK)
<android.net.wifi.WifiStateMachine: void sendBluetoothAdapterStateChange(int)> (NETWORK)
<android.net.sip.SimpleSessionDescription$Fields: void setAttribute(java.lang.String,java.lang.String)> (NETWORK)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$FrequencyConflictState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (NETWORK)
<android.net.http.Headers: void setContentDisposition(java.lang.String)> (NETWORK)
<android.net.wifi.WifiStateMachine: void setScanType(boolean)> (NETWORK)
<android.net.wifi.WifiNative: boolean setNetworkVariable(int,java.lang.String,java.lang.String)> (NETWORK)
<android.net.wifi.WifiNative: boolean setConfigMethods(java.lang.String)> (NETWORK)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void limitReached(java.lang.String,java.lang.String)> (NETWORK)
<android.net.NetworkStats: void dump(java.lang.String,java.io.PrintWriter)> (NETWORK)
<android.net.wifi.WifiNative: boolean setModelNumber(java.lang.String)> (NETWORK)
<android.net.wifi.WifiConfigStore: void setIpConfiguration(int,android.net.DhcpInfoInternal)> (NETWORK)
<android.net.Uri$HierarchicalUri: void writeToParcel(android.os.Parcel,int)> (NETWORK)
<android.net.wifi.WifiManager: void startWps(android.net.wifi.WpsInfo,android.net.wifi.WifiManager$WpsListener)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void removeLocalService(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)> (NETWORK)
<android.net.NetworkStatsHistory$ParcelUtils: void writeLongArray(android.os.Parcel,long[],int)> (NETWORK)
<android.net.wifi.WifiStateMachine: boolean syncDisableNetwork(com.android.internal.util.AsyncChannel,int)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void removeGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> android.permission.STOP_APP_SWITCHES (NETWORK)
<android.net.wifi.WifiManager: void connect(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager$ActionListener)> (NETWORK)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)> android.permission.CHANGE_WIFI_STATE android.permission.CHANGE_NETWORK_STATE (NETWORK)
<android.net.wifi.WifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)> (NETWORK)
<android.net.BaseNetworkStateTracker: void setPolicyDataEnable(boolean)> (NETWORK)
<android.net.INetworkStatsService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.ACCESS_NETWORK_STATE (NETWORK)
<android.net.MobileDataStateTracker: void setDependencyMet(boolean)> (NETWORK)
<android.net.wifi.WifiConfigStore: boolean enableNetworkWithoutBroadcast(int,boolean)> (NETWORK)
<android.net.http.Headers: void setLocation(java.lang.String)> (NETWORK)
<android.net.wifi.WifiNative: void setScanInterval(int)> (NETWORK)
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHost(int,int)> android.permission.CHANGE_NETWORK_STATE (NETWORK)
<android.net.sip.SimpleSessionDescription$Fields: void setBandwidth(java.lang.String,int)> (NETWORK)
<android.net.wifi.WifiStateMachine$VerifyingLinkState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.IConnectivityManager$Stub$Proxy: void setPolicyDataEnable(int,boolean)> (NETWORK)
<android.net.wifi.p2p.WifiP2pDeviceList: void updateStatus(java.lang.String,int)> (NETWORK)
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)> (NETWORK)
<android.net.sip.ISipService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (NETWORK)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.WifiStateMachine: void setCountryCode(java.lang.String,boolean)> android.permission.WRITE_SETTINGS (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void createGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> (NETWORK)
<android.net.wifi.WifiManager$WifiLock: void setWorkSource(android.os.WorkSource)> android.permission.STOP_APP_SWITCHES (NETWORK)
<android.net.sip.SimpleSessionDescription$Media: void setAttribute(java.lang.String,java.lang.String)> (NETWORK)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.SupplicantStateTracker$HandshakeState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.http.AndroidHttpClient$LoggingConfiguration: void access$600(android.net.http.AndroidHttpClient$LoggingConfiguration,java.lang.String)> (NETWORK)
<android.net.wifi.WifiManager: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void cancelConnect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> (NETWORK)
<android.net.wifi.WifiManager: void setFrequencyBand(int,boolean)> (NETWORK)
<com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)> (NETWORK)
<android.net.rtp.AudioGroup: void sendDtmf(int)> (NETWORK)
<com.android.server.WifiService: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> android.permission.CHANGE_WIFI_STATE (NETWORK)
<android.net.wifi.WifiNative: boolean setConcurrencyPriority(java.lang.String)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void connect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager$ActionListener)> (NETWORK)
<android.net.LocalSocket: void setSendBufferSize(int)> (NETWORK)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: boolean processMessage(android.os.Message)> (NETWORK)
<com.android.server.net.NetworkStatsCollection: void write(java.io.DataOutputStream)> (NETWORK)
<com.android.server.NetworkManagementService: void enableIpv6(java.lang.String)> (NETWORK)
<android.net.wifi.WifiConfigStore: boolean enableNetwork(int,boolean)> (NETWORK)
<android.net.wifi.IWifiManager$Stub$Proxy: void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)> (NETWORK)
<android.net.wifi.p2p.WifiP2pDevice: void writeToParcel(android.os.Parcel,int)> (NETWORK)
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)> (NETWORK)
<com.android.server.NetworkManagementService: void enableNat(java.lang.String,java.lang.String)> (NETWORK)
<com.android.server.NetworkManagementService: void setInterfaceThrottle(java.lang.String,int,int)> (NETWORK)
<android.net.InterfaceConfiguration: void setFlag(java.lang.String)> (NETWORK)
<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)> (NETWORK)
<com.android.server.NetworkManagementService: void setInterfaceDown(java.lang.String)> (NETWORK)
<com.android.server.NetworkManagementService: void setDnsForwarders(java.lang.String[])> (NETWORK)
<android.net.BaseNetworkStateTracker: void setDependencyMet(boolean)> (NETWORK)
<android.net.CaptivePortalTracker$ActiveNetworkState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String)> (NETWORK)
<android.net.http.Headers: void setExpires(java.lang.String)> (NETWORK)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceRemoved(java.lang.String)> (NETWORK)
<android.net.wifi.WifiNative: boolean setCountryCode(java.lang.String)> (NETWORK)
<android.net.BaseNetworkStateTracker: boolean setRadio(boolean)> (NETWORK)
<android.net.wifi.WifiApConfigStore$InactiveState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.WifiStateMachine$ConnectModeState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.DhcpStateMachine$StoppedState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])> (NETWORK)
<android.net.NetworkPolicyManager: void setUidPolicy(int,int)> (NETWORK)
<android.net.CaptivePortalTracker$NoActiveNetworkState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void addLocalService(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)> (NETWORK)
<android.net.nsd.NsdManager: void discoverServices(java.lang.String,int,android.net.nsd.NsdManager$DiscoveryListener)> (NETWORK)
<android.net.wifi.p2p.WifiP2pService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE (NETWORK)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.http.RequestQueue: void queueRequest(android.net.http.Request,boolean)> (NETWORK)
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)> android.permission.CHANGE_NETWORK_STATE (NETWORK)
<android.net.DhcpStateMachine$WaitBeforeStartState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.WifiNative: boolean setModelName(java.lang.String)> (NETWORK)
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setSendKeepAlive(boolean)> (NETWORK)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceStatusChanged(java.lang.String,boolean)> (NETWORK)
<android.net.wifi.WifiStateMachine$DriverLoadingState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.WifiNative: boolean setP2pPowerSave(java.lang.String,boolean)> (NETWORK)
<android.net.sip.SimpleSessionDescription: void setBandwidth(java.lang.String,int)> (NETWORK)
<android.net.EthernetDataTracker: boolean setRadio(boolean)> (NETWORK)
<android.net.wifi.WifiSsid: android.net.wifi.WifiSsid createFromHex(java.lang.String)> (NETWORK)
<android.net.NetworkStatsHistory: void writeToParcel(android.os.Parcel,int)> (NETWORK)
<android.net.nsd.NsdServiceInfo: void writeToParcel(android.os.Parcel,int)> (NETWORK)
<android.net.http.Headers: void setWwwAuthenticate(java.lang.String)> (NETWORK)
<android.net.wifi.WifiManager: void forget(int,android.net.wifi.WifiManager$ActionListener)> (NETWORK)
<android.net.IConnectivityManager$Stub$Proxy: void setDataDependency(int,boolean)> (NETWORK)
<android.net.wifi.WifiStateMachine$WpsRunningState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.WifiStateMachine$SupplicantStartedState: boolean processMessage(android.os.Message)> (NETWORK)
<com.android.server.NetworkManagementService: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String)> (NETWORK)
<com.android.server.net.NetworkPolicyManagerService: void setUidPolicy(int,int)> (NETWORK)
<android.net.wifi.WifiStateMachine$SoftApStartingState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.ConnectivityManager: boolean setRadio(int,boolean)> (NETWORK)
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setPort(int)> (NETWORK)
<android.net.wifi.WifiWatchdogStateMachine$ConnectedState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.WifiNative: boolean setWfdEnable(boolean)> (NETWORK)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$OngoingGroupRemovalState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setProfileName(java.lang.String)> (NETWORK)
<android.net.nsd.INsdManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (NETWORK)
<com.android.providers.settings.SettingsBackupAgent$WifiNetworkSettings: void write(java.io.Writer)> (NETWORK)
<android.net.DummyDataStateTracker: boolean setRadio(boolean)> (NETWORK)
<android.net.wifi.WifiStateMachine$CaptivePortalCheckState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.NetworkStatsHistory: void writeToStream(java.io.DataOutputStream)> (NETWORK)
<android.net.wifi.WifiNative: boolean setBand(int)> (NETWORK)
<android.net.wifi.WifiNative: void setPowerSave(boolean)> (NETWORK)
<com.android.server.NetworkManagementService: void addIdleTimer(java.lang.String,int,java.lang.String)> (NETWORK)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> (NETWORK)
<android.net.wifi.WifiConfigStore: android.net.wifi.WpsResult startWpsPbc(android.net.wifi.WpsInfo)> (NETWORK)
<android.net.wifi.p2p.WifiP2pDeviceList: void update(android.net.wifi.p2p.WifiP2pDevice)> (NETWORK)
<android.net.wifi.WifiNative: boolean setScanMode(boolean)> (NETWORK)
<android.net.wifi.p2p.WifiP2pConfig: void writeToParcel(android.os.Parcel,int)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void requestPersistentGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PersistentGroupInfoListener)> (NETWORK)
<android.net.INetworkPolicyManager$Stub$Proxy: void setRestrictBackground(boolean)> (NETWORK)
<android.net.wifi.IWifiManager$Stub$Proxy: void setCountryCode(java.lang.String,boolean)> (NETWORK)
<android.net.wifi.WifiStateTracker: void setTeardownRequested(boolean)> (NETWORK)
<com.android.server.NetworkManagementService: void setFirewallEgressSourceRule(java.lang.String,boolean)> (NETWORK)
<android.net.wifi.p2p.WifiP2pManager: void stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> (NETWORK)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceClassDataActivityChanged(java.lang.String,boolean)> (NETWORK)
<android.net.wifi.WifiConfigStore: android.net.wifi.WpsResult startWpsWithPinFromAccessPoint(android.net.wifi.WpsInfo)> (NETWORK)
<android.net.wifi.WifiStateMachine$DriverFailedState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.WifiStateMachine: void setHighPerfModeEnabled(boolean)> (NETWORK)
<android.net.wifi.WifiNative: boolean setManufacturer(java.lang.String)> (NETWORK)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatedState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.http.Headers: void setXPermittedCrossDomainPolicies(java.lang.String)> (NETWORK)
<android.net.wifi.WifiManager: void connect(int,android.net.wifi.WifiManager$ActionListener)> (NETWORK)
<com.android.server.NetworkManagementService: void setGlobalAlert(long)> (NETWORK)
<android.net.sip.SipAudioCall: void sendDtmf(int)> (NETWORK)
<com.android.server.WifiService: void setFrequencyBand(int,boolean)> (NETWORK)
<android.net.wifi.WifiStateMachine$WaitForP2pDisableState: boolean processMessage(android.os.Message)> (NETWORK)
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setAuthUserName(java.lang.String)> (NETWORK)
<android.net.wifi.WifiNative: boolean setBluetoothCoexistenceScanMode(boolean)> (NETWORK)

FILE:
<libcore.io.ForwardingOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])> (FILE)
<android.media.AudioService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.inputmethodservice.AbstractInputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.am.BatteryStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.app.ApplicationThreadProxy: void dumpDbInfo(java.io.FileDescriptor,java.lang.String[])> (FILE)
<com.android.server.am.ActiveServices: boolean dumpService(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)> (FILE)
<android.service.wallpaper.WallpaperService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<libcore.io.BlockGuardOs: java.io.FileDescriptor open(java.lang.String,int,int)> (FILE)
<java.io.RandomAccessFile: void write(byte[],int,int)> (FILE)
<android.util.LocalLog: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.NsdService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.net.LocalSocketImpl: void setFileDescriptorsForSend(java.io.FileDescriptor[])> (FILE)
<java.net.PlainSocketImpl: void bind(java.net.InetAddress,int)> (FILE)
<com.android.internal.telephony.gsm.GSMPhone: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.usb.UsbSettingsManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)> (FILE)
<com.android.internal.telephony.PhoneSubInfoProxy: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<java.util.zip.Inflater: int setFileInput(java.io.FileDescriptor,long,int)> (FILE)
<libcore.io.Posix: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)> (FILE)
<com.android.browser.BrowserBackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> (FILE)
<com.android.server.NotificationManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.usb.UsbService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.app.ContextImpl: java.io.FileInputStream openFileInput(java.lang.String)> (FILE)
<java.net.DatagramSocket: void setNetworkInterface(java.net.NetworkInterface)> (FILE)
<com.android.internal.telephony.PhoneSubInfo: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.uiautomator.core.UiDevice: void dumpWindowHierarchy(java.lang.String)> (FILE)
<android.app.ApplicationThreadProxy: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])> (FILE)
<android.app.ContextImpl: java.io.FileOutputStream openFileOutput(java.lang.String,int)> (FILE)
<com.android.server.am.ProviderMap: boolean dumpProvider(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)> (FILE)
<com.android.server.ThrottleService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<libcore.io.ForwardingOs: void setsockoptByte(java.io.FileDescriptor,int,int,int)> (FILE)
<com.android.internal.telephony.cdma.CdmaCallTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.providers.contacts.ContactsProvider2: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)> (FILE)
<libcore.io.ForwardingOs: void setsockoptInt(java.io.FileDescriptor,int,int,int)> (FILE)
<com.android.server.NetworkManagementService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)> (FILE)
<com.android.internal.telephony.RIL: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDestinationInExternalFilesDir(android.content.Context,java.lang.String,java.lang.String)> (FILE)
<libcore.io.IoBridge: void setSocketOption(java.io.FileDescriptor,int,java.lang.Object)> (FILE)
<com.android.internal.telephony.gsm.GsmDataConnection: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.pm.PackageManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])> (FILE)
<android.app.backup.BackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,java.io.File,int,long,long)> (FILE)
<com.android.server.am.ActivityManagerService: void dumpGraphicsHardwareUsage(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.systemui.screenshot.SaveImageInBackgroundTask: com.android.systemui.screenshot.SaveImageInBackgroundData doInBackground(com.android.systemui.screenshot.SaveImageInBackgroundData[])> android.permission.STOP_APP_SWITCHES (FILE)
<android.inputmethodservice.IInputMethodWrapper: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.power.PowerManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.os.storage.StorageVolume: void writeToParcel(android.os.Parcel,int)> (FILE)
<android.app.ActivityThread$ApplicationThread: void dumpDbInfo(java.io.FileDescriptor,java.lang.String[])> (FILE)
<com.android.systemui.media.RingtonePlayer: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<java.net.PlainSocketImpl: void setOption(int,java.lang.Object)> (FILE)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.AppWidgetServiceImpl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.am.ActiveServices: boolean dumpServicesLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,boolean,java.lang.String)> (FILE)
<com.android.server.am.ActivityManagerService: void dumpDbInfo(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.dreams.DreamManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.phone.TelephonyDebugService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.NativeDaemonConnector: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.am.ActivityManagerService$CpuBinder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.usb.UsbDebuggingManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)> (FILE)
<java.nio.DatagramChannelImpl: int send(java.nio.ByteBuffer,java.net.SocketAddress)> (FILE)
<com.android.server.am.ActivityManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.am.ActivityManagerService: boolean dumpBroadcastsLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String)> (FILE)
<com.android.server.BackupManagerService$PerformFullRestoreTask: boolean restoreOneFile(java.io.InputStream,byte[])> (FILE)
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)> (FILE)
<com.android.server.location.LocationFudger: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.net.NetworkStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> android.permission.ACCESS_NETWORK_STATE (FILE)
<com.android.internal.telephony.CallTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<libcore.io.IoBridge: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)> (FILE)
<android.os.Debug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int)> (FILE)
<com.android.internal.telephony.ServiceStateTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.display.DisplayManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.am.ActivityManagerService: boolean dumpActivitiesLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,boolean,java.lang.String)> (FILE)
<com.android.providers.media.MediaProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)> (FILE)
<com.android.server.LocationManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.pm.UserManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.net.LocalSocketImpl: void bind(android.net.LocalSocketAddress)> (FILE)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<libcore.io.ForwardingOs: void setsockoptTimeval(java.io.FileDescriptor,int,int,libcore.io.StructTimeval)> (FILE)
<android.view.WindowManagerGlobal: void dumpGfxInfo(java.io.FileDescriptor)> (FILE)
<com.android.server.am.ActivityManagerService$MemBinder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.systemui.power.PowerUI: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<libcore.io.BlockGuardOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])> (FILE)
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)> (FILE)
<com.android.camera.EffectsRecorder: void setOutputFile(java.io.FileDescriptor)> (FILE)
<android.app.ActivityThread$ApplicationThread: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])> (FILE)
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)> (FILE)
<android.app.ActivityThread$ApplicationThread: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])> (FILE)
<com.android.server.am.ActivityManagerService: boolean dumpProvidersLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String)> (FILE)
<libcore.io.ForwardingOs: java.io.FileDescriptor open(java.lang.String,int,int)> (FILE)
<com.android.server.TextServicesManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<java.io.RandomAccessFile: void setLength(long)> (FILE)
<android.app.DownloadManager: android.os.ParcelFileDescriptor openDownloadedFile(long)> (FILE)
<android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)> (FILE)
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,long,long,java.lang.String)> (FILE)
<java.net.PlainDatagramSocketImpl: void setOption(int,java.lang.Object)> (FILE)
<com.android.server.WifiService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.app.LoaderManagerImpl$LoaderInfo: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<libcore.io.Posix: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)> (FILE)
<com.android.server.usb.UsbDeviceManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)> (FILE)
<libcore.io.IoBridge: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)> (FILE)
<libcore.io.IoUtils: void setBlocking(java.io.FileDescriptor,boolean)> (FILE)
<android.content.ContentService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> android.permission.DUMP (FILE)
<com.android.server.DeviceStorageMonitorService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.videoeditor.service.ApiService: void onIntentProcessed(android.content.Intent,android.media.videoeditor.VideoEditor,java.lang.Object,java.lang.Object,java.lang.Exception,boolean)> (FILE)
<com.android.server.am.ActivityManagerService: boolean dumpProcessesToGc(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,boolean,java.lang.String)> (FILE)
<com.android.email.widget.WidgetManager: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.location.PassiveProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.inputmethodservice.IInputMethodWrapper: void executeMessage(android.os.Message)> (FILE)
<android.app.ApplicationThreadNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (FILE)
<com.android.server.BatteryService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.am.ActivityManagerService: boolean dumpProcessesLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String)> (FILE)
<android.service.wallpaper.WallpaperService$Engine: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.location.MockProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.DiskStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.MountService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.WallpaperManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.content.SyncManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)> (FILE)
<com.android.internal.telephony.DebugService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.AppWidgetService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> (FILE)
<com.android.email.service.AttachmentDownloadService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.inputmethodservice.InputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.internal.telephony.DataConnectionTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.wm.WindowManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<libcore.io.IoBridge: void write(java.io.FileDescriptor,byte[],int,int)> (FILE)
<android.content.ContentService: void dump(java.io.FileDescriptor,java.lang.String[])> android.permission.DUMP android.permission.BLUETOOTH android.permission.ACCESS_NETWORK_STATE android.permission.BACKUP (FILE)
<android.media.videoeditor.OverlayFrame: void generateOverlayWithRenderingMode(android.media.videoeditor.MediaItem,android.media.videoeditor.OverlayFrame,int,int)> (FILE)
<com.android.server.DevicePolicyManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.os.Debug: boolean dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])> (FILE)
<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,byte[],int,int)> (FILE)
<java.lang.SecurityManager: void checkRead(java.io.FileDescriptor)> (FILE)
<android.net.LocalSocket: void setFileDescriptorsForSend(java.io.FileDescriptor[])> (FILE)
<com.android.uiautomator.core.Tracer: void setOutputFilename(java.lang.String)> (FILE)
<com.android.internal.telephony.cdma.CdmaDataConnection: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.google.android.apps.lightcycle.util.MetadataUtils: void writeMetadataIntoJpegFile(java.lang.String,java.lang.String,java.lang.String,boolean)> (FILE)
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor)> (FILE)
<com.android.server.am.ActivityManagerService: boolean dumpOomLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean)> (FILE)
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String)> (FILE)
<com.android.server.UpdateLockService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.am.ActivityManagerService: boolean dumpProvider(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)> (FILE)
<dalvik.system.VMDebug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int)> (FILE)
<libcore.io.ForwardingOs: void setsockoptGroupReq(java.io.FileDescriptor,int,int,libcore.io.StructGroupReq)> (FILE)
<libcore.io.ForwardingOs: long sendfile(java.io.FileDescriptor,java.io.FileDescriptor,libcore.util.MutableLong,long)> (FILE)
<android.content.CursorLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.internal.telephony.DataConnection: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.email.provider.WidgetProvider$WidgetService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void dump(java.io.FileDescriptor,java.io.PrintWriter)> (FILE)
<libcore.io.Posix: int write(java.io.FileDescriptor,java.nio.ByteBuffer)> (FILE)
<android.app.ActivityThread$ApplicationThread: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])> (FILE)
<android.server.search.SearchManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.inputmethod.latin.LatinIME: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.AppWidgetServiceImpl: boolean writeStateToFileLocked(java.io.FileOutputStream)> (FILE)
<android.app.Activity: void dumpInner(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.BackupManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<java.nio.IoVec: int doTransfer(java.io.FileDescriptor)> (FILE)
<libcore.io.ForwardingOs: void setsockoptIfreq(java.io.FileDescriptor,int,int,java.lang.String)> (FILE)
<dalvik.system.VMDebug: void startMethodTracing(java.lang.String,int,int)> (FILE)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,java.lang.String)> (FILE)
<com.android.server.SamplingProfilerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<java.io.FileOutputStream: void write(byte[],int,int)> (FILE)
<android.app.DialogFragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.ConnectivityService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.CommonTimeManagementService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.TelephonyRegistry: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.launcher2.Launcher: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.DropBoxManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromData(byte[],java.lang.String)> (FILE)
<android.os.Binder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])> (FILE)
<android.app.ApplicationThreadProxy: void dumpProvider(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])> (FILE)
<android.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.CountryDetectorService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)> (FILE)
<com.android.internal.telephony.PhoneBase: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.AlarmManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<libcore.io.ForwardingOs: void bind(java.io.FileDescriptor,java.net.InetAddress,int)> (FILE)
<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.os.Debug: void dumpHprofData(java.lang.String,java.io.FileDescriptor)> (FILE)
<com.android.systemui.SystemUI: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.app.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.content.AsyncTaskLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES (FILE)
<android.net.wifi.p2p.WifiP2pService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.app.ActivityThread$ApplicationThread: void dumpProvider(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])> (FILE)
<com.android.internal.telephony.gsm.GsmCallTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.media.MediaRecorder: void setOutputFile(java.io.FileDescriptor)> (FILE)
<com.android.server.NativeDaemonConnector$ResponseQueue: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.net.LocalSocketImpl: void access$600(android.net.LocalSocketImpl,byte[],int,int,java.io.FileDescriptor)> (FILE)
<android.content.ContentService$ObserverNode: void dumpLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],java.lang.String,java.lang.String,int[],android.util.SparseIntArray)> (FILE)
<libcore.io.ForwardingOs: void setsockoptIpMreqn(java.io.FileDescriptor,int,int,int)> (FILE)
<com.android.server.am.UsageStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,byte[],int,int)> (FILE)
<libcore.io.IoBridge: void bind(java.io.FileDescriptor,java.net.InetAddress,int)> (FILE)
<android.os.SELinux: boolean restorecon(java.io.File)> (FILE)
<android.content.ContentProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.server.search.Searchables: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<libcore.io.Posix: int write(java.io.FileDescriptor,byte[],int,int)> (FILE)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)> (FILE)
<com.android.providers.downloads.DownloadService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.am.ActivityManagerService$DbBinder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<java.lang.ProcessManager: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File,boolean)> (FILE)
<android.app.ApplicationThreadProxy: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])> (FILE)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<libcore.io.ForwardingOs: void setsockoptLinger(java.io.FileDescriptor,int,int,libcore.io.StructLinger)> (FILE)
<com.android.server.UiModeManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.os.DropBoxManager: void addFile(java.lang.String,java.io.File,int)> (FILE)
<com.android.server.am.ActivityManagerService$GraphicsBinder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.view.inputmethod.InputMethodManager: void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.StatusBarManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)> (FILE)
<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)> (FILE)
<com.android.server.am.ActivityManagerService: void dumpApplicationMemoryUsage(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],boolean,java.io.PrintWriter,java.lang.StringBuilder,java.lang.StringBuilder)> (FILE)
<android.os.Binder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.usb.UsbHostManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)> (FILE)
<com.android.internal.util.StateMachine: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.soundrecorder.RemainingTimeCalculator: void setFileSizeLimit(java.io.File,long)> (FILE)
<android.net.LocalSocketImpl: void setOption(int,java.lang.Object)> (FILE)
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.io.FileDescriptor)> (FILE)
<com.android.internal.telephony.cdma.CDMALTEPhone: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.am.BroadcastQueue: boolean dumpLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String,boolean)> (FILE)
<java.net.PlainDatagramSocketImpl: void bind(int,java.net.InetAddress)> (FILE)
<android.net.LocalSocketImpl: void access$700(android.net.LocalSocketImpl,int,java.io.FileDescriptor)> (FILE)
<com.android.server.location.GpsLocationProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.systemui.statusbar.phone.NavigationBarView: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<java.net.PlainDatagramSocketImpl: void send(java.net.DatagramPacket)> (FILE)
<android.content.ContentProviderProxy: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> (FILE)
<android.app.ApplicationThreadProxy: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])> (FILE)
<android.app.ApplicationThreadProxy: android.os.Debug$MemoryInfo dumpMemInfo(java.io.FileDescriptor,boolean,boolean,java.lang.String[])> (FILE)
<com.android.server.location.LocationProviderProxy: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.net.NetworkPolicyManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.app.backup.FullBackup: void restoreFile(android.os.ParcelFileDescriptor,long,int,long,long,java.io.File)> (FILE)
<com.android.contacts.interactions.TestLoaderManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)> (FILE)
<android.accounts.AccountManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.content.ContentService$ObserverNode$ObserverEntry: void dumpLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],java.lang.String,java.lang.String,android.util.SparseIntArray)> (FILE)
<com.android.server.InputMethodManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.systemui.statusbar.policy.NetworkController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.internal.telephony.ApnContext: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.systemui.SystemUIService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<java.lang.SecurityManager: void checkWrite(java.io.FileDescriptor)> (FILE)
<android.security.SystemKeyStore: byte[] generateNewKey(int,java.lang.String,java.lang.String)> (FILE)
<android.content.pm.RegisteredServicesCache: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int)> (FILE)
<com.android.server.connectivity.Tethering: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<android.os.FileUtils: boolean copyToFile(java.io.InputStream,java.io.File)> (FILE)
<com.android.server.input.InputManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)
<com.android.server.am.ActivityManagerService: boolean dumpPendingIntentsLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,java.lang.String)> (FILE)
<com.android.server.am.ActivityManagerService: boolean dumpActivity(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)> (FILE)
<com.android.internal.telephony.cdma.CDMAPhone: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (FILE)


SMS_MMS:
<com.google.android.mms.pdu.SendReq: void setTransactionId(byte[])> (SMS_MMS)
<com.android.internal.telephony.cdma.CDMAPhone: void sendUssdResponse(java.lang.String)> (SMS_MMS)
<com.android.mms.dom.smil.SmilElementImpl: void setId(java.lang.String)> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: void setContentDisposition(byte[])> (SMS_MMS)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void setPremiumSmsPermission(java.lang.String,int)> (SMS_MMS)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE (SMS_MMS)
<com.android.mms.ui.SlideshowAttachmentView: void setVideoVisibility(boolean)> (SMS_MMS)
<com.android.mms.ui.SlideView: void setVideoRegion(int,int,int,int)> (SMS_MMS)
<com.android.internal.telephony.SmsUsageMonitor: boolean check(java.lang.String,int)> (SMS_MMS)
<com.google.android.mms.pdu.DeliveryInd: void setTo(com.google.android.mms.pdu.EncodedStringValue[])> (SMS_MMS)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (SMS_MMS)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (SMS_MMS)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatch(android.content.Intent,java.lang.String)> android.permission.WAKE_LOCK (SMS_MMS)
<com.android.mms.dom.DocumentImpl: void setDocumentURI(java.lang.String)> (SMS_MMS)
<com.google.android.mms.pdu.MultimediaMessagePdu: void setDate(long)> (SMS_MMS)
<com.android.mms.ui.MessageListItem: void setTextVisibility(boolean)> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: void setContentId(byte[])> (SMS_MMS)
<com.android.mms.ui.SlideshowAttachmentView: void setTextVisibility(boolean)> (SMS_MMS)
<com.android.providers.telephony.MmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (SMS_MMS)
<android.provider.Telephony$Sms: boolean moveMessageToFolder(android.content.Context,android.net.Uri,int,int)> (SMS_MMS)
<com.android.mms.ui.SlideListItemView: void setImageRegionFit(java.lang.String)> (SMS_MMS)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendSubmitPdu(com.android.internal.telephony.cdma.SmsMessage$SubmitPdu,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)> android.permission.WAKE_LOCK (SMS_MMS)
<com.google.android.mms.pdu.AcknowledgeInd: void setTransactionId(byte[])> (SMS_MMS)
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (SMS_MMS)
<com.google.android.mms.pdu.PduPersister: android.net.Uri persist(com.google.android.mms.pdu.GenericPdu,android.net.Uri,boolean,boolean,java.util.HashMap)> (SMS_MMS)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (SMS_MMS)
<com.android.providers.telephony.MmsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (SMS_MMS)
<com.android.mms.dom.smil.SmilRegionElementImpl: void setTop(int)> (SMS_MMS)
<com.android.mms.ui.VideoAttachmentView: void setImageVisibility(boolean)> (SMS_MMS)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS (SMS_MMS)
<com.google.android.mms.util.PduCache: boolean put(java.lang.Object,java.lang.Object)> (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: void setReadReport(int)> (SMS_MMS)
<com.google.android.mms.pdu.MultimediaMessagePdu: void setPriority(int)> (SMS_MMS)
<android.telephony.SmsManager: boolean disableCellBroadcast(int)> android.permission.RECEIVE_SMS (SMS_MMS)
<com.android.mms.transaction.SmsMessageSender: boolean sendMessage(long)> (SMS_MMS)
<com.google.android.mms.pdu.GenericPdu: void setFrom(com.google.android.mms.pdu.EncodedStringValue)> (SMS_MMS)
<com.google.android.mms.pdu.ReadRecInd: void setTo(com.google.android.mms.pdu.EncodedStringValue[])> (SMS_MMS)
<com.android.mms.ui.MessageUtils: void recordSound(android.app.Activity,int,long)> (SMS_MMS)
<com.android.mms.ui.AudioAttachmentView: void setTextVisibility(boolean)> (SMS_MMS)
<com.android.mms.ui.MessageListItem: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)> (SMS_MMS)
<com.android.mms.ui.SlideListItemView: void setVideo(java.lang.String,android.net.Uri)> (SMS_MMS)
<com.google.android.mms.pdu.NotificationInd: void setContentLocation(byte[])> (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: void setTransactionId(byte[])> (SMS_MMS)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE (SMS_MMS)
<com.google.android.mms.pdu.ReadRecInd: void setReadStatus(int)> (SMS_MMS)
<com.google.android.mms.pdu.NotifyRespInd: void setStatus(int)> (SMS_MMS)
<com.android.mms.transaction.MessagingNotification: void notifySendFailed(android.content.Context)> (SMS_MMS)
<com.android.mms.ui.ComposeMessageActivity: void startActivityForResult(android.content.Intent,int)> (SMS_MMS)
<com.android.mms.dom.smil.SmilRootLayoutElementImpl: void setBackgroundColor(java.lang.String)> (SMS_MMS)
<com.google.android.mms.pdu.SendConf: void setResponseStatus(int)> (SMS_MMS)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcast(int)> (SMS_MMS)
<com.android.mms.dom.smil.SmilRegionElementImpl: void setHeight(int)> (SMS_MMS)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcast(int)> android.permission.RECEIVE_SMS (SMS_MMS)
<com.android.mms.dom.smil.SmilMediaElementImpl: void setSrc(java.lang.String)> (SMS_MMS)
<com.google.android.mms.pdu.SendConf: void setTransactionId(byte[])> (SMS_MMS)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: void setDeliveryReport(int)> (SMS_MMS)
<com.android.mms.dom.ElementImpl: void setAttribute(java.lang.String,java.lang.String)> (SMS_MMS)
<com.google.android.mms.pdu.SendReq: void setReadReport(int)> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: void setContentLocation(byte[])> (SMS_MMS)
<com.android.mms.ui.BasicSlideEditorView: void setImage(java.lang.String,android.graphics.Bitmap)> (SMS_MMS)
<com.android.mms.data.WorkingMessage: void setHasMultipleRecipients(boolean,boolean)> (SMS_MMS)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: void setMessageClass(byte[])> (SMS_MMS)
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (SMS_MMS)
<com.android.mms.data.WorkingMessage: void setHasEmail(boolean,boolean)> (SMS_MMS)
<com.android.mms.dom.smil.SmilRegionElementImpl: void setBackgroundColor(java.lang.String)> (SMS_MMS)
<com.google.android.mms.pdu.PduParser: void parseContentTypeParams(java.io.ByteArrayInputStream,java.util.HashMap,java.lang.Integer)> (SMS_MMS)
<com.android.mms.util.SimpleCache: java.lang.Object put(java.lang.Object,java.lang.Object)> (SMS_MMS)
<com.android.mms.ui.SlideListItemView: void setText(java.lang.String,java.lang.String)> (SMS_MMS)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(long,byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE (SMS_MMS)
<com.android.mms.ui.BasicSlideEditorView: void setVideo(java.lang.String,android.net.Uri)> (SMS_MMS)
<com.android.internal.telephony.SMSDispatcher: void dispatchPdus(byte[][])> (SMS_MMS)
<com.android.mms.transaction.MmsMessageSender: void sendReadRec(android.content.Context,java.lang.String,java.lang.String,int)> (SMS_MMS)
<com.google.android.mms.pdu.PduHeaders: void setEncodedStringValue(com.google.android.mms.pdu.EncodedStringValue,int)> (SMS_MMS)
<com.android.mms.ui.SlideListItemView: void setAudio(android.net.Uri,java.lang.String,java.util.Map)> (SMS_MMS)
<com.android.mms.ui.SlideView: void setImageRegionFit(java.lang.String)> (SMS_MMS)
<com.google.android.mms.pdu.NotificationInd: void setContentClass(int)> (SMS_MMS)
<com.android.mms.data.WorkingMessage: void setLengthRequiresMms(boolean,boolean)> (SMS_MMS)
<com.google.android.mms.pdu.DeliveryInd: void setMessageId(byte[])> (SMS_MMS)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (SMS_MMS)
<com.android.mms.data.Conversation: void setDraftState(boolean)> (SMS_MMS)
<com.android.mms.ui.ConversationListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (SMS_MMS)
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> (SMS_MMS)
<com.google.android.mms.pdu.ReadOrigInd: void setReadStatus(int)> (SMS_MMS)
<com.android.mms.dom.AttrImpl: void setNodeValue(java.lang.String)> (SMS_MMS)
<com.android.mms.dom.ElementImpl: void setIdAttribute(java.lang.String,boolean)> (SMS_MMS)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> android.permission.READ_SMS android.permission.SEND_SMS android.permission.WRITE_SMS android.permission.RECEIVE_SMS android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK (SMS_MMS)
<com.android.mms.util.SendingProgressTokenManager: void put(java.lang.Object,long)> (SMS_MMS)
<com.google.android.mms.pdu.ReadOrigInd: void setDate(long)> (SMS_MMS)
<com.google.android.mms.pdu.NotifyRespInd: void setTransactionId(byte[])> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: void setContentType(byte[])> (SMS_MMS)
<com.google.android.mms.pdu.SendReq: void setDeliveryReport(int)> (SMS_MMS)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(int,int,byte[])> (SMS_MMS)
<com.google.android.mms.util.PduCache: boolean put(android.net.Uri,com.google.android.mms.util.PduCacheEntry)> (SMS_MMS)
<com.google.android.mms.pdu.PduHeaders: void setOctet(int,int)> (SMS_MMS)
<com.android.mms.ui.MessageUtils: void selectAudio(android.app.Activity,int)> (SMS_MMS)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (SMS_MMS)
<com.android.mms.ui.BasicSlideEditorView: void setAudio(android.net.Uri,java.lang.String,java.util.Map)> (SMS_MMS)
<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String)> android.permission.WAKE_LOCK (SMS_MMS)
<com.android.mms.ui.MessageListItem: void setVideoVisibility(boolean)> (SMS_MMS)
<com.android.mms.dom.smil.SmilRegionElementImpl: void setFit(java.lang.String)> (SMS_MMS)
<com.android.mms.ui.SlideshowAttachmentView: void setImageVisibility(boolean)> (SMS_MMS)
<com.android.mms.ui.SlideListItemView: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)> (SMS_MMS)
<com.android.mms.dom.DocumentImpl: void setStrictErrorChecking(boolean)> (SMS_MMS)
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> (SMS_MMS)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE (SMS_MMS)
<com.android.mms.ui.AudioAttachmentView: void setImage(java.lang.String,android.graphics.Bitmap)> (SMS_MMS)
<com.android.mms.ui.SlideView: void setImage(java.lang.String,android.graphics.Bitmap)> (SMS_MMS)
<com.android.mms.util.BackgroundLoaderManager: boolean addCallback(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> (SMS_MMS)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (SMS_MMS)
<com.android.mms.ui.NoConfirmationSendService: void onHandleIntent(android.content.Intent)> (SMS_MMS)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (SMS_MMS)
<com.google.android.mms.pdu.PduPersister: void updateParts(android.net.Uri,com.google.android.mms.pdu.PduBody,java.util.HashMap)> (SMS_MMS)
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.GenericPdu load(android.net.Uri)> (SMS_MMS)
<com.android.mms.ui.AudioAttachmentView: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)> (SMS_MMS)
<com.google.android.mms.pdu.PduComposer: void arraycopy(byte[],int,int)> (SMS_MMS)
<com.android.mms.transaction.MmsMessageSender: boolean sendMessage(long)> (SMS_MMS)
<com.android.mms.dom.smil.SmilParElementImpl: void setDur(float)> (SMS_MMS)
<com.android.providers.telephony.SmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> android.permission.READ_SMS android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (SMS_MMS)
<com.android.mms.dom.smil.SmilMediaElementImpl: void setDur(float)> (SMS_MMS)
<com.android.mms.ui.MessageListItem: void setVideo(java.lang.String,android.net.Uri)> (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: void setMessageId(byte[])> (SMS_MMS)
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE (SMS_MMS)
<com.google.android.mms.pdu.PduHeaders: void setLongInteger(long,int)> (SMS_MMS)
<com.android.mms.dom.smil.ElementTimeImpl: void setDur(float)> (SMS_MMS)
<com.android.mms.dom.DocumentImpl: void setXmlVersion(java.lang.String)> (SMS_MMS)
<com.android.mms.ui.SlideView: void setTextRegion(int,int,int,int)> (SMS_MMS)
<com.android.internal.telephony.SmsHeader: byte[] toByteArray(com.android.internal.telephony.SmsHeader)> (SMS_MMS)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcast(int)> (SMS_MMS)
<com.android.mms.ui.MessageListItem: void setText(java.lang.String,java.lang.String)> (SMS_MMS)
<com.android.internal.telephony.SMSDispatcher: void dispatchPortAddressedPdus(byte[][],int)> (SMS_MMS)
<com.android.mms.dom.smil.SmilRegionElementImpl: void setWidth(int)> (SMS_MMS)
<com.google.android.mms.pdu.PduHeaders: void setTextString(byte[],int)> (SMS_MMS)
<com.google.android.mms.pdu.ReadOrigInd: void setFrom(com.google.android.mms.pdu.EncodedStringValue)> (SMS_MMS)
<com.android.mms.util.Recycler$SmsRecycler: void setMessageLimit(android.content.Context,int)> (SMS_MMS)
<com.google.android.mms.pdu.NotifyRespInd: void setReportAllowed(int)> (SMS_MMS)
<com.android.mms.ui.VideoAttachmentView: void setImage(java.lang.String,android.graphics.Bitmap)> (SMS_MMS)
<com.android.mms.dom.NodeImpl: java.lang.Object setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)> (SMS_MMS)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (SMS_MMS)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (SMS_MMS)
<com.android.mms.ui.SlideshowAttachmentView: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)> (SMS_MMS)
<com.android.mms.transaction.SmsSingleRecipientSender: boolean sendMessage(long)> (SMS_MMS)
<com.android.mms.ui.BasicSlideEditorView: void setText(java.lang.String,java.lang.String)> (SMS_MMS)
<android.telephony.SmsManager: boolean enableCellBroadcastRange(int,int)> (SMS_MMS)
<com.google.android.mms.pdu.PduHeaders: void appendEncodedStringValue(com.google.android.mms.pdu.EncodedStringValue,int)> (SMS_MMS)
<android.telephony.SmsCbMessage: void writeToParcel(android.os.Parcel,int)> (SMS_MMS)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS (SMS_MMS)
<com.android.mms.data.RecipientIdCache: void updateNumbers(long,com.android.mms.data.ContactList)> (SMS_MMS)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)> android.permission.WAKE_LOCK (SMS_MMS)
<com.android.mms.ui.AudioAttachmentView: void setImageRegionFit(java.lang.String)> (SMS_MMS)
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])> (SMS_MMS)
<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])> android.permission.SEND_SMS android.permission.RECEIVE_SMS android.permission.WAKE_LOCK (SMS_MMS)
<com.android.mms.dom.smil.SmilRootLayoutElementImpl: void setWidth(int)> (SMS_MMS)
<com.google.android.mms.pdu.EncodedStringValue: void setTextString(byte[])> (SMS_MMS)
<com.android.internal.telephony.SMSDispatcher: void setPremiumSmsPermission(java.lang.String,int)> (SMS_MMS)
<com.android.mms.data.Conversation: void startDeleteAll(com.android.mms.data.Conversation$ConversationQueryHandler,int,boolean)> (SMS_MMS)
<com.android.mms.ui.SlideView: void setVideo(java.lang.String,android.net.Uri)> (SMS_MMS)
<com.android.mms.ui.BasicSlideEditorView: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)> (SMS_MMS)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(int,byte[],byte[])> (SMS_MMS)
<com.android.mms.ui.MessageListItem: void setImageRegionFit(java.lang.String)> (SMS_MMS)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcast(int)> (SMS_MMS)
<com.android.mms.dom.smil.SmilRegionElementImpl: void setLeft(int)> (SMS_MMS)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (SMS_MMS)
<com.android.mms.data.Conversation: void startDelete(com.android.mms.data.Conversation$ConversationQueryHandler,int,boolean,java.util.Collection)> (SMS_MMS)
<com.android.mms.ui.SlideView: void setTextVisibility(boolean)> (SMS_MMS)
<com.android.mms.ui.MessagingPreferenceActivity: void enableNotifications(boolean,android.content.Context)> (SMS_MMS)
<com.google.android.mms.pdu.DeliveryInd: void setStatus(int)> (SMS_MMS)
<com.android.mms.ui.SlideshowAttachmentView: void setImageRegionFit(java.lang.String)> (SMS_MMS)
<com.google.android.mms.pdu.SendConf: void setMessageId(byte[])> (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: void setContentType(byte[])> (SMS_MMS)
<com.android.mms.dom.ElementImpl: void setIdAttributeNS(java.lang.String,java.lang.String,boolean)> (SMS_MMS)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> android.permission.READ_SMS android.permission.SEND_SMS android.permission.WRITE_SMS android.permission.RECEIVE_SMS android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK (SMS_MMS)
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (SMS_MMS)
<com.android.mms.ui.VideoAttachmentView: void setVideoVisibility(boolean)> (SMS_MMS)
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (SMS_MMS)
<com.android.mms.ui.SlideView: void setImageVisibility(boolean)> (SMS_MMS)
<com.android.mms.ui.SlideListItemView: void setTextVisibility(boolean)> (SMS_MMS)
<com.android.internal.telephony.SMSDispatcher: void dispatchBroadcastMessage(android.telephony.SmsCbMessage)> (SMS_MMS)
<com.android.internal.telephony.WapPushOverSms: int dispatchWapPdu(byte[])> (SMS_MMS)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatch(android.content.Intent,java.lang.String,android.content.BroadcastReceiver)> android.permission.WAKE_LOCK (SMS_MMS)
<com.android.mms.dom.NodeImpl: void setNodeValue(java.lang.String)> (SMS_MMS)
<com.android.providers.telephony.MmsSmsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (SMS_MMS)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(long,byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE (SMS_MMS)
<com.google.android.mms.pdu.SendReq: void setMessageSize(long)> (SMS_MMS)
<com.android.mms.ui.AudioAttachmentView: void setVideoVisibility(boolean)> (SMS_MMS)
<com.android.mms.ui.SlideView: void setImageRegion(int,int,int,int)> (SMS_MMS)
<com.google.android.mms.pdu.EncodedStringValue: void appendTextString(byte[])> (SMS_MMS)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(long,byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE (SMS_MMS)
<com.google.android.mms.pdu.SendReq: void setExpiry(long)> (SMS_MMS)
<com.google.android.mms.pdu.PduBody: void addPart(int,com.google.android.mms.pdu.PduPart)> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: void setName(byte[])> (SMS_MMS)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcast(int)> (SMS_MMS)
<com.android.mms.util.Recycler$MmsRecycler: void setMessageLimit(android.content.Context,int)> (SMS_MMS)
<com.android.internal.telephony.ISms$Stub$Proxy: void setPremiumSmsPermission(java.lang.String,int)> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: void setCharset(int)> (SMS_MMS)
<com.google.android.mms.pdu.QuotedPrintable: byte[] decodeQuotedPrintable(byte[])> (SMS_MMS)
<com.android.mms.dom.ElementImpl: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)> (SMS_MMS)
<com.android.mms.util.DownloadManager: void markState(android.net.Uri,int)> (SMS_MMS)
<com.google.android.mms.pdu.AcknowledgeInd: void setReportAllowed(int)> (SMS_MMS)
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)> (SMS_MMS)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE (SMS_MMS)
<com.android.mms.ui.AudioAttachmentView: void setText(java.lang.String,java.lang.String)> (SMS_MMS)
<com.google.android.mms.pdu.SendReq: void setBcc(com.google.android.mms.pdu.EncodedStringValue[])> (SMS_MMS)
<com.android.mms.ui.MessageListItem: void setImageVisibility(boolean)> (SMS_MMS)
<com.android.mms.ui.BasicSlideEditorView: void setImageRegionFit(java.lang.String)> (SMS_MMS)
<com.android.mms.ui.BasicSlideEditorView: void setVideoVisibility(boolean)> (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: void setRetrieveStatus(int)> (SMS_MMS)
<com.android.mms.ui.BasicSlideEditorView: void setTextVisibility(boolean)> (SMS_MMS)
<com.android.mms.transaction.MessagingNotification: void notifyDownloadFailed(android.content.Context,long)> (SMS_MMS)
<com.google.android.mms.pdu.GenericPdu: void setMmsVersion(int)> (SMS_MMS)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateAllNotifications(android.content.Context,long)> (SMS_MMS)
<com.android.mms.ui.VideoAttachmentView: void setTextVisibility(boolean)> (SMS_MMS)
<com.android.mms.data.WorkingMessage: void send(java.lang.String)> (SMS_MMS)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (SMS_MMS)
<com.android.mms.transaction.MessageStatusReceiver: void onReceive(android.content.Context,android.content.Intent)> (SMS_MMS)
<com.android.mms.ui.SlideshowAttachmentView: void setText(java.lang.String,java.lang.String)> (SMS_MMS)
<com.android.mms.ui.AudioAttachmentView: void setImageVisibility(boolean)> (SMS_MMS)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (SMS_MMS)
<com.android.mms.ui.VideoAttachmentView: void setImageRegionFit(java.lang.String)> (SMS_MMS)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)> (SMS_MMS)
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> android.permission.SEND_SMS (SMS_MMS)
<com.google.android.mms.pdu.NotificationInd: void setDeliveryReport(int)> (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: void setFrom(com.google.android.mms.pdu.EncodedStringValue)> (SMS_MMS)
<com.android.mms.ui.SlideListItemView: void setImage(java.lang.String,android.graphics.Bitmap)> (SMS_MMS)
<android.telephony.SmsManager: boolean disableCellBroadcastRange(int,int)> (SMS_MMS)
<com.google.android.mms.pdu.NotificationInd: void setExpiry(long)> (SMS_MMS)
<com.android.mms.model.SlideModel: com.android.mms.model.MediaModel set(int,com.android.mms.model.MediaModel)> (SMS_MMS)
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[])> (SMS_MMS)
<com.google.android.mms.pdu.NotificationInd: void setSubject(com.google.android.mms.pdu.EncodedStringValue)> (SMS_MMS)
<com.android.mms.dom.smil.ElementParallelTimeContainerImpl: void setEndSync(java.lang.String)> (SMS_MMS)
<com.android.mms.ui.SlideView: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)> (SMS_MMS)
<com.android.mms.ui.VideoAttachmentView: void setVideoThumbnail(java.lang.String,android.graphics.Bitmap)> (SMS_MMS)
<com.android.mms.ui.ComposeMessageActivity$43: boolean setViewValue(android.view.View,java.lang.Object,java.lang.String)> (SMS_MMS)
<com.android.mms.ui.SlideView: void enableMMSConformanceMode(int,int,int,int)> (SMS_MMS)
<com.android.mms.data.Conversation: void startQuery(android.content.AsyncQueryHandler,int,java.lang.String)> (SMS_MMS)
<com.android.mms.util.NullItemLoadedFuture: void setIsDone(boolean)> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: void setFilename(byte[])> (SMS_MMS)
<com.google.android.mms.pdu.NotificationInd: void setTransactionId(byte[])> (SMS_MMS)
<com.android.mms.dom.NodeImpl: void setTextContent(java.lang.String)> (SMS_MMS)
<com.android.mms.ui.MessageListItem: void setAudio(android.net.Uri,java.lang.String,java.util.Map)> (SMS_MMS)
<com.android.internal.telephony.SMSDispatcher: void handleSendComplete(android.os.AsyncResult)> (SMS_MMS)
<com.google.android.mms.pdu.MultimediaMessagePdu: void setSubject(com.google.android.mms.pdu.EncodedStringValue)> (SMS_MMS)
<com.android.mms.transaction.MessagingNotification: void notifySendFailed(android.content.Context,boolean)> (SMS_MMS)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatch(android.content.Intent,java.lang.String)> android.permission.WAKE_LOCK (SMS_MMS)
<com.android.mms.ui.ConversationList: android.content.Intent createAddContactIntent(java.lang.String)> (SMS_MMS)
<com.android.mms.transaction.PushReceiver$ReceivePushTask: java.lang.Void doInBackground(android.content.Intent[])> (SMS_MMS)
<com.android.mms.dom.smil.SmilRootLayoutElementImpl: void setHeight(int)> (SMS_MMS)
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> android.permission.READ_SMS android.permission.SEND_SMS android.permission.WRITE_SMS android.permission.RECEIVE_SMS android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK (SMS_MMS)
<com.android.internal.telephony.SMSDispatcher: void sendMultipartText(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (SMS_MMS)
<com.android.mms.ui.BasicSlideEditorView: void setImageVisibility(boolean)> (SMS_MMS)
<com.android.mms.dom.smil.SmilRegionElementImpl: void setId(java.lang.String)> (SMS_MMS)
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (SMS_MMS)
<com.android.providers.telephony.SmsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (SMS_MMS)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (SMS_MMS)
<com.android.mms.ui.SlideView: void setAudio(android.net.Uri,java.lang.String,java.util.Map)> (SMS_MMS)
<com.android.mms.ui.SlideListItemView: void setImageVisibility(boolean)> (SMS_MMS)
<com.android.mms.dom.NodeImpl: void setPrefix(java.lang.String)> (SMS_MMS)
<com.google.android.mms.pdu.NotificationInd: void setMessageSize(long)> (SMS_MMS)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcastRange(int,int)> android.permission.RECEIVE_SMS android.permission.WAKE_LOCK (SMS_MMS)
<com.android.mms.model.SlideshowModel: java.lang.Object set(int,java.lang.Object)> (SMS_MMS)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)> (SMS_MMS)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcastRange(int,int)> (SMS_MMS)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (SMS_MMS)
<com.google.android.mms.pdu.PduComposer: void append(int)> (SMS_MMS)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (SMS_MMS)
<com.google.android.mms.pdu.SendReq: void setContentType(byte[])> (SMS_MMS)
<com.google.android.mms.pdu.PduBody: boolean addPart(com.google.android.mms.pdu.PduPart)> (SMS_MMS)
<com.google.android.mms.pdu.NotificationInd: void setMessageClass(byte[])> (SMS_MMS)
<com.android.mms.dom.smil.SmilDocumentImpl: void setDur(float)> (SMS_MMS)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcastRange(int,int)> (SMS_MMS)
<com.google.android.mms.pdu.ReadOrigInd: void setTo(com.google.android.mms.pdu.EncodedStringValue[])> (SMS_MMS)
<com.android.mms.ui.SlideView: void setVideoVisibility(boolean)> (SMS_MMS)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)> android.permission.READ_SMS android.permission.SEND_SMS android.permission.WRITE_SMS android.permission.RECEIVE_SMS android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK (SMS_MMS)
<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String,android.content.BroadcastReceiver)> android.permission.WAKE_LOCK (SMS_MMS)
<com.google.android.mms.pdu.SendReq: void setCc(com.google.android.mms.pdu.EncodedStringValue[])> (SMS_MMS)
<com.android.internal.telephony.SmsUsageMonitor: void setPremiumSmsPermission(java.lang.String,int)> (SMS_MMS)
<com.google.android.mms.pdu.SendReq: void setTo(com.google.android.mms.pdu.EncodedStringValue[])> (SMS_MMS)
<com.android.internal.telephony.IccSmsInterfaceManager: void setPremiumSmsPermission(java.lang.String,int)> (SMS_MMS)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS (SMS_MMS)
<com.android.mms.ui.ComposeMessageActivity: void onSaveInstanceState(android.os.Bundle)> (SMS_MMS)
<com.google.android.mms.util.AbstractCache: boolean put(java.lang.Object,java.lang.Object)> (SMS_MMS)
<com.google.android.mms.pdu.ReadRecInd: void setMessageId(byte[])> (SMS_MMS)
<com.android.mms.model.SlideshowModel: java.util.HashMap openPartFiles(android.content.ContentResolver)> (SMS_MMS)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (SMS_MMS)
<com.google.android.mms.pdu.ReadRecInd: void setDate(long)> (SMS_MMS)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatch(android.content.Intent,java.lang.String,android.content.BroadcastReceiver)> android.permission.WAKE_LOCK (SMS_MMS)
<com.android.mms.model.SlideModel: java.lang.Object set(int,java.lang.Object)> (SMS_MMS)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)> (SMS_MMS)
<com.android.mms.ui.ConversationListItem: void setChecked(boolean)> (SMS_MMS)
<com.android.internal.telephony.SMSDispatcher: void sendRawPdu(byte[],byte[],android.app.PendingIntent,android.app.PendingIntent,java.lang.String)> (SMS_MMS)
<com.google.android.mms.pdu.SendReq: void setMessageClass(byte[])> (SMS_MMS)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (SMS_MMS)
<com.google.android.mms.pdu.PduPersister: void updateHeaders(android.net.Uri,com.google.android.mms.pdu.SendReq)> android.permission.READ_SMS (SMS_MMS)
<com.android.mms.ui.ConversationList$4: boolean onQueryTextSubmit(java.lang.String)> (SMS_MMS)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (SMS_MMS)
<com.google.android.mms.pdu.PduPersister: android.net.Uri persistPart(com.google.android.mms.pdu.PduPart,long,java.util.HashMap)> (SMS_MMS)
<com.android.mms.ui.SlideView: void setText(java.lang.String,java.lang.String)> (SMS_MMS)
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)> android.permission.SEND_SMS android.permission.RECEIVE_SMS android.permission.WAKE_LOCK (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: void setRetrieveText(com.google.android.mms.pdu.EncodedStringValue)> (SMS_MMS)
<com.google.android.mms.pdu.ReadOrigInd: void setMessageId(byte[])> (SMS_MMS)
<com.android.mms.dom.DocumentImpl: void setXmlStandalone(boolean)> (SMS_MMS)
<com.google.android.mms.pdu.PduPersister: android.net.Uri move(android.net.Uri,android.net.Uri)> (SMS_MMS)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE (SMS_MMS)
<com.android.mms.ui.SlideshowAttachmentView: void setImage(java.lang.String,android.graphics.Bitmap)> (SMS_MMS)
<android.telephony.SmsManager: boolean enableCellBroadcast(int)> (SMS_MMS)
<com.android.mms.ui.SlideListItemView: void setVideoVisibility(boolean)> (SMS_MMS)
<com.android.mms.ui.VideoAttachmentView: void setText(java.lang.String,java.lang.String)> (SMS_MMS)
<com.android.mms.transaction.RetryScheduler: void setRetryAlarm(android.content.Context)> (SMS_MMS)
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideModel set(int,com.android.mms.model.SlideModel)> (SMS_MMS)
<com.google.android.mms.pdu.NotificationInd: void setFrom(com.google.android.mms.pdu.EncodedStringValue)> (SMS_MMS)
<com.android.mms.ui.VideoAttachmentView: void setVideo(java.lang.String,android.net.Uri)> (SMS_MMS)
<com.android.mms.ui.SlideshowAttachmentView: void setVideo(java.lang.String,android.net.Uri)> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: void setData(byte[])> (SMS_MMS)
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[],java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE (SMS_MMS)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(int,int,byte[])> (SMS_MMS)
<com.android.mms.ui.MessageListItem: void setImage(java.lang.String,android.graphics.Bitmap)> (SMS_MMS)
<com.google.android.mms.pdu.DeliveryInd: void setDate(long)> (SMS_MMS)
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[])> (SMS_MMS)
<com.android.mms.util.ImageCacheService: void putImageData(java.lang.String,int,byte[])> (SMS_MMS)
<com.google.android.mms.pdu.GenericPdu: void setMessageType(int)> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: void setContentTransferEncoding(byte[])> (SMS_MMS)
<com.google.android.mms.pdu.PduHeaders: void setEncodedStringValues(com.google.android.mms.pdu.EncodedStringValue[],int)> (SMS_MMS)

CONTACT_INFORMATION:
<com.android.contacts.ContactSaveService: android.content.Intent createSaveContactIntent(android.content.Context,com.android.contacts.model.RawContactDeltaList,java.lang.String,int,boolean,java.lang.Class,java.lang.String,long,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountWithDataSet: void writeToParcel(android.os.Parcel,int)> (CONTACT_INFORMATION)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSearchMode(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListAdapter: void setDefaultFilterHeaderText(int)> (CONTACT_INFORMATION)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: void startPhotoActivity(android.content.Intent,int,java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.LegacyApiSupport: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (CONTACT_INFORMATION)
<com.android.contacts.activities.ContactEditorAccountsChangedActivity: void onActivityResult(int,int,android.content.Intent)> (CONTACT_INFORMATION)
<com.android.providers.contacts.DataRowHandlerForCommonDataKind: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.interactions.ImportExportDialogFragment: void show(android.app.FragmentManager,boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.util.ContactMatcher: void updateScoreWithNicknameMatch(long)> (CONTACT_INFORMATION)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.ContactSaveService: android.content.Intent createGroupDeletionIntent(android.content.Context,long)> (CONTACT_INFORMATION)
<com.android.contacts.calllog.CallLogListItemHelper: void setPhoneCallDetails(com.android.contacts.calllog.CallLogListItemViews,com.android.contacts.PhoneCallDetails,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailTabCarousel: void restoreCurrentTab(int)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter)> (CONTACT_INFORMATION)
<com.android.providers.contacts.DataRowHandlerForPhoneNumber: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.ContactAggregator: void updatePhotoId(android.database.sqlite.SQLiteDatabase,long)> (CONTACT_INFORMATION)
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: void newContact(java.lang.String)> (CONTACT_INFORMATION)
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailStatusTable: android.os.ParcelFileDescriptor openFile(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String)> (CONTACT_INFORMATION)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.editor.LabeledEditorView: void setEnabled(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.widget.PinnedHeaderListView: void setHeaderInvisible(int,boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.ContactAggregator: void updateHasPhoneNumber(android.database.sqlite.SQLiteDatabase,long)> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setVolumeControlStream(int)> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorFragment: boolean save(int)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.util.ContactMatcher: void updateScoreWithPhoneNumberMatch(long)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.ContactAggregator: void updateDisplayNameForRawContact(android.database.sqlite.SQLiteDatabase,long)> (CONTACT_INFORMATION)
<com.android.contacts.editor.SelectAccountDialogFragment: void show(android.app.FragmentManager,android.app.Fragment,int,com.android.contacts.util.AccountsListAdapter$AccountListFilter,android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListFilterView: void setActivated(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.calllog.CallLogAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,int,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.editor.TextFieldsEditorView: void setValues(com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.RawContactDelta$ValuesDelta,com.android.contacts.model.RawContactDelta,boolean,com.android.contacts.editor.ViewIdGenerator)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListPinnedHeaderView: void setCountView(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.util.AccountFilterUtil: boolean updateAccountFilterTitleForPhone(android.view.View,com.android.contacts.list.ContactListFilter,boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.ContactAggregator: void markForAggregation(long,int,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void sendFetchVoicemailRequest(android.net.Uri)> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackFragment$TextViewWithMessagesController: void setPermanentText(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setSuperPrimary(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.editor.PhoneticNameEditorView: void setValues(com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.RawContactDelta$ValuesDelta,com.android.contacts.model.RawContactDelta,boolean,com.android.contacts.editor.ViewIdGenerator)> (CONTACT_INFORMATION)
<com.android.contacts.editor.KindSectionView: void setEnabled(boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactDirectoryManager: void onPackageChanged(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactBrowseListFragment: void restoreSavedState(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: void copyLongValue(android.content.ContentValues,java.lang.String,android.content.ContentValues,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.editor.TextFieldsEditorView$SavedState: void writeToParcel(android.os.Parcel,int)> (CONTACT_INFORMATION)
<com.android.contacts.preference.ContactsPreferences: void setSortOrder(int)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListAdapter: void setPinnedSectionTitle(android.view.View,java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: long insertStatusUpdate(android.content.ContentValues)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (CONTACT_INFORMATION)
<com.android.providers.contacts.DefaultCallLogInsertionHelper: void addComputedValues(android.content.ContentValues)> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorFragment: void setIntentExtras(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupEditorFragment: void loadMemberToAddToGroup(long,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.activities.PeopleActivity$ContactDetailFragmentListener: void onItemClicked(android.content.Intent)> (CONTACT_INFORMATION)
<com.android.contacts.PhoneCallDetailsHelper: void setCallDetailsHeader(android.widget.TextView,com.android.contacts.PhoneCallDetails)> (CONTACT_INFORMATION)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.activities.DialtactsActivity$ViewPagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> (CONTACT_INFORMATION)
<com.android.contacts.util.AccountPromptUtils: void launchAccountPrompt(android.app.Activity)> (CONTACT_INFORMATION)
<com.android.contacts.list.PhoneNumberListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: void copyStringFrom(com.android.contacts.model.RawContactDelta$ValuesDelta,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.interactions.PhoneNumberInteraction: void onLoadComplete(android.content.Loader,android.database.Cursor)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: void updateContactVisible(com.android.providers.contacts.TransactionContext,long)> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.StructuredNameDataItem: void setPhoneticFamilyName(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.ContactPhotoManagerImpl: void cacheBitmap(android.net.Uri,android.graphics.Bitmap,byte[])> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailContentProvider: android.os.ParcelFileDescriptor openDataFile(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setPositionSeekListener(android.widget.SeekBar$OnSeekBarChangeListener)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactBrowseListFragment: void setSearchMode(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay: void setShouldSync(com.android.contacts.list.CustomContactListFilterActivity$GroupDelta,boolean,boolean)> (CONTACT_INFORMATION)
<android.widget.QuickContactBadge: void setMode(int)> (CONTACT_INFORMATION)
<com.android.email.activity.MessageViewFragmentBase$ContactStatusLoaderCallbacks: android.os.Bundle createArguments(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactModifier: void migrateStructuredName(android.content.Context,com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind)> (CONTACT_INFORMATION)
<gov.nist.javax.sip.header.Contact: void setQValue(float)> (CONTACT_INFORMATION)
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> (CONTACT_INFORMATION)
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.ContactAggregator: void updateLookupKeyForRawContact(android.database.sqlite.SQLiteDatabase,long)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.list.ContactListFilter,boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ProfileAwareUriMatcher: void addURI(java.lang.String,java.lang.String,int)> (CONTACT_INFORMATION)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (CONTACT_INFORMATION)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: void setIsPrimary(long,long,long)> (CONTACT_INFORMATION)
<android.provider.Contacts$People: void setPhotoData(android.content.ContentResolver,android.net.Uri,byte[])> (CONTACT_INFORMATION)
<com.android.contacts.ContactSaveService: android.content.Intent createNewRawContactIntent(android.content.Context,java.util.ArrayList,com.android.contacts.model.account.AccountWithDataSet,java.lang.Class,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.widget.PinnedHeaderListView: void setFadingHeader(int,int,boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: void replaceStatusUpdate(java.lang.Long,long,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer)> (CONTACT_INFORMATION)
<com.android.contacts.list.LegacyContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (CONTACT_INFORMATION)
<com.android.providers.contacts.PhotoStore: long insert(com.android.providers.contacts.PhotoProcessor,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.editor.LabeledEditorView: void saveValue(java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.ContactSaveService: android.content.Intent createJoinContactsIntent(android.content.Context,long,long,boolean,java.lang.Class,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.dialpad.DialpadImageButton: void setPressed(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupDetailFragment: void setQuickContact(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContact: void setAccount(com.android.contacts.model.account.AccountWithDataSet)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailDisplayUtils: void setDisplayName(android.content.Context,com.android.contacts.model.Contact,android.widget.TextView)> (CONTACT_INFORMATION)
<com.android.providers.contacts.DbModifierWithNotification: long insert(android.content.ContentValues)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.ContactAggregator: void markNewForAggregation(long,int)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.ContactAggregator: void updateAggregateData(com.android.providers.contacts.TransactionContext,long)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactModifier: void migrateGenericWithTypeColumn(com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind)> (CONTACT_INFORMATION)
<com.android.contacts.activities.ContactSelectionActivity: void startActivityAndForwardResult(android.content.Intent)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: void insertNameLookup(long,long,int,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactModifier: void parseExtras(android.content.Context,com.android.contacts.model.account.AccountType,com.android.contacts.model.RawContactDelta,android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListItemView: void setSectionHeader(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.editor.LabeledEditorView: void onFieldChanged(java.lang.String,java.lang.String)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.GET_ACCOUNTS android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.StructuredNameDataItem: void setPhoneticGivenName(java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.DataRowHandlerForStructuredName: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.interactions.GroupDeletionDialogFragment: void show(android.app.FragmentManager,long,java.lang.String,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setClipPosition(int,int)> (CONTACT_INFORMATION)
<com.android.contacts.util.AccountSelectionUtil: void doImportFromSdCard(android.content.Context,com.android.contacts.model.account.AccountWithDataSet)> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setRateDisplay(float,int)> (CONTACT_INFORMATION)
<gov.nist.javax.sip.header.Contact: void setSipInstanceParam(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.format.PrefixHighlighter: void setText(android.widget.TextView,java.lang.String,char[])> (CONTACT_INFORMATION)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.DataItem: void setRawContactId(long)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: void notifyChange(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.editor.EventFieldEditorView: void setValues(com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.RawContactDelta$ValuesDelta,com.android.contacts.model.RawContactDelta,boolean,com.android.contacts.editor.ViewIdGenerator)> android.permission.STOP_APP_SWITCHES (CONTACT_INFORMATION)
<com.android.providers.contacts.DataRowHandlerForGroupMembership: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: void updateRawContactDisplayName(android.database.sqlite.SQLiteDatabase,long)> (CONTACT_INFORMATION)
<com.android.contacts.list.JoinContactListFragment: void restoreSavedState(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setPhoneticMiddleName(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListItemView: void setData(char[],int)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues)> (CONTACT_INFORMATION)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK (CONTACT_INFORMATION)
<com.android.contacts.widget.FrameLayoutWithOverlay: void setAlphaLayer(android.view.View)> (CONTACT_INFORMATION)
<com.android.providers.contacts.DataRowHandlerForPhoneNumber: long insert(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,long,android.content.ContentValues)> (CONTACT_INFORMATION)
<com.android.contacts.interactions.GroupCreationDialogFragment: void onCompleted(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.activities.ConfirmAddDetailActivity$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.ProfileAggregator: void aggregateContact(com.android.providers.contacts.TransactionContext,android.database.sqlite.SQLiteDatabase,long)> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailStatusTable: int update(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues,java.lang.String,java.lang.String[])> (CONTACT_INFORMATION)
<com.android.contacts.list.JoinContactListFragment: void setQueryString(java.lang.String,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.list.CustomContactListFilterActivity: boolean onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long)> (CONTACT_INFORMATION)
<gov.nist.javax.sip.header.Contact: void setExpires(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setPhoneticGivenName(java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.FastScrollingIndexCache: android.os.Bundle buildExtraBundle(java.lang.String[],int[])> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListPinnedHeaderView: void setSectionHeader(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.editor.PhotoEditorView: void setSuperPrimary(boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: boolean updateContactVisible(com.android.providers.contacts.TransactionContext,long,boolean)> (CONTACT_INFORMATION)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK (CONTACT_INFORMATION)
<com.android.contacts.util.AccountSelectionUtil: void doImportFromSim(android.content.Context,com.android.contacts.model.account.AccountWithDataSet)> (CONTACT_INFORMATION)
<com.android.providers.contacts.DataRowHandlerForPhoto: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setStartStopListener(android.view.View$OnClickListener)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactModifier: void migrateEvent(com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,java.lang.Integer)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListItemView: void setPresence(android.graphics.drawable.Drawable)> (CONTACT_INFORMATION)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter)> (CONTACT_INFORMATION)
<com.android.contacts.dialpad.DialpadFragment$ErrorDialogFragment: com.android.contacts.dialpad.DialpadFragment$ErrorDialogFragment newInstance(int,int)> (CONTACT_INFORMATION)
<com.android.contacts.SpecialCharSequenceMgr: boolean handleAdnEntry(android.content.Context,java.lang.String,android.widget.EditText)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: void insertStatusUpdate(java.lang.Long,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer)> (CONTACT_INFORMATION)
<com.android.contacts.test.InjectedServices: void setSystemService(java.lang.String,java.lang.Object)> (CONTACT_INFORMATION)
<com.android.contacts.util.AccountFilterUtil: void startAccountFilterActivityForResult(android.app.Activity,int,com.android.contacts.list.ContactListFilter)> (CONTACT_INFORMATION)
<com.android.contacts.editor.KindSectionView: void setTitleVisible(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.ContactSaveService: android.content.Intent createNewGroupIntent(android.content.Context,com.android.contacts.model.account.AccountWithDataSet,java.lang.String,long[],java.lang.Class,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.list.PhoneNumberPickerFragment: void setSearchMode(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.util.ImageViewDrawableSetter: void setupContactPhoto(com.android.contacts.model.Contact,android.widget.ImageView)> (CONTACT_INFORMATION)
<com.android.contacts.activities.PeopleActivity$ContactDetailFragmentListener: void onCreateRawContactRequested(java.util.ArrayList,com.android.contacts.model.account.AccountWithDataSet)> (CONTACT_INFORMATION)
<com.android.contacts.socialwidget.SocialWidgetSettings: void setContactUri(android.content.Context,int,android.net.Uri)> (CONTACT_INFORMATION)
<com.android.contacts.activities.DialtactsActivity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.DataRowHandlerForIdentity: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.calllog.CallLogAdapter: void bindStandAloneView(android.view.View,android.content.Context,android.database.Cursor)> (CONTACT_INFORMATION)
<com.android.providers.contacts.NameSplitter$Name: void toValues(android.content.ContentValues)> (CONTACT_INFORMATION)
<com.android.contacts.list.DefaultContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (CONTACT_INFORMATION)
<com.android.contacts.editor.GroupMembershipView: void setEnabled(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.editor.EventFieldEditorView: void setEnabled(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.widget.FrameLayoutWithOverlay: void setOverlayClickable(boolean)> (CONTACT_INFORMATION)
<gov.nist.javax.sip.header.Contact: void setWildCardFlag(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupEditorFragment$Member: void writeToParcel(android.os.Parcel,int)> (CONTACT_INFORMATION)
<com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile: void parseEf(com.android.internal.telephony.gsm.SimTlv,java.util.Map,int)> (CONTACT_INFORMATION)
<gov.nist.javax.sip.header.Contact: void setTempGruuParam(java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailContentTable: android.net.Uri insert(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues)> com.android.voicemail.permission.ADD_VOICEMAIL (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: void setIsSuperPrimary(long,long,long)> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.StructuredNameDataItem: void setPhoneticMiddleName(java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: boolean updateContactVisibleOnlyIfChanged(com.android.providers.contacts.TransactionContext,long)> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorUtils: void saveDefaultAndAllAccounts(com.android.contacts.model.account.AccountWithDataSet)> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorFragment: void setData(com.android.contacts.model.Contact)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactPickerFragment: void restoreSavedState(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailContentTable: android.os.ParcelFileDescriptor openFile(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: void putNull(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.util.AccountFilterUtil: boolean updateAccountFilterTitleForPeople(android.view.View,com.android.contacts.list.ContactListFilter,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.interactions.PhoneNumberInteraction$PhoneDisambiguationDialogFragment: void show(android.app.FragmentManager,java.util.ArrayList,com.android.contacts.interactions.PhoneNumberInteraction$InteractionType,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.editor.PhotoEditorView: void setDeletable(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorFragment: void setAggregationSuggestionViewEnabled(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay: void setShouldSync(com.android.contacts.list.CustomContactListFilterActivity$GroupDelta,boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.DbModifierWithNotification: long insert(java.lang.String,java.lang.String,android.content.ContentValues)> (CONTACT_INFORMATION)
<com.android.contacts.activities.ContactEditorActivity$2: void onEditOtherContactRequested(android.net.Uri,java.util.ArrayList)> (CONTACT_INFORMATION)
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: boolean isWritableAccountWithDataSet(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.editor.LabeledEditorView: void setDeleteButtonVisible(boolean)> (CONTACT_INFORMATION)
<gov.nist.javax.sip.header.Contact: void setParameter(java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setPhoneticFamilyName(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.ContactSaveService: android.content.Intent createGroupUpdateIntent(android.content.Context,long,java.lang.String,long[],long[],java.lang.Class,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListItemView: void setPhoneticName(char[],int)> (CONTACT_INFORMATION)
<com.android.contacts.editor.EventFieldEditorView: void onFieldChanged(java.lang.String,java.lang.String)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.GET_ACCOUNTS android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsTransaction: void startTransactionForDb(android.database.sqlite.SQLiteDatabase,java.lang.String,android.database.sqlite.SQLiteTransactionListener)> (CONTACT_INFORMATION)
<gov.nist.javax.sip.header.Contact: void setPubGruuParam(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.activities.ContactEditorActivity$2: void onCustomEditContactActivityRequested(com.android.contacts.model.account.AccountWithDataSet,android.net.Uri,android.os.Bundle,boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.TransactionContext: void rawContactInserted(long,long)> (CONTACT_INFORMATION)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.util.NameConverter: android.content.ContentValues displayNameToStructuredName(android.content.Context,java.lang.String,android.content.ContentValues)> (CONTACT_INFORMATION)
<com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask: void onPostExecute(com.android.contacts.PhoneCallDetails[])> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.FloatingChildLayout: void setBackground(android.graphics.drawable.Drawable)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.ContactAggregator: void updateStarred(long)> (CONTACT_INFORMATION)
<com.android.providers.contacts.DataRowHandlerForStructuredPostal: boolean update(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,android.content.ContentValues,android.database.Cursor,boolean)> (CONTACT_INFORMATION)
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.util.ContactMatcher: void updateScoreWithEmailMatch(long)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.util.ContactMatcher: void matchName(long,int,java.lang.String,int,java.lang.String,int)> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.ActionMultiMap: void put(java.lang.String,com.android.contacts.quickcontact.Action,boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: void copyStringValue(android.content.ContentValues,java.lang.String,android.content.ContentValues,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.AccountTypeManagerImpl: void processBroadcastIntent(android.content.Intent)> (CONTACT_INFORMATION)
<com.android.exchange.provider.ExchangeDirectoryProvider$GalContactRow: void addNameRow(android.database.MatrixCursor,com.android.exchange.provider.ExchangeDirectoryProvider$GalProjection,long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.preference.ContactsPreferences: void setDisplayOrder(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setGroupRowId(long)> (CONTACT_INFORMATION)
<com.android.contacts.activities.PeopleActivity$TabPagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> (CONTACT_INFORMATION)
<com.android.contacts.activities.ContactEditorActivity$2: void onCustomCreateContactActivityRequested(com.android.contacts.model.account.AccountWithDataSet,android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: void writeToParcel(android.os.Parcel,int)> (CONTACT_INFORMATION)
<com.android.contacts.widget.TransitionAnimationView: void setMaskVisibility(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.ContactSaveService: android.content.Intent createSetSuperPrimaryIntent(android.content.Context,long)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailDisplayUtils: void setCompanyName(android.content.Context,com.android.contacts.model.Contact,android.widget.TextView)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: void setLocale(com.android.providers.contacts.ContactsProvider2,java.util.Locale)> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setSpeakerphoneListener(android.view.View$OnClickListener)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.ContactAggregator: int markAllVisibleForAggregation(android.database.sqlite.SQLiteDatabase)> (CONTACT_INFORMATION)
<com.android.contacts.calllog.CallLogAdapter: void injectContactInfoForTest(java.lang.String,java.lang.String,com.android.contacts.calllog.ContactInfo)> (CONTACT_INFORMATION)
<com.android.contacts.ContactSaveService: android.content.Intent createSetRingtone(android.content.Context,android.net.Uri,java.lang.String)> (CONTACT_INFORMATION)
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int,com.android.internal.telephony.UUSInfo)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: void put(java.lang.String,byte[])> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setIsBuffering()> (CONTACT_INFORMATION)
<com.android.contacts.ContactSaveService: android.content.Intent createClearPrimaryIntent(android.content.Context,long)> (CONTACT_INFORMATION)
<com.android.contacts.widget.FrameLayoutWithOverlay: void setAlphaLayerValue(float)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.ContactAggregator$MatchCandidateList: void add(java.lang.String,int)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setDisplayName(java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.ContactAggregator: long onRawContactInsert(com.android.providers.contacts.TransactionContext,android.database.sqlite.SQLiteDatabase,long)> (CONTACT_INFORMATION)
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.util.ExpirableCache: void put(java.lang.Object,java.lang.Object)> (CONTACT_INFORMATION)
<com.android.contacts.list.JoinContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (CONTACT_INFORMATION)
<com.android.contacts.widget.AlphaTouchInterceptorOverlay: void setOverlayClickable(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setRateIncreaseButtonListener(android.view.View$OnClickListener)> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupBrowseListFragment: void setAddAccountsVisibility(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactModifier: void migratePostal(com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind)> (CONTACT_INFORMATION)
<com.android.exchange.provider.ExchangeDirectoryProvider$GalContactRow: void addEmailAddress(android.database.MatrixCursor,com.android.exchange.provider.ExchangeDirectoryProvider$GalProjection,long,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListItemView: void setSnippet(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.editor.TextFieldsEditorView: void setEnabled(boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.ContactAggregator: void setContactId(long,long)> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setSpeakerPhoneOn(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListFragment: void onCreate(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.providers.contacts.DataRowHandlerForGroupMembership: long insert(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,long,android.content.ContentValues)> (CONTACT_INFORMATION)
<com.android.exchange.provider.ExchangeDirectoryProvider$GalContactRow: void addPhoneRow(android.database.MatrixCursor,com.android.exchange.provider.ExchangeDirectoryProvider$GalProjection,long,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)> (CONTACT_INFORMATION)
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setFetchContentTimeout()> (CONTACT_INFORMATION)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListFragment: void loadDirectoryPartition(int,com.android.contacts.list.DirectoryPartition)> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.StructuredNameDataItem: void setDisplayName(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: com.android.contacts.model.dataitem.DataKind addKind(com.android.contacts.model.dataitem.DataKind)> (CONTACT_INFORMATION)
<com.android.contacts.datepicker.DatePicker$SavedState: void writeToParcel(android.os.Parcel,int)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.RawContactDelta$ValuesDelta insertChild(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.account.AccountType$EditType)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDeltaList: void writeToParcel(android.os.Parcel,int)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)> (CONTACT_INFORMATION)
<com.android.contacts.PhoneCallDetailsHelper: void setPhoneCallDetails(com.android.contacts.PhoneCallDetailsViews,com.android.contacts.PhoneCallDetails,boolean)> (CONTACT_INFORMATION)
<com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile: void parseTag(com.android.internal.telephony.gsm.SimTlv,int)> (CONTACT_INFORMATION)
<com.android.contacts.editor.StructuredNameEditorView: void setValues(com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.RawContactDelta$ValuesDelta,com.android.contacts.model.RawContactDelta,boolean,com.android.contacts.editor.ViewIdGenerator)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.ContactAggregator: void updateDisplayNameForContact(android.database.sqlite.SQLiteDatabase,long)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: void put(java.lang.String,long)> (CONTACT_INFORMATION)
<com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay: void setShouldSync(boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (CONTACT_INFORMATION)
<com.android.contacts.editor.PhotoEditorView: void setPhotoBitmap(android.graphics.Bitmap)> (CONTACT_INFORMATION)
<com.android.providers.contacts.DbModifierWithNotification: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> (CONTACT_INFORMATION)
<com.android.contacts.util.AccountFilterUtil: void startAccountFilterActivityForResult(android.app.Fragment,int,com.android.contacts.list.ContactListFilter)> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: void startPhotoActivity(android.content.Intent,int,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.editor.TextFieldsEditorView: void onFieldChanged(java.lang.String,java.lang.String)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.GET_ACCOUNTS android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (CONTACT_INFORMATION)
<com.android.contacts.editor.PhotoEditorView: void setEnabled(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.editor.PhoneticNameEditorView$PhoneticValuesDelta: void put(java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.RawContactDelta$ValuesDelta parseExtras(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,android.os.Bundle,java.lang.String,java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: void put(java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailContentProvider: void checkAndAddSourcePackageIntoValues(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues)> (CONTACT_INFORMATION)
<com.android.contacts.list.PostalAddressListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: void setPhoto(byte[])> (CONTACT_INFORMATION)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)> (CONTACT_INFORMATION)
<com.android.contacts.editor.RawContactReadOnlyEditorView: void setState(com.android.contacts.model.RawContactDelta,com.android.contacts.model.account.AccountType,com.android.contacts.editor.ViewIdGenerator,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.util.NameConverter: java.util.Map displayNameToStructuredName(android.content.Context,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactTileView: void setHorizontalDividerVisibility(int)> (CONTACT_INFORMATION)
<com.android.contacts.datepicker.DatePicker: void setEnabled(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.list.LegacyPostalAddressListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.FloatingChildLayout: void setBackgroundColorAlpha(int)> (CONTACT_INFORMATION)
<com.android.contacts.interactions.GroupCreationDialogFragment: void show(android.app.FragmentManager,java.lang.String,java.lang.String,java.lang.String,com.android.contacts.interactions.GroupCreationDialogFragment$OnGroupCreatedListener)> (CONTACT_INFORMATION)
<com.android.providers.contacts.DataRowHandlerForPhoto: long insert(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,long,android.content.ContentValues)> (CONTACT_INFORMATION)
<com.android.contacts.editor.RawContactEditorView: void setEnabled(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.editor.StructuredNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailContentTable: int update(com.android.providers.contacts.VoicemailContentProvider$UriData,android.content.ContentValues,java.lang.String,java.lang.String[])> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.PhoneDataItem: void computeFormattedPhoneNumber(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.list.PhoneNumberPickerFragment: void restoreSavedState(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: void put(java.lang.String,int)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactsSectionIndexer: void setProfileHeader(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.calllog.CallLogAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor)> (CONTACT_INFORMATION)
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)> (CONTACT_INFORMATION)
<com.android.exchange.provider.ExchangeDirectoryProvider$GalContactRow: void put(java.lang.String,java.lang.Object)> (CONTACT_INFORMATION)
<com.android.contacts.detail.CarouselTab: void setLabel(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailDisplayUtils: void setSocialSnippet(android.content.Context,com.android.contacts.model.Contact,android.widget.TextView,android.widget.ImageView)> (CONTACT_INFORMATION)
<com.android.contacts.ContactSaveService: void onHandleIntent(android.content.Intent)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta: void writeToParcel(android.os.Parcel,int)> (CONTACT_INFORMATION)
<android.provider.ContactsContract$QuickContact: android.content.Intent composeQuickContactsIntent(android.content.Context,android.graphics.Rect,android.net.Uri,int,java.lang.String[])> (CONTACT_INFORMATION)
<com.android.contacts.list.AccountFilterActivity: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactTileListFragment: void enableQuickContact(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ActionsViewContainer: void setPosition(int)> (CONTACT_INFORMATION)
<com.android.contacts.editor.BaseRawContactEditorView: void setPhotoBitmap(android.graphics.Bitmap)> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (CONTACT_INFORMATION)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.WAKE_LOCK (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackFragment$TextViewWithMessagesController: void setTemporaryText(java.lang.String,long,java.util.concurrent.TimeUnit)> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setRateDecreaseButtonListener(android.view.View$OnClickListener)> (CONTACT_INFORMATION)
<com.android.contacts.util.DialogManager: void showDialogInView(android.view.View,android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.PhoneCallDetailsHelper: void setCurrentTimeForTest(long)> (CONTACT_INFORMATION)
<com.android.contacts.list.EmailAddressListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (CONTACT_INFORMATION)
<com.android.contacts.editor.RawContactEditorView: void setPhotoBitmap(android.graphics.Bitmap)> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactLocaleUtils: void setLocale(java.util.Locale)> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: void setIsFetchingContent()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: void setProperty(java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.DataItem: void setMimeType(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.ContactSaveService: android.content.Intent createSaveContactIntent(android.content.Context,com.android.contacts.model.RawContactDeltaList,java.lang.String,int,boolean,java.lang.Class,java.lang.String,android.os.Bundle)> (CONTACT_INFORMATION)

CALENDAR_INFORMATION:
<com.android.calendar.month.MonthWeekEventsView: void setWeekParams(java.util.HashMap,java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarEventModel: void addAttendees(java.lang.String,com.android.common.Rfc822Validator)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarEventModel: void addAttendee(com.android.calendar.CalendarEventModel$Attendee)> (CALENDAR_INFORMATION)
<com.android.calendar.EventGeometry: void setHourHeight(float)> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: android.content.Intent createEmailAttendeesIntent(android.content.res.Resources,java.lang.String,java.lang.String,java.util.List,java.util.List,java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.alerts.DismissAlarmsService: void onHandleIntent(android.content.Intent)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarUtils: void setSharedPreference(android.content.SharedPreferences,java.lang.String,java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.month.MonthByWeekAdapter: void setSelectedDay(android.text.format.Time)> (CALENDAR_INFORMATION)
<com.android.calendar.DayView: void setMoreAllDayEventsTextAlpha(int)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarController: void sendEventRelatedEvent(java.lang.Object,long,long,long,long,int,int,long)> (CALENDAR_INFORMATION)
<com.android.calendar.alerts.AlertReceiver: void onReceive(android.content.Context,android.content.Intent)> (CALENDAR_INFORMATION)
<com.android.calendar.EventLoader: void loadEventsInBackground(int,java.util.ArrayList,int,java.lang.Runnable,java.lang.Runnable)> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: void setTodayIcon(android.graphics.drawable.LayerDrawable,android.content.Context,java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaByDayAdapter: void setAsFirstDayAfterYesterday(int)> (CALENDAR_INFORMATION)
<com.android.calendar.ExpandableTextView: void setText(java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (CALENDAR_INFORMATION)
<com.android.calendar.DayOfMonthDrawable: void setAlpha(int)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarController: void setTime(long)> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: void setSharedPreference(android.content.Context,java.lang.String,java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarController: void sendEventRelatedEventWithExtra(java.lang.Object,long,long,long,long,int,int,long,long)> (CALENDAR_INFORMATION)
<com.android.calendar.event.AttendeesView: void setEnabled(boolean)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarController: void launchViewEvent(long,long,long,int)> (CALENDAR_INFORMATION)
<com.android.calendar.DayOfMonthDrawable: void setColorFilter(android.graphics.ColorFilter)> (CALENDAR_INFORMATION)
<com.android.calendar.alerts.SnoozeAlarmsService: void onHandleIntent(android.content.Intent)> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter$AsyncCalendarsUpdater: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (CALENDAR_INFORMATION)
<com.android.calendar.event.AttendeesView: void onClick(android.view.View)> (CALENDAR_INFORMATION)
<com.android.calendar.AllInOneActivity: void setControlsOffset(int)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: void setSharedPreference(android.content.Context,java.lang.String,java.lang.String[])> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: void setSharedPreference(android.content.Context,java.lang.String,boolean)> android.permission.STOP_APP_SWITCHES (CALENDAR_INFORMATION)
<com.android.calendar.Utils: void setDefaultView(android.content.Context,int)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarUtils: void setSharedPreference(android.content.SharedPreferences,java.lang.String,boolean)> (CALENDAR_INFORMATION)
<com.android.calendar.alerts.AlertUtils: void setAlertFiredInSharedPrefs(android.content.Context,long,long,long)> (CALENDAR_INFORMATION)
<com.android.calendar.alerts.AlertAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (CALENDAR_INFORMATION)
<com.android.calendar.event.EditEventHelper: boolean saveRemindersWithBackRef(java.util.ArrayList,int,java.util.ArrayList,java.util.ArrayList,boolean)> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor,boolean)> (CALENDAR_INFORMATION)
<com.android.calendar.DayOfMonthDrawable: void setDayOfMonth(int)> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: void setSharedPreference(android.content.Context,java.lang.String,int)> (CALENDAR_INFORMATION)
<com.android.calendar.alerts.AlertUtils$1: void set(int,long,android.app.PendingIntent)> (CALENDAR_INFORMATION)
<com.android.calendar.event.EditEventHelper: boolean saveReminders(java.util.ArrayList,long,java.util.ArrayList,java.util.ArrayList,boolean)> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: void onClick(android.view.View)> (CALENDAR_INFORMATION)
<com.android.calendar.GeneralPreferences: void setDefaultValues(android.content.Context)> (CALENDAR_INFORMATION)
<com.android.calendar.widget.CalendarAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: void setVisible(int,int)> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void toggleVisibility(int)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaListView: void setSelectedInstanceId(long)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaWindowAdapter: void refresh(android.text.format.Time,long,java.lang.String,boolean,boolean)> (CALENDAR_INFORMATION)
<com.android.calendar.month.SimpleDayPickerFragment: void setMonthDisplayed(android.text.format.Time,boolean)> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: void setUpSearchView(android.widget.SearchView,android.app.Activity)> (CALENDAR_INFORMATION)
<com.android.calendar.DayView: void setSelected(android.text.format.Time,boolean,boolean)> (CALENDAR_INFORMATION)
<com.android.calendar.alerts.AlertUtils: android.content.Intent buildEventViewIntent(android.content.Context,long,long,long)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaWindowAdapter: void setSelectedView(android.view.View)> (CALENDAR_INFORMATION)
<com.android.calendar.AllInOneActivity: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (CALENDAR_INFORMATION)
<com.android.calendar.alerts.AlertService: boolean generateAlerts(android.content.Context,com.android.calendar.alerts.NotificationMgr,com.android.calendar.alerts.AlarmManagerInterface,android.content.SharedPreferences,android.database.Cursor,long,int)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaListView: void setHideDeclinedEvents(boolean)> (CALENDAR_INFORMATION)
<com.android.calendar.month.MonthWeekEventsView: void setClickedDay(float)> (CALENDAR_INFORMATION)
<com.android.calendar.alerts.AlertService$NotificationMgrWrapper: void notify(int,com.android.calendar.alerts.AlertService$NotificationWrapper)> (CALENDAR_INFORMATION)
<com.android.calendar.AllInOneActivity: boolean onQueryTextSubmit(java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.event.EditEventHelper: boolean saveEvent(com.android.calendar.CalendarEventModel,com.android.calendar.CalendarEventModel,int)> (CALENDAR_INFORMATION)
<com.android.calendar.month.MonthByWeekFragment: void setMonthDisplayed(android.text.format.Time,boolean)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (CALENDAR_INFORMATION)
<com.android.calendar.alerts.AlertUtils: android.content.ContentValues makeContentValues(long,long,long,long,int)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarUtils$TimeZoneUtils: void setTimeZone(android.content.Context,java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.SearchActivity: boolean onQueryTextSubmit(java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (CALENDAR_INFORMATION)
<com.android.calendar.widget.CalendarAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> android.permission.READ_CALENDAR (CALENDAR_INFORMATION)
<com.android.calendar.month.SimpleWeeksAdapter: void setSelectedDay(android.text.format.Time)> (CALENDAR_INFORMATION)
<com.android.calendar.alerts.AlertService: int processQuery(android.database.Cursor,android.content.Context,long,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaListView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: void setTimeZone(android.content.Context,java.lang.String)> (CALENDAR_INFORMATION)

SYSTEM_SETTINGS:
<com.android.internal.telephony.PhoneProxy: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.ModelInterpreter: void print(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setCdmaBroadcastActivation(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cat.Menu: void writeToParcel(android.os.Parcel,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.CallManager: void setMute(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: int processMessage(java.lang.String,java.lang.String,android.content.Intent)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IccFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.am.ActivityManagerService: boolean sendPendingBroadcastsLocked(com.android.server.am.ProcessRecord)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephony$Stub$Proxy: void call(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void writeSmsToRuim(int,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.ModelInterpreter: void setNextCallFailCause(int)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void setSystemProperty(java.lang.String,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setPreferredNetworkType(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ApnContext: void setDependencyMet(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setCellBroadcastSmsConfig(int[],android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: boolean processMessage(android.os.Message)> (SYSTEM_SETTINGS)
<android.webkit.DeviceMotionAndOrientationManager: void setUseMock()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceState(android.telephony.ServiceState)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void cancelPendingUssd(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void notifyServiceStateChangedP(android.telephony.ServiceState)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setCdmaSubscriptionSource(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.DevicePolicyManagerService$ActiveAdmin,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ims.IsimUiccRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void handleCallSetupRequestFromSim(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: void setRadioPower(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setCallWaiting(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.UiccCardApplication: void supplyPuk2(java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumSymbols(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean handlePinMmi(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void disableDnsCheck(boolean)> (SYSTEM_SETTINGS)
<com.android.server.DeviceStorageMonitorService$CacheFileDeletedObserver: void onEvent(int,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void setMute(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastConfig(int[],android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setSmscAddress(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean addPackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.server.am.ActivityManagerService: void dispatchUserSwitch(com.android.server.am.UserStartedState,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallState(int,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setBandMode(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.am.ActivityManagerService: void signalPersistentProcesses(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.RuimRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.UiccCardApplication: void supplyPuk(java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: void sendUssdResponse(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setRadioPower(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.CallManager$1: void handleMessage(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void setMaximumTimeToLock(android.content.ComponentName,long,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaRoamingPreference(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLowerCase(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void setEchoSuppressionEnabled(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setOutgoingCallerIdDisplay(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void resetRadio(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IccCardStatus: void setCardState(int)> (SYSTEM_SETTINGS)
<com.android.deskclock.HandleSetAlarm: void onCreate(android.os.Bundle)> android.permission.WRITE_SETTINGS (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephony$Stub$Proxy: int disableApnType(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setRadioPower(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setMute(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DataConnectionAc: void reqAddApnContext(com.android.internal.telephony.ApnContext)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.UiccCardApplication: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.CallManager: boolean sendUssdResponse(com.android.internal.telephony.Phone,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<android.app.ActivityThread$ApplicationThread: void scheduleConfigurationChanged(android.content.res.Configuration)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setPreferredNetworkType(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean setRadio(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPin(java.lang.String)> android.permission.MODIFY_PHONE_STATE android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setNetworkSelectionModeAutomatic(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: void setCallWaiting(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void deactivateDataCall(int,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean deletePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DataCallState: com.android.internal.telephony.DataCallState$SetupResult setLinkProperties(android.net.LinkProperties,boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void setDataOnRoamingEnabled(boolean)> android.permission.WRITE_SETTINGS (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallForwardingChanged(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DataConnectionTracker: void putRecoveryAction(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void handleMessage(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IntRangeManager: boolean enableRange(int,int,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.server.AlarmManagerService: void setTimeZone(java.lang.String)> android.permission.SET_TIME_ZONE (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,com.android.internal.telephony.UUSInfo,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DataConnectionAc: void reqRemomveApnContext(com.android.internal.telephony.ApnContext)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: int enableApnType(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.CallManager: void setAudioMode()> (SYSTEM_SETTINGS)
<com.android.server.usb.UsbDeviceManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: void restoreSavedNetworkSelection(android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void reportFailedPasswordAttempt(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.UiccCardApplication: void supplyPin2(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void sendTerminalResponse(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setMaximumTimeToLock(android.content.ComponentName,long,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setAutoProgressConnectingCall(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ApnContext: void setApnSetting(com.android.internal.telephony.ApnSetting)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setCdmaRoamingPreference(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cat.RilMessageDecoder: void sendMsgParamsDecoded(com.android.internal.telephony.cat.ResultCode,com.android.internal.telephony.cat.CommandParams)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setLocationUpdates(boolean,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastActivation(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyOtaspChanged(com.android.internal.telephony.Phone,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DataConnection$DcActiveState: boolean processMessage(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordHistoryLength(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setGsmBroadcastActivation(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.BaseCommands: void setOnCatEvent(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.am.ActivityRecord,boolean,boolean)> (SYSTEM_SETTINGS)
<android.app.FragmentManagerImpl: void dispatchConfigurationChanged(android.content.res.Configuration)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataActivity(com.android.internal.telephony.Phone)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setVoiceMessageWaiting(int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void sendUSSD(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCallForwardingChanged(com.android.internal.telephony.Phone)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.ModelInterpreter: void sendUnsolicited(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: boolean handlePinMmi(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setCLIR(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.am.ActivityManagerService: boolean switchUser(int)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int setStorageEncryption(android.content.ComponentName,boolean,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IccFileHandler: void handleMessage(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setState(com.android.internal.telephony.DctConstants$State)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> android.permission.BROADCAST_STICKY (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipConnectionBase: void setState(com.android.internal.telephony.Call$State)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void hangupForegroundResumeBackground(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DataConnectionTracker: boolean setInternalDataEnabled(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void explicitCallTransfer(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyPhoneState(com.android.internal.telephony.Phone)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void setPasswordQuality(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNonLetter(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void sendCdmaSms(byte[],android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMALTEPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setMute(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.usb.UsbDeviceManager: void setMassStorageBackingFile(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.server.AttributeCache: void updateConfiguration(android.content.res.Configuration)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(java.lang.String,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void restoreSavedNetworkSelection(android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephony$Stub$Proxy: void dial(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.MccTable: void setSystemLocale(android.content.Context,java.lang.String,java.lang.String)> android.permission.WAKE_LOCK android.permission.CHANGE_CONFIGURATION (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void sendTerminalResponse(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: void setNetworkSelectionModeAutomatic(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.ModelInterpreter: void println(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void setSystemProperty(java.lang.String,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration(android.content.Context,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DataConnection: void setRetryCount(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.BaseCommands: void setOnCatSessionEnd(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setCallWaiting(boolean,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setPreferredVoicePrivacy(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void setRadioPower(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: boolean handlePinMmi(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IccRecords: void setVoiceCallForwardingFlag(int,boolean)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordQuality(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellInfo(java.util.List)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void rejectCall(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.BaseCommands: void setOnNewGsmBroadcastSms(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: void setCallWaiting(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCameraDisabled(android.content.ComponentName,boolean,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void setNetworkSelectionModeAutomatic(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void reportStkServiceIsRunning(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.UiccCardApplication: void registerForNetworkLocked(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cat.ResponseData: void writeLength(java.io.ByteArrayOutputStream,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void sendCDMAFeatureCode(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaSubscriptionSource(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyMessageWaitingChanged(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.BaseCommands: void setOnUSSD(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: void setCellBroadcastSmsConfig(int[],android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumNonLetter(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelope(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setPreferredVoicePrivacy(boolean,android.os.Message)> android.permission.STOP_APP_SWITCHES (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void setActiveAdmin(android.content.ComponentName,boolean,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPuk(java.lang.String,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DataConnectionAc: void reqUpdateLinkPropertiesDataCallState(com.android.internal.telephony.DataCallState)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void sendCDMAFeatureCode(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.wm.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void sendTerminalResponse(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActiveAdmin(android.content.ComponentName,boolean,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.BaseCommands: void setOnSmsOnSim(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone$SipCall: void setMute(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setCdmaSubscriptionSource(int,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DataConnection$DcActivatingState: boolean processMessage(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void setCdmaSubscription(int,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void handleMessage(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setLocationUpdates(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void setTTYMode(int,android.os.Message)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setKeyguardDisabledFeatures(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void reportSuccessfulPasswordAttempt(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cat.Item: void writeToParcel(android.os.Parcel,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.ModelInterpreter: void setNextDialFailImmediately(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.UiccCardApplication: void registerForReady(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean updatePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.BaseCommands: void setEmergencyCallbackMode(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.AdnRecordLoader: void handleMessage(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DataConnectionTracker: void setDataOnRoamingEnabled(boolean)> android.permission.WRITE_SETTINGS (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void setBandMode(int,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setSmscAddress(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.am.ActivityManagerService: int startActivityIntentSender(android.app.IApplicationThread,android.content.IntentSender,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.BaseCommands: void setOnRestrictedStateChanged(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void setVoiceMessageWaiting(int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void requestIsimAuthentication(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.RuimRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void sendCDMAFeatureCode(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setSmscAddress(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void startDtmf(char,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyMessageWaitingChanged(com.android.internal.telephony.Phone)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumUpperCase(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IntRangeManager: boolean disableRange(int,int,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setTTYMode(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: boolean processMessage(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void deleteSmsOnRuim(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: void saveClirSetting(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.BaseCommands: void setOnCatCallSetUp(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.AdnRecordCache: void handleMessage(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cat.Input: boolean setIcon(android.graphics.Bitmap)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void getIMSIForApp(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> (SYSTEM_SETTINGS)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,java.lang.Object,boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setCallWaiting(boolean,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void setExpirationAlarmCheckLocked(android.content.Context,com.android.server.DevicePolicyManagerService$DevicePolicyData)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void acknowledgeIncomingGsmSmsWithPdu(boolean,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void notifyOtaspChanged(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void notifyCellInfo(java.util.List)> (SYSTEM_SETTINGS)
<com.android.server.am.ActivityManagerService: void updatePersistentConfiguration(android.content.res.Configuration)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setNetworkSelectionModeAutomatic(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onCallStateChanged(int,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.AdnRecordCache: void requestLoadAllAdnLike(int,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setSuppServiceNotifications(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void fixTimeZone(java.lang.String)> android.permission.BROADCAST_STICKY android.permission.SET_TIME_ZONE (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: void setEchoSuppressionEnabled(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredNetworkType(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.CallerInfoAsyncQuery: void addQueryListener(int,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void setActivePasswordState(int,int,int,int,int,int,int,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void setCallWaiting(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.am.ActivityManagerService: void updateConfiguration(android.content.res.Configuration)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephony$Stub$Proxy: int enableApnType(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void sendEnvelope(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.am.ActivityStack: int startActivityMayWait(android.app.IApplicationThread,int,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.app.IActivityManager$WaitResult,android.content.res.Configuration,android.os.Bundle,int)> (SYSTEM_SETTINGS)
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.ApnContext: void setWaitingApns(java.util.ArrayList)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: int setStorageEncryption(android.content.ComponentName,boolean,int)> android.permission.STOP_APP_SWITCHES (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void sendCdmaSms(byte[],android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void setRadioPower(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.CallManager: boolean canConference(com.android.internal.telephony.Call)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void sendSMS(java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void reportSuccessfulPasswordAttempt(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void queryCallWaiting(int,android.os.Message)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActivePasswordState(int,int,int,int,int,int,int,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onOtaspChanged(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: boolean processMessage(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void restoreSavedNetworkSelection(android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.UiccCard: void update(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccCardStatus)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.content.BroadcastReceiver)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setCallWaiting(boolean,int,android.os.Message)> (SYSTEM_SETTINGS)
<android.telephony.ServiceState: void setStateOff()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone$SipConnection: void setMute(boolean)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumNumeric(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.CallManager: boolean startDtmf(char)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredVoicePrivacy(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setCLIR(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DataConnection$DcInactiveState: boolean processMessage(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setBandMode(int,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL$RILSender: void handleMessage(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setCdmaRoamingPreference(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setMute(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLetters(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void setCallWaiting(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrength(android.telephony.SignalStrength)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean hasGrantedPolicy(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IccCardProxy: void setVoiceRadioTech(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataActivity(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onCellInfoChanged(java.util.List)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void sendSMS(java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setCdmaRoamingPreference(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void sendDtmf(char,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLowerCase(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.BaseCommands: void setOnSuppServiceNotification(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setCdmaBroadcastConfig(int[],android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Connection dial(com.android.internal.telephony.Phone,java.lang.String,com.android.internal.telephony.UUSInfo)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void setCdmaRoamingPreference(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: void setNetworkSelectionModeAutomatic(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.BaseCommands: void setOnNewCdmaSms(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void setPasswordExpirationTimeout(android.content.ComponentName,long,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void conference(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: boolean resetPassword(java.lang.String,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setCLIR(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ApnContext: void setEnabled(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void acceptCall(android.os.Message)> (SYSTEM_SETTINGS)
<android.telephony.ServiceState: void setStateOutOfService()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)> (SYSTEM_SETTINGS)
<com.android.server.am.ActivityManagerService: void setAlwaysFinish(boolean)> android.permission.WRITE_SETTINGS (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void stopDtmf(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void exitEmergencyCallbackMode(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void saveClirSetting(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.BaseCommands: void setOnNewGsmSms(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataActivity(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onSignalStrengthChanged(int)> (SYSTEM_SETTINGS)
<android.telephony.ServiceState: void setCssIndicator(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: void setDataRoamingEnabled(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.BaseCommands: void setOnCatProactiveCmd(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setDataRoamingEnabled(boolean)> (SYSTEM_SETTINGS)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void wipeData(int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeAutomatic(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.GsmAlphabet: java.lang.String gsm8BitUnpackedToString(byte[],int,int,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cat.RilMessageDecoder: void sendStartDecodingMessageParams(com.android.internal.telephony.cat.RilMessage)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void startDtmf(char)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IccRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.DataConnectionAc: void reqSetLinkPropertiesHttpProxy(android.net.ProxyProperties)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.BaseCommands: void setOnCallRing(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setOnNITZTime(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.ModelInterpreter: void setAutoProgressConnectingCall(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: void setDataRoamingEnabled(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cat.CommandParams: boolean setIcon(android.graphics.Bitmap)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumUpperCase(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setCurrentPreferredNetworkType()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: void setBandMode(int,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setLocationUpdates(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setTTYMode(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Connection dial(com.android.internal.telephony.Phone,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void setDataRoamingEnabled(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setBandMode(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.am.ActivityManagerService: void appNotResponding(com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,boolean,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setNetworkSelectionModeAutomatic(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void setKeyguardDisabledFeatures(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DataConnection$DcDefaultState: boolean processMessage(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: void setRadioPower(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void deleteSmsOnSim(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.BaseCommands: void setOnNITZTime(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPassword(java.lang.String,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void reportSmsMemoryStatus(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumSymbols(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void setCdmaSubscription(int,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setRadioPower(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void setPasswordHistoryLength(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: void setMute(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyOtaspChanged(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void setSmscAddress(java.lang.String,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.BaseCommands: void setOnUnsolOemHookRaw(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLength(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setGsmBroadcastActivation(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> android.permission.STOP_APP_SWITCHES (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setPhoneType(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)> android.permission.BROADCAST_STICKY android.permission.SET_TIME_ZONE (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean packageHasActiveAdmins(java.lang.String,int)> (SYSTEM_SETTINGS)
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setDataOnRoamingEnabled(boolean)> android.permission.WRITE_SETTINGS (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void setDataRoamingEnabled(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setBandMode(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ims.IsimUiccRecords: void setVoiceMessageWaiting(int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void setSystemProperty(java.lang.String,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setNextDialFailImmediately(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setTTYMode(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IccCardStatus: void setUniversalPinState(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ApnContext: void setReason(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void reportFailedPasswordAttempt(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setTTYMode(int,android.os.Message)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordExpirationTimeout(android.content.ComponentName,long,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cat.GetInkeyInputResponseData: void format(java.io.ByteArrayOutputStream)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.AdnRecordCache: void updateAdnBySearch(int,com.android.internal.telephony.AdnRecord,com.android.internal.telephony.AdnRecord,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.BaseCommands: void setOnSignalStrengthUpdate(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setCdmaBroadcastActivation(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setRadioPower(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: boolean processMessage(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.am.ActivityManagerService: void closeSystemDialogsLocked(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void setMute(boolean)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNumeric(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: void setCdmaSubscription(int,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void switchWaitingOrHoldingAndActive(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void sendSMS(java.lang.String,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cat.CatService: void handleMessage(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.BaseCommands: void setOnSmsStatus(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<android.telephony.CellSignalStrengthCdma: void setDefaultValues()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void invokeOemRilRequestRaw(byte[],android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void setCdmaSubscription(int,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<android.webkit.DeviceMotionAndOrientationManager: void setMockOrientation(boolean,double,boolean,double,boolean,double)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void sendDtmf(char,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: void setCdmaSubscription(int,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCellInfo(com.android.internal.telephony.Phone,java.util.List)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyServiceStateChanged(android.telephony.ServiceState)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void setPreferredNetworkType(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.CallManager: void setEchoSuppressionEnabled(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void sendUSSD(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ApnContext: void setRetryCount(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: void setOutgoingCallerIdDisplay(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setPhoneType(int)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void setCameraDisabled(android.content.ComponentName,boolean,int)> (SYSTEM_SETTINGS)
<com.android.uiautomator.core.UiDevice: boolean pressKeyCode(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IWapPushManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: boolean hasGrantedPolicy(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.os.Bundle)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setCdmaTechnology(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setCdmaSubscription(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLetters(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void sendUSSD(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setCdmaSubscription(int,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void removeActiveAdmin(android.content.ComponentName,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.ApnContext: void setState(com.android.internal.telephony.DctConstants$State)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.UiccCardApplication: void supplyPin(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setMute(boolean)> (SYSTEM_SETTINGS)
<com.android.server.usb.UsbDeviceManager: void setCurrentFunctions(java.lang.String,boolean)> (SYSTEM_SETTINGS)
<com.android.server.input.InputManagerService$InputDevicesChangedListenerRecord: void notifyInputDevicesChanged(int[])> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setSuppServiceNotifications(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLength(android.content.ComponentName,int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void setCdmaBroadcastConfig(int[],android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setUnitTestMode(boolean)> (SYSTEM_SETTINGS)
<android.app.admin.IDevicePolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.AdnRecord,int,java.lang.String,android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.UiccCardApplication: void registerForLocked(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastActivation(boolean,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: int enableApnType(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setEchoSuppressionEnabled(boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipCommandInterface: void sendCdmaSms(byte[],android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void setBandMode(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.wm.WindowManagerService: void setNewConfiguration(android.content.res.Configuration)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void setOnNITZTime(android.os.Handler,int,java.lang.Object)> (SYSTEM_SETTINGS)
<com.android.uiautomator.core.UiDevice: boolean pressKeyCode(int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.test.SimulatedCommands: void sendEnvelope(java.lang.String,android.os.Message)> (SYSTEM_SETTINGS)

BROWSER_INFORMATION:
<com.android.browser.TabBar$TabView: void setDisplayTitle(java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (BROWSER_INFORMATION)
<com.android.browser.Tab: void setParent(com.android.browser.Tab)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (BROWSER_INFORMATION)
<com.android.browser.Tab$3: void setupAutoFill(android.os.Message)> (BROWSER_INFORMATION)
<com.android.browser.provider.SnapshotProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (BROWSER_INFORMATION)
<com.android.browser.Controller: void setActiveTab(com.android.browser.Tab)> (BROWSER_INFORMATION)
<com.android.browser.NavTabScroller: void setScrollValue(int)> (BROWSER_INFORMATION)
<com.android.browser.SnapshotTab: boolean saveViewState(android.content.ContentValues)> (BROWSER_INFORMATION)
<com.android.browser.TabScrollView: void setScroll(int)> (BROWSER_INFORMATION)
<com.android.browser.Controller: void start(android.content.Intent)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> android.permission.WRITE_SYNC_SETTINGS android.permission.READ_SYNC_SETTINGS android.permission.GET_ACCOUNTS (BROWSER_INFORMATION)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean,com.android.browser.Tab)> (BROWSER_INFORMATION)
<com.android.browser.TabBar$TabView: void setFavicon(android.graphics.drawable.Drawable)> (BROWSER_INFORMATION)
<com.android.browser.NavTabScroller: void setOrientation(int)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider2: int updateBookmarksInTransaction(android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> com.android.browser.permission.READ_HISTORY_BOOKMARKS (BROWSER_INFORMATION)
<com.android.browser.TabControl: void restoreState(android.os.Bundle,long,boolean,boolean)> (BROWSER_INFORMATION)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (BROWSER_INFORMATION)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,com.android.browser.Tab,boolean,boolean)> (BROWSER_INFORMATION)
<com.android.browser.NavigationBarTablet: void setFocusState(boolean)> (BROWSER_INFORMATION)
<com.android.browser.TabBar$TabView: void dispatchDraw(android.graphics.Canvas)> (BROWSER_INFORMATION)
<com.android.browser.UrlHandler$RLZTask: void onPostExecute(java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.NavigationBarTablet: void setCurrentUrlIsBookmark(boolean)> (BROWSER_INFORMATION)
<com.android.browser.UrlHandler: boolean startActivityForUrl(com.android.browser.Tab,java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.DataController: void updateVisitedHistory(java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.NavigationBarTablet: void setFavicon(android.graphics.Bitmap)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider2: android.content.ContentValues extractImageValues(android.content.ContentValues,java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.Tab: void setWebView(android.webkit.WebView)> (BROWSER_INFORMATION)
<com.android.browser.homepages.Template$HashMapEntityData: void writeValue(java.io.OutputStream,java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.NavigationBarTablet: void setTitleBar(com.android.browser.TitleBar)> (BROWSER_INFORMATION)

NFC:
<android.nfc.INfcTag$Stub$Proxy: boolean canMakeReadOnly(int)> (NFC)
<android.nfc.INfcTag$Stub$Proxy: int connect(int,int)> (NFC)
<com.android.nfc.NfcService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (NFC)
<android.nfc.INfcAdapterExtras$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (NFC)
<com.android.nfc.ndefpush.NdefPushClient: boolean push(android.nfc.NdefMessage)> (NFC)
<android.nfc.NfcActivityManager: void setNdefPushMessage(android.app.Activity,android.nfc.NdefMessage)> (NFC)
<com.android.nfc.NfcService$NfcAdapterExtrasService: void setCardEmulationRoute(java.lang.String,int)> (NFC)
<android.nfc.INfcTag$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (NFC)
<com.android.nfc.NfcService$NfcAdapterService: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)> (NFC)
<com.android.nfc.NfcService$NfcServiceHandler: void handleMessage(android.os.Message)> (NFC)
<com.android.nfc.handover.HandoverTransfer: void whitelistOppDevice(android.bluetooth.BluetoothDevice)> (NFC)
<com.android.nfc.NfcDispatcher$DispatchInfo: boolean tryStartActivity(android.content.Intent)> (NFC)
<android.nfc.Tag: void writeToParcel(android.os.Parcel,int)> (NFC)
<android.nfc.INfcTag$Stub$Proxy: boolean ndefIsWritable(int)> (NFC)
<com.android.nfc.NfcService$TagService: android.nfc.Tag rediscover(int)> (NFC)
<android.nfc.tech.MifareClassic: void decrement(int,int)> android.permission.NFC (NFC)
<com.android.nfc.NfcService: void onSeApduReceived(byte[])> (NFC)
<com.android.nfc.dhimpl.NativeLlcpConnectionlessSocket: void send(int,byte[])> (NFC)
<com.android.nfc.P2pLinkManager: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (NFC)
<com.android.nfc.P2pLinkManager: void onSendComplete(android.nfc.NdefMessage,long)> (NFC)
<com.android.nfc.NfceeAccessControl: boolean check(android.content.pm.ApplicationInfo)> (NFC)
<com.android.nfc.NfcDispatcher: boolean tryTech(com.android.nfc.NfcDispatcher$DispatchInfo,android.nfc.Tag)> (NFC)
<com.android.nfc.handover.HandoverClient: android.nfc.NdefMessage sendHandoverRequest(android.nfc.NdefMessage)> (NFC)
<com.android.nfc.NfcService: void onCardEmulationAidSelected(byte[])> (NFC)
<android.nfc.INfcTag$Stub$Proxy: int reconnect(int)> (NFC)
<com.android.nfc.NfcService$NfcAdapterExtrasService: android.os.Bundle open(java.lang.String,android.os.IBinder)> android.permission.NFC (NFC)
<com.android.nfc.NfcService$NfcAdapterService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (NFC)
<com.android.nfc.NfcService: void onSeMifareAccess(byte[])> (NFC)
<com.android.nfc.handover.HandoverService: void createHandoverTransfer(com.android.nfc.handover.PendingHandoverTransfer)> (NFC)
<android.nfc.tech.NfcF: void setTimeout(int)> (NFC)
<com.android.nfc.P2pLinkManager: boolean handleMessage(android.os.Message)> (NFC)
<android.nfc.tech.NfcA: void setTimeout(int)> (NFC)
<com.android.nfc.dhimpl.NativeNfcManager: void setP2pInitiatorModes(int)> (NFC)
<com.android.nfc.NfcService: void saveNfcOnSetting(boolean)> (NFC)
<android.nfc.tech.IsoDep: void setTimeout(int)> (NFC)
<android.nfc.tech.MifareClassic: void setTimeout(int)> (NFC)
<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])> (NFC)
<android.nfc.NdefMessage: void writeToParcel(android.os.Parcel,int)> (NFC)
<android.nfc.INfcAdapter$Stub$Proxy: void setNdefPushCallback(android.nfc.INdefPushCallback)> (NFC)
<com.android.nfc.NfcDispatcher: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (NFC)
<com.android.nfc.dhimpl.NativeNfcTag: void addNdefTechnology(android.nfc.NdefMessage,int,int,int,int,int)> (NFC)
<android.nfc.INfcAdapterExtras$Stub$Proxy: void setCardEmulationRoute(java.lang.String,int)> (NFC)
<android.nfc.INfcAdapter$Stub$Proxy: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)> (NFC)
<com.android.nfc.NfcService: void sendMockNdefTag(android.nfc.NdefMessage)> android.permission.GET_TASKS android.permission.BLUETOOTH android.permission.WRITE_SETTINGS android.permission.VIBRATE android.permission.BLUETOOTH_ADMIN (NFC)
<android.nfc.INfcTag$Stub$Proxy: int setTimeout(int,int)> (NFC)
<android.nfc.INdefPushCallback$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (NFC)
<com.android.nfc.NfcService$NfcAdapterService: void setNdefPushCallback(android.nfc.INdefPushCallback)> (NFC)
<android.nfc.NfcActivityManager: void setOnNdefPushCompleteCallback(android.app.Activity,android.nfc.NfcAdapter$OnNdefPushCompleteCallback)> (NFC)
<android.nfc.tech.MifareUltralight: void setTimeout(int)> (NFC)
<com.android.nfc.NfcService$NfcAdapterService: void setP2pModes(int,int)> (NFC)
<android.nfc.INfcTag$Stub$Proxy: int ndefMakeReadOnly(int)> (NFC)
<com.android.nfc.NfceeAccessControl: boolean check(int,java.lang.String)> (NFC)
<android.nfc.NfcActivityManager: void setNdefPushMessageCallback(android.app.Activity,android.nfc.NfcAdapter$CreateNdefMessageCallback)> (NFC)
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle open(java.lang.String,android.os.IBinder)> (NFC)
<com.android.nfc.dhimpl.NativeNfcManager: void setP2pTargetModes(int)> (NFC)
<com.android.nfc.dhimpl.NativeNfcManager: boolean setTimeout(int,int)> (NFC)
<android.nfc.INfcAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (NFC)
<com.android.nfc.handover.HandoverService$1: void onReceive(android.content.Context,android.content.Intent)> (NFC)
<com.android.nfc.handover.HandoverService: void onTransferComplete(com.android.nfc.handover.HandoverTransfer,boolean)> (NFC)
<android.nfc.INfcAdapter$Stub$Proxy: void setP2pModes(int,int)> (NFC)
<com.android.nfc.NfcService$NfcAdapterService: void dispatch(android.nfc.Tag)> (NFC)
<android.nfc.INfcAdapterExtras$Stub$Proxy: void authenticate(java.lang.String,byte[])> android.permission.NFC (NFC)
<com.android.nfc.dhimpl.NativeLlcpSocket: void send(byte[])> (NFC)
<com.android.nfc.NfcService$TagService: int ndefWrite(int,android.nfc.NdefMessage)> (NFC)
<com.android.nfc.P2pLinkManager: void onReceiveComplete(android.nfc.NdefMessage)> (NFC)
<android.nfc.NfcActivityManager: void setNdefPushContentUriCallback(android.app.Activity,android.nfc.NfcAdapter$CreateBeamUrisCallback)> (NFC)
<com.android.nfc.snep.SnepMessenger: void sendMessage(com.android.nfc.snep.SnepMessage)> (NFC)
<android.nfc.INfcTag$Stub$Proxy: int formatNdef(int,byte[])> (NFC)
<android.nfc.INfcTag$Stub$Proxy: int ndefWrite(int,android.nfc.NdefMessage)> (NFC)
<android.nfc.tech.MifareClassic: void increment(int,int)> android.permission.NFC (NFC)
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity[])> (NFC)
<com.android.nfc.NfceeAccessControl: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (NFC)
<android.nfc.NfcAdapter: void setBeamPushUris(android.net.Uri[],android.app.Activity)> (NFC)
<android.nfc.INfcTag$Stub$Proxy: int close(int)> (NFC)
<android.nfc.NfcActivityManager: void setNdefPushContentUri(android.app.Activity,android.net.Uri[])> (NFC)
<android.nfc.NfcAdapter: void setP2pModes(int,int)> (NFC)
<com.android.nfc.handover.HandoverManager: void whitelistOppDevice(android.bluetooth.BluetoothDevice)> (NFC)
<com.android.nfc.NfcService$TagService: int setTimeout(int,int)> (NFC)
<com.android.nfc.handover.HandoverTransfer: void onScanCompleted(java.lang.String,android.net.Uri)> (NFC)
<com.android.nfc.dhimpl.NativeP2pDevice: boolean send(byte[])> (NFC)

