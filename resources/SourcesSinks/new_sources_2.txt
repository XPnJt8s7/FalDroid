UNIQUE_IDENTIFIER:
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceId()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IccRecords: java.lang.String getVoiceMailNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhone: java.lang.String getVoiceMailNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getIccSerialNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhone: java.lang.String getVoiceMailAlphaTag()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getEsn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getSubscriberId()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailAlphaTag()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhone: java.lang.String getPhoneName()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneProxy: java.lang.String getMsisdn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMsisdn()> (UNIQUE_IDENTIFIER)
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(java.lang.String)> (UNIQUE_IDENTIFIER)
<android.telephony.PhoneNumberUtils: java.lang.String getStrippedReversed(java.lang.String)> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIsimImpi()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getMsisdn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhone: java.lang.String getSubscriberId()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getSubscriberId()> android.permission.READ_PHONE_STATE (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhone: java.lang.String getLine1AlphaTag()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhone: java.lang.String getMeid()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneBase: java.lang.String getIccSerialNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1Number()> (UNIQUE_IDENTIFIER)
<android.telephony.SmsCbLocation: java.lang.String getPlmn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.DataConnectionTracker: java.lang.String apnIdToType(int)> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaMin()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getPhoneName()> (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneProxy: java.lang.String getSubscriberId()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaMin()> (UNIQUE_IDENTIFIER)
<android.telephony.SmsCbLocation: java.lang.String toString()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getImei()> android.permission.STOP_APP_SWITCHES (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.UiccCardApplication: java.lang.String getAid()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailAlphaTag()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIsimDomain()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1AlphaTag()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceId()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaPrlVersion()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceId()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getAddress()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceSvn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimDomain()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1AlphaTag()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceSvn()> (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IccCardProxy: java.lang.String getServiceProviderName()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.AdnRecord: java.lang.String getNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhone: java.lang.String getLine1Number()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getVoiceMailNumber(java.lang.String)> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1Number()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getSubscriberId()> (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getMsisdn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimImpi()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String[] getIsimImpu()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceSvn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneBase: java.lang.String getActiveApnHost(java.lang.String)> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getImei()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceSvn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getCompleteVoiceMailNumber()> (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getCompleteVoiceMailNumber()> android.permission.CALL_PRIVILEGED (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getMsisdn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getDeviceSvn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber()> android.permission.READ_PHONE_STATE (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhone: java.lang.String getDeviceSvn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceId()> android.permission.READ_PHONE_STATE (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1Number()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IPhoneSubInfo$Stub: com.android.internal.telephony.IPhoneSubInfo asInterface(android.os.IBinder)> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getCnapName()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getMsisdn()> android.permission.READ_PHONE_STATE (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneProxy: java.lang.String getVoiceMailNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getMeid()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaEriText()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceId()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IccRecords: java.lang.String getMsisdnNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhone: java.lang.String getImei()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IPhoneSubInfo$Stub: android.os.IBinder asBinder()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1AlphaTag()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getCompleteVoiceMailNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getEsn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailAlphaTag()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1AlphaTag()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId()> (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getDeviceId()> (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTag()> android.permission.READ_PHONE_STATE (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneProxy: java.lang.String getIccSerialNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhone: java.lang.String getSipUri()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaPrlVersion()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1AlphaTag()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMeid()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhone: java.lang.String getEsn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getCompleteVoiceMailNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getSubscriberId()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimImpi()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhone: java.lang.String getIccSerialNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getImei()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1AlphaTag()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceSvn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailNumber()> android.permission.READ_PHONE_STATE (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneProxy: java.lang.String getPhoneName()> (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> android.permission.READ_PHONE_STATE (UNIQUE_IDENTIFIER)
<android.telephony.PhoneNumberUtils: java.lang.String getNumberFromIntent(android.content.Intent,android.content.Context)> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTag()> (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getIsimImpi()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceSvn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1Number()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneProxy: java.lang.String getMeid()> (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailAlphaTag()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getEsn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (UNIQUE_IDENTIFIER)
<android.telephony.PhoneNumberUtils: java.lang.String getUsernameFromUriNumber(java.lang.String)> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()> android.permission.READ_PHONE_STATE (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1Number()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceId()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailAlphaTag()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn()> android.permission.READ_PHONE_STATE (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneProxy: java.lang.String getActiveApnHost(java.lang.String)> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getMsisdn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneProxy: java.lang.String getImei()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimDomain()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIccSerialNumber()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1Number()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getMeid()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getPhoneName()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.IccRecords: java.lang.String getServiceProviderName()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneProxy: java.lang.String getVoiceMailAlphaTag()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getSubscriberId()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaPrlVersion()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhone: java.lang.String getDeviceId()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getImei()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaMin()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.CallTracker: java.lang.String checkForTestEmergencyNumber(java.lang.String)> (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getIsimDomain()> (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaEriText()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneProxy: java.lang.String getEsn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1Number()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaEriText()> (UNIQUE_IDENTIFIER)
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneBase: java.lang.String getMsisdn()> (UNIQUE_IDENTIFIER)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIccSerialNumber()> (UNIQUE_IDENTIFIER)

LOCATION_INFORMATION:
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type)> (LOCATION_INFORMATION)
<android.location.ICountryDetector$Stub: android.os.IBinder asBinder()> (LOCATION_INFORMATION)
<android.location.GpsSatellite: int getPrn()> (LOCATION_INFORMATION)
<android.location.Address: java.lang.String getFeatureName()> (LOCATION_INFORMATION)
<com.android.internal.telephony.sip.SipPhone: android.telephony.CellLocation getCellLocation()> (LOCATION_INFORMATION)
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION (LOCATION_INFORMATION)
<android.location.Address: java.lang.String getAdminArea()> (LOCATION_INFORMATION)
<android.location.Location: float getSpeed()> (LOCATION_INFORMATION)
<com.android.server.location.MockProvider: long getStatusUpdateTime()> (LOCATION_INFORMATION)
<android.location.Address: java.util.Locale getLocale()> (LOCATION_INFORMATION)
<android.location.LocationManager: java.util.List getProviders(boolean)> (LOCATION_INFORMATION)
<android.location.Address: java.lang.String getCountryName()> (LOCATION_INFORMATION)
<android.telephony.SmsCbLocation: int getLac()> (LOCATION_INFORMATION)
<com.android.internal.telephony.cdma.CDMAPhone: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK (LOCATION_INFORMATION)
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: java.util.List getAllProviders()> (LOCATION_INFORMATION)
<android.location.GpsSatellite: float getSnr()> (LOCATION_INFORMATION)
<android.location.GeocoderParams: java.util.Locale getLocale()> (LOCATION_INFORMATION)
<android.renderscript.Allocation: int getBytesSize()> (LOCATION_INFORMATION)
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()> (LOCATION_INFORMATION)
<com.android.server.location.PassiveProvider: long getStatusUpdateTime()> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION (LOCATION_INFORMATION)
<com.android.internal.telephony.sip.SipPhone: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK (LOCATION_INFORMATION)
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)> (LOCATION_INFORMATION)
<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()> (LOCATION_INFORMATION)
<com.android.server.location.PassiveProvider: java.lang.String getName()> (LOCATION_INFORMATION)
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION (LOCATION_INFORMATION)
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getNetworkBasedCountry()> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> (LOCATION_INFORMATION)
<android.renderscript.Allocation: android.renderscript.Type typeFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl)> (LOCATION_INFORMATION)
<com.android.internal.location.ILocationProvider$Stub$Proxy: long getStatusUpdateTime()> (LOCATION_INFORMATION)
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)> (LOCATION_INFORMATION)
<android.location.Address: int getMaxAddressLineIndex()> (LOCATION_INFORMATION)
<com.android.internal.telephony.PhoneProxy: void getPreferredNetworkType(android.os.Message)> (LOCATION_INFORMATION)
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)> (LOCATION_INFORMATION)
<android.location.Criteria: int getVerticalAccuracy()> (LOCATION_INFORMATION)
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int,double,double,double,double)> (LOCATION_INFORMATION)
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> (LOCATION_INFORMATION)
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.CellLocation getCellLocation()> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> (LOCATION_INFORMATION)
<android.location.Location: long getElapsedRealtimeNanos()> (LOCATION_INFORMATION)
<android.location.Location: double getLatitude()> android.permission.STOP_APP_SWITCHES (LOCATION_INFORMATION)
<android.location.Location: float getBearing()> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> (LOCATION_INFORMATION)
<android.renderscript.Allocation: android.renderscript.Allocation createFromString(android.renderscript.RenderScript,java.lang.String,int)> (LOCATION_INFORMATION)
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (LOCATION_INFORMATION)
<android.location.LocationProvider: java.lang.String getName()> (LOCATION_INFORMATION)
<android.location.IGpsStatusListener$Stub: android.os.IBinder asBinder()> (LOCATION_INFORMATION)
<android.renderscript.Mesh$AllocationBuilder: int getCurrentVertexTypeIndex()> (LOCATION_INFORMATION)
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)> (LOCATION_INFORMATION)
<com.android.server.location.MockProvider: int getStatus(android.os.Bundle)> (LOCATION_INFORMATION)
<android.location.Location: android.os.Bundle getExtras()> (LOCATION_INFORMATION)
<android.location.ILocationListener$Stub: android.os.IBinder asBinder()> (LOCATION_INFORMATION)
<android.renderscript.Allocation: android.graphics.SurfaceTexture getSurfaceTexture()> (LOCATION_INFORMATION)
<android.location.Criteria: int getPowerRequirement()> (LOCATION_INFORMATION)
<android.telephony.gsm.GsmCellLocation: int getPsc()> (LOCATION_INFORMATION)
<android.location.GpsStatus: java.lang.Iterable getSatellites()> (LOCATION_INFORMATION)
<com.android.camera.LocationManager: android.location.Location getCurrentLocation()> (LOCATION_INFORMATION)
<android.location.Address: java.lang.String getPremises()> (LOCATION_INFORMATION)
<android.telephony.gsm.GsmCellLocation: int getLac()> (LOCATION_INFORMATION)
<com.android.internal.location.GpsNetInitiatedHandler: byte[] stringToByteArray(java.lang.String,boolean)> (LOCATION_INFORMATION)
<android.telephony.cdma.CdmaCellLocation: int getSystemId()> (LOCATION_INFORMATION)
<com.android.server.location.LocationProviderProxy: java.lang.String getName()> (LOCATION_INFORMATION)
<android.location.Address: java.lang.String getThoroughfare()> (LOCATION_INFORMATION)
<com.android.camera.RecordLocationPreference: java.lang.String getValue()> (LOCATION_INFORMATION)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK (LOCATION_INFORMATION)
<android.location.LocationRequest: java.lang.String getProvider()> (LOCATION_INFORMATION)
<com.android.server.LocationManagerService: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> (LOCATION_INFORMATION)
<com.android.internal.telephony.gsm.GSMPhone: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK (LOCATION_INFORMATION)
<android.location.IGpsStatusProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (LOCATION_INFORMATION)
<android.location.LocationRequest: int getQuality()> (LOCATION_INFORMATION)
<com.android.server.location.MockProvider: com.android.internal.location.ProviderProperties getProperties()> (LOCATION_INFORMATION)
<android.telephony.CellLocation: android.telephony.CellLocation getEmpty()> (LOCATION_INFORMATION)
<android.location.Location: long getTime()> (LOCATION_INFORMATION)
<android.renderscript.Allocation: android.renderscript.Element getElement()> (LOCATION_INFORMATION)
<android.location.Address: java.lang.String getAddressLine(int)> (LOCATION_INFORMATION)
<com.android.server.location.PassiveProvider: com.android.internal.location.ProviderProperties getProperties()> android.permission.STOP_APP_SWITCHES (LOCATION_INFORMATION)
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)> (LOCATION_INFORMATION)
<com.android.server.location.MockProvider: java.lang.String getName()> (LOCATION_INFORMATION)
<android.location.Country: int getSource()> (LOCATION_INFORMATION)
<com.android.server.location.GeofenceState: double getDistanceToBoundary()> (LOCATION_INFORMATION)
<com.android.server.location.LocationProviderProxy: int getStatus(android.os.Bundle)> (LOCATION_INFORMATION)
<com.android.internal.location.ILocationProvider$Stub: android.os.IBinder asBinder()> (LOCATION_INFORMATION)
<android.location.Address: java.lang.String getPhone()> (LOCATION_INFORMATION)
<android.location.Geofence: double getLongitude()> (LOCATION_INFORMATION)
<android.location.ICountryDetector$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (LOCATION_INFORMATION)
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.CellLocation getCellLocation()> (LOCATION_INFORMATION)
<android.location.ICountryDetector$Stub$Proxy: android.location.Country detectCountry()> (LOCATION_INFORMATION)
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()> (LOCATION_INFORMATION)
<android.location.INetInitiatedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (LOCATION_INFORMATION)
<android.location.LocationRequest: long getInterval()> (LOCATION_INFORMATION)
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int)> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> (LOCATION_INFORMATION)
<android.location.ICountryListener$Stub: android.os.IBinder asBinder()> (LOCATION_INFORMATION)
<com.android.internal.location.ILocationProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (LOCATION_INFORMATION)
<android.location.Address: java.lang.String getUrl()> (LOCATION_INFORMATION)
<com.android.server.location.LocationBasedCountryDetector: java.lang.String getCountryFromLocation(android.location.Location)> (LOCATION_INFORMATION)
<com.android.server.location.LocationBasedCountryDetector: long getQueryLocationTimeout()> (LOCATION_INFORMATION)
<android.location.Address: java.lang.String getLocality()> (LOCATION_INFORMATION)
<android.location.IGpsStatusProvider$Stub: android.os.IBinder asBinder()> (LOCATION_INFORMATION)
<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()> (LOCATION_INFORMATION)
<android.webkit.GeolocationPermissions: android.webkit.GeolocationPermissions getInstance()> (LOCATION_INFORMATION)
<android.location.INetInitiatedListener$Stub: android.os.IBinder asBinder()> (LOCATION_INFORMATION)
<android.location.Location: java.lang.String getProvider()> (LOCATION_INFORMATION)
<android.location.LocationProvider: int getPowerRequirement()> (LOCATION_INFORMATION)
<com.android.server.location.LocationProviderProxy: com.android.internal.location.ProviderProperties getProperties()> (LOCATION_INFORMATION)
<com.android.server.LocationManagerService: java.util.List getAllProviders()> (LOCATION_INFORMATION)
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)> (LOCATION_INFORMATION)
<android.location.ILocationListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (LOCATION_INFORMATION)
<android.location.LocationManager: java.util.List getAllProviders()> (LOCATION_INFORMATION)
<android.location.Criteria: int getSpeedAccuracy()> (LOCATION_INFORMATION)
<android.location.GpsStatus: int getTimeToFirstFix()> (LOCATION_INFORMATION)
<android.location.Geofence: int getType()> (LOCATION_INFORMATION)
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION (LOCATION_INFORMATION)
<android.location.Geofence: float getRadius()> (LOCATION_INFORMATION)
<com.android.internal.telephony.PhoneBase: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK (LOCATION_INFORMATION)
<com.android.server.location.GpsLocationProvider: android.location.INetInitiatedListener getNetInitiatedListener()> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION (LOCATION_INFORMATION)
<android.location.Geofence: double getLatitude()> (LOCATION_INFORMATION)
<android.location.Address: android.os.Bundle getExtras()> (LOCATION_INFORMATION)
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()> (LOCATION_INFORMATION)
<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> (LOCATION_INFORMATION)
<android.location.Location: double getAltitude()> (LOCATION_INFORMATION)
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)> (LOCATION_INFORMATION)
<com.android.server.location.GeocoderProxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> (LOCATION_INFORMATION)
<android.location.Address: double getLongitude()> (LOCATION_INFORMATION)
<android.location.GpsSatellite: float getElevation()> (LOCATION_INFORMATION)
<com.android.internal.telephony.PhoneProxy: android.telephony.CellLocation getCellLocation()> (LOCATION_INFORMATION)
<android.renderscript.Allocation: android.renderscript.Type getType()> (LOCATION_INFORMATION)
<android.location.Location: android.location.Location getExtraLocation(java.lang.String)> (LOCATION_INFORMATION)
<android.renderscript.Allocation: android.view.Surface getSurface()> (LOCATION_INFORMATION)
<android.location.IGeocodeProvider$Stub: android.os.IBinder asBinder()> (LOCATION_INFORMATION)
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION (LOCATION_INFORMATION)
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION (LOCATION_INFORMATION)
<android.renderscript.Mesh$AllocationBuilder: int getCurrentIndexSetIndex()> (LOCATION_INFORMATION)
<android.location.IGpsStatusListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (LOCATION_INFORMATION)
<com.android.server.location.GpsLocationProvider: com.android.internal.location.ProviderProperties getProperties()> (LOCATION_INFORMATION)
<android.location.Country: java.lang.String getCountryIso()> (LOCATION_INFORMATION)
<android.location.LocationProvider: int getAccuracy()> (LOCATION_INFORMATION)
<android.location.GpsStatus: int getMaxSatellites()> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub: android.os.IBinder asBinder()> (LOCATION_INFORMATION)
<com.google.android.apps.lightcycle.util.LocationProvider: android.location.Location getCurrentLocation()> (LOCATION_INFORMATION)
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap)> (LOCATION_INFORMATION)
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getSimBasedCountry()> (LOCATION_INFORMATION)
<com.android.internal.location.ILocationProvider$Stub$Proxy: int getStatus(android.os.Bundle)> (LOCATION_INFORMATION)
<android.location.GeocoderParams: java.lang.String getClientPackage()> (LOCATION_INFORMATION)
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getLocaleCountry()> (LOCATION_INFORMATION)
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int)> (LOCATION_INFORMATION)
<android.telephony.gsm.GsmCellLocation: int getCid()> (LOCATION_INFORMATION)
<com.android.server.location.GeocoderProxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> (LOCATION_INFORMATION)
<com.android.internal.telephony.sip.SipPhoneBase: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK (LOCATION_INFORMATION)
<android.location.LocationRequest: long getExpireAt()> (LOCATION_INFORMATION)
<com.android.server.LocationManagerService: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> (LOCATION_INFORMATION)
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (LOCATION_INFORMATION)
<android.location.LocationManager: android.location.Location getLastLocation()> (LOCATION_INFORMATION)
<com.android.server.location.GpsLocationProvider: java.lang.String getName()> (LOCATION_INFORMATION)
<com.android.server.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> (LOCATION_INFORMATION)
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int)> (LOCATION_INFORMATION)
<com.android.server.location.GpsXtraDownloader: byte[] downloadXtraData()> (LOCATION_INFORMATION)
<android.location.Address: java.lang.String getPostalCode()> (LOCATION_INFORMATION)
<android.webkit.GeolocationPermissionsClassic: android.webkit.GeolocationPermissionsClassic getInstance()> (LOCATION_INFORMATION)
<android.location.GpsSatellite: float getAzimuth()> (LOCATION_INFORMATION)
<com.android.server.location.GeocoderProxy: java.lang.String getConnectedPackageName()> (LOCATION_INFORMATION)
<android.location.Country: long getTimestamp()> (LOCATION_INFORMATION)
<com.android.internal.location.ILocationProvider$Stub$Proxy: com.android.internal.location.ProviderProperties getProperties()> (LOCATION_INFORMATION)
<com.android.server.location.GpsXtraDownloader: byte[] doDownload(java.lang.String,boolean,java.lang.String,int)> (LOCATION_INFORMATION)
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> (LOCATION_INFORMATION)
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()> (LOCATION_INFORMATION)
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> (LOCATION_INFORMATION)
<com.android.internal.location.GpsNetInitiatedHandler: java.lang.String getDialogTitle(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification,android.content.Context)> (LOCATION_INFORMATION)
<android.location.LocationRequest: long getFastestInterval()> (LOCATION_INFORMATION)
<android.location.Address: java.lang.String getSubLocality()> (LOCATION_INFORMATION)
<android.location.Address: java.lang.String getSubAdminArea()> (LOCATION_INFORMATION)
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)> (LOCATION_INFORMATION)
<android.renderscript.AllocationAdapter: int getID(android.renderscript.RenderScript)> (LOCATION_INFORMATION)
<android.location.Address: double getLatitude()> (LOCATION_INFORMATION)
<android.location.Criteria: int getHorizontalAccuracy()> (LOCATION_INFORMATION)
<android.location.ILocationManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (LOCATION_INFORMATION)
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION (LOCATION_INFORMATION)
<android.renderscript.Allocation: int getUsage()> (LOCATION_INFORMATION)
<com.android.server.location.GpsLocationProvider: android.location.IGpsStatusProvider getGpsStatusProvider()> (LOCATION_INFORMATION)
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getLastKnownLocationBasedCountry()> (LOCATION_INFORMATION)
<android.telephony.SmsCbLocation: int getCid()> (LOCATION_INFORMATION)
<android.location.LocationRequest: int getNumUpdates()> (LOCATION_INFORMATION)
<com.android.server.location.GpsLocationProvider: long getStatusUpdateTime()> (LOCATION_INFORMATION)
<com.android.server.location.GpsLocationProvider: int getStatus(android.os.Bundle)> (LOCATION_INFORMATION)
<com.android.server.location.LocationFudger: android.location.Location getOrCreate(android.location.Location)> (LOCATION_INFORMATION)
<android.location.ICountryListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (LOCATION_INFORMATION)
<android.location.LocationRequest: float getSmallestDisplacement()> (LOCATION_INFORMATION)
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.CellLocation getCellLocation()> (LOCATION_INFORMATION)
<android.location.Address: java.lang.String getCountryCode()> (LOCATION_INFORMATION)
<com.android.phone.PhoneInterfaceManager: int getNetworkType()> (LOCATION_INFORMATION)
<android.location.Location: float getAccuracy()> (LOCATION_INFORMATION)
<android.location.Location: double getLongitude()> (LOCATION_INFORMATION)
<com.android.server.location.LocationProviderProxy: java.lang.String getConnectedPackageName()> (LOCATION_INFORMATION)
<android.location.Criteria: int getAccuracy()> (LOCATION_INFORMATION)
<com.android.server.location.PassiveProvider: int getStatus(android.os.Bundle)> (LOCATION_INFORMATION)
<android.location.Criteria: int getBearingAccuracy()> (LOCATION_INFORMATION)
<com.android.server.location.LocationBasedCountryDetector: java.util.List getEnabledProviders()> (LOCATION_INFORMATION)
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation$MipmapControl,int)> (LOCATION_INFORMATION)
<com.android.server.location.LocationProviderProxy: long getStatusUpdateTime()> (LOCATION_INFORMATION)
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION (LOCATION_INFORMATION)
<android.location.Address: java.lang.String getSubThoroughfare()> (LOCATION_INFORMATION)


ACCOUNT_INFORMATION:
<android.accounts.AccountManagerService: android.accounts.AccountAndUser[] getAllAccounts()> (ACCOUNT_INFORMATION)
<com.android.email.service.AttachmentDownloadService$AccountManagerStub: int getNumberOfAccounts()> android.permission.GET_ACCOUNTS (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> (ACCOUNT_INFORMATION)
<com.google.android.picasasync.Authorizer: java.lang.String getAuthToken(java.lang.String)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManagerService: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()> (ACCOUNT_INFORMATION)
<android.accounts.AccountManagerService: java.lang.String getUserData(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS (ACCOUNT_INFORMATION)
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccounts()> (ACCOUNT_INFORMATION)
<android.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)> android.permission.AUTHENTICATE_ACCOUNTS (ACCOUNT_INFORMATION)
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager$Future2Task: android.accounts.AccountManager$Future2Task start()> (ACCOUNT_INFORMATION)
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(int)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult()> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCacheLocked(android.accounts.AccountManagerService$UserAccounts,java.lang.String)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: java.util.HashMap access$1300(android.accounts.AccountManager)> (ACCOUNT_INFORMATION)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.USE_CREDENTIALS android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS (ACCOUNT_INFORMATION)
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult(long,java.util.concurrent.TimeUnit)> (ACCOUNT_INFORMATION)
<com.google.android.picasasync.Authorizer: java.lang.String getFreshAuthToken(java.lang.String,java.lang.String)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManagerService: android.accounts.AccountManagerService getSingleton()> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.USE_CREDENTIALS android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS (ACCOUNT_INFORMATION)
<android.accounts.AccountManagerService: java.lang.String getPassword(android.accounts.Account)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManagerService$Session: android.accounts.IAccountManagerResponse getResponseAndClose()> (ACCOUNT_INFORMATION)
<android.test.IsolatedContext$MockAccountManager: java.lang.String getPassword(android.accounts.Account)> android.permission.AUTHENTICATE_ACCOUNTS (ACCOUNT_INFORMATION)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeAsUser(java.lang.String,android.os.UserHandle)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> (ACCOUNT_INFORMATION)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (ACCOUNT_INFORMATION)
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccounts(java.lang.String)> (ACCOUNT_INFORMATION)
<android.test.IsolatedContext$MockAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.USE_CREDENTIALS android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS (ACCOUNT_INFORMATION)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()> (ACCOUNT_INFORMATION)
<android.accounts.AccountManagerService: android.accounts.AccountAndUser[] getRunningAccounts()> (ACCOUNT_INFORMATION)
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle getAccountRemovalAllowed(android.accounts.AccountAuthenticatorResponse,android.accounts.Account)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS (ACCOUNT_INFORMATION)
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult(long,java.util.concurrent.TimeUnit)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManagerService: android.accounts.AccountManagerService$UserAccounts getUserAccounts(int)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.os.Handler access$600(android.accounts.AccountManager)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)> android.permission.GET_ACCOUNTS (ACCOUNT_INFORMATION)
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult()> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: java.lang.Exception access$400(android.accounts.AccountManager,int,java.lang.String)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.accounts.IAccountManager access$000(android.accounts.AccountManager)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (ACCOUNT_INFORMATION)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.USE_CREDENTIALS android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS (ACCOUNT_INFORMATION)
<android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()> (ACCOUNT_INFORMATION)
<android.accounts.AccountManagerService$Session: java.lang.String toDebugString()> (ACCOUNT_INFORMATION)

FILE_INFORMATION:
<com.android.server.sip.SipSessionGroup: java.lang.String getLocalProfileUri()> (FILE_INFORMATION)
<android.provider.MediaStore$Audio$Albums: android.net.Uri getContentUri(java.lang.String)> (FILE_INFORMATION)
<com.android.ex.chips.Queries$Query: android.net.Uri getContentUri()> (FILE_INFORMATION)
<com.android.emailcommon.provider.EmailContent: android.net.Uri getUri()> (FILE_INFORMATION)
<android.provider.Settings$NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)> (FILE_INFORMATION)
<libcore.net.http.ResponseHeaders: java.net.URI getUri()> (FILE_INFORMATION)
<android.content.CursorLoader: android.net.Uri getUri()> (FILE_INFORMATION)
<com.google.android.picasasync.PicasaFacade: android.net.Uri getAlbumsUri()> (FILE_INFORMATION)
<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String,long)> (FILE_INFORMATION)
<org.ccil.cowan.tagsoup.Schema: java.lang.String getURI()> (FILE_INFORMATION)
<com.google.android.picasasync.PicasaFacade: android.net.Uri getPostPhotosUri()> (FILE_INFORMATION)
<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String,long)> (FILE_INFORMATION)
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUploadRecordsUri()> (FILE_INFORMATION)
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)> (FILE_INFORMATION)
<com.google.android.picasastore.PicasaStoreFacade: android.net.Uri getAlbumCoverUri(long,java.lang.String)> (FILE_INFORMATION)
<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String)> (FILE_INFORMATION)
<gov.nist.javax.sip.header.ProxyAuthenticate: javax.sip.address.URI getURI()> (FILE_INFORMATION)
<android.provider.SyncStateContract$Helpers: android.util.Pair getWithUri(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)> (FILE_INFORMATION)
<org.xml.sax.helpers.AttributesImpl: java.lang.String getURI(int)> (FILE_INFORMATION)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getSecurityMode()> (FILE_INFORMATION)
<android.net.sip.SipProfile: javax.sip.address.SipURI getUri()> (FILE_INFORMATION)
<gov.nist.javax.sip.header.RequestLine: gov.nist.javax.sip.address.GenericURI getUri()> (FILE_INFORMATION)
<android.content.ClipData$Item: android.net.Uri getUri()> (FILE_INFORMATION)
<com.google.android.picasasync.PicasaFacade: android.net.Uri getPhotosUri()> (FILE_INFORMATION)
<com.android.server.am.ActivityRecord: com.android.server.am.UriPermissionOwner getUriPermissionsLocked()> (FILE_INFORMATION)
<gov.nist.javax.sip.header.ParametersHeader: gov.nist.javax.sip.address.GenericURI getParameterAsURI(java.lang.String)> (FILE_INFORMATION)
<android.hardware.usb.UsbAccessory: java.lang.String getUri()> (FILE_INFORMATION)
<gov.nist.javax.sip.header.Challenge: java.lang.String getURI()> (FILE_INFORMATION)
<android.provider.MediaStore$Audio$Playlists: android.net.Uri getContentUri(java.lang.String)> (FILE_INFORMATION)
<android.app.DownloadManager: android.net.Uri getDownloadUri(long)> (FILE_INFORMATION)
<android.provider.MediaStore$Audio$Artists$Albums: android.net.Uri getContentUri(java.lang.String,long)> (FILE_INFORMATION)
<gov.nist.javax.sip.address.AddressImpl: javax.sip.address.URI getURI()> (FILE_INFORMATION)
<com.android.videoeditor.service.VideoEditorProject: android.net.Uri getExportedMovieUri()> (FILE_INFORMATION)
<android.media.RingtoneManager: android.net.Uri getRingtoneUri(int)> (FILE_INFORMATION)
<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUriForAudioId(java.lang.String,int)> (FILE_INFORMATION)
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUsersUri()> (FILE_INFORMATION)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper: com.android.internal.policy.impl.keyguard.KeyguardSecurityView getSecurityView()> (FILE_INFORMATION)
<com.android.camera.PhotoModule$ImageNamer: android.net.Uri getUri()> (FILE_INFORMATION)
<com.android.providers.media.MediaProvider: android.net.Uri getAlbumArtOutputUri(com.android.providers.media.MediaProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,long,android.net.Uri)> (FILE_INFORMATION)
<android.widget.TextView: android.text.TextDirectionHeuristic getTextDirectionHeuristic()> (FILE_INFORMATION)
<com.android.phone.PhoneUtils: com.android.internal.telephony.Phone getSipPhoneFromUri(com.android.internal.telephony.CallManager,java.lang.String)> (FILE_INFORMATION)
<com.android.server.pm.PackageManagerService$InstallParams: android.net.Uri getPackageUri()> (FILE_INFORMATION)
<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()> (FILE_INFORMATION)
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUploadsUri()> (FILE_INFORMATION)
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)> android.permission.WRITE_EXTERNAL_STORAGE android.permission.INTERNET android.permission.VIBRATE (FILE_INFORMATION)
<com.android.server.am.ServiceRecord$StartItem: com.android.server.am.UriPermissionOwner getUriPermissionsLocked()> (FILE_INFORMATION)
<android.provider.MediaStore$Images$Thumbnails: android.net.Uri getContentUri(java.lang.String)> (FILE_INFORMATION)
<android.content.pm.VerificationParams: android.net.Uri getOriginatingURI()> (FILE_INFORMATION)
<libcore.net.http.RequestHeaders: java.net.URI getUri()> (FILE_INFORMATION)
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getBackupSecurityMode(com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode)> (FILE_INFORMATION)
<com.google.android.picasasync.PicasaFacade: android.net.Uri getSettingsUri()> (FILE_INFORMATION)
<com.google.android.picasasync.PicasaFacade: android.net.Uri getPostAlbumsUri()> (FILE_INFORMATION)
<com.google.android.picasasync.UploadTaskEntry: android.net.Uri getContentUri()> (FILE_INFORMATION)
<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)> (FILE_INFORMATION)
<android.provider.MediaStore$Files: android.net.Uri getMtpReferencesUri(java.lang.String,long)> (FILE_INFORMATION)
<com.android.emailcommon.utility.AttachmentUtilities: android.net.Uri getAttachmentUri(long,long)> (FILE_INFORMATION)
<com.android.providers.downloads.DownloadInfo$Reader: com.android.providers.downloads.DownloadInfo newDownloadInfo(android.content.Context,com.android.providers.downloads.SystemFacade)> android.permission.WRITE_EXTERNAL_STORAGE android.permission.INTERNET android.permission.VIBRATE (FILE_INFORMATION)
<org.xml.sax.helpers.NamespaceSupport$Context: java.lang.String getURI(java.lang.String)> (FILE_INFORMATION)
<gov.nist.javax.sip.header.WWWAuthenticate: javax.sip.address.URI getURI()> (FILE_INFORMATION)
<com.android.ex.chips.RecipientEntry: android.net.Uri getPhotoThumbnailUri()> (FILE_INFORMATION)
<android.content.ContentProviderOperation: android.net.Uri getUri()> (FILE_INFORMATION)
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUploadUri(long)> (FILE_INFORMATION)
<gov.nist.javax.sip.message.SIPRequest: javax.sip.address.URI getRequestURI()> (FILE_INFORMATION)
<java.lang.SecurityManager: java.lang.Object getSecurityContext()> (FILE_INFORMATION)
<android.webkit.HTML5VideoView: boolean getPauseDuringPreparing()> (FILE_INFORMATION)
<com.android.ex.chips.Queries$Query: android.net.Uri getContentFilterUri()> (FILE_INFORMATION)
<android.provider.MediaStore: android.net.Uri getMediaScannerUri()> (FILE_INFORMATION)
<android.provider.MediaStore$Video$Thumbnails: android.net.Uri getContentUri(java.lang.String)> (FILE_INFORMATION)
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getURI(int)> (FILE_INFORMATION)
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)> (FILE_INFORMATION)
<android.app.ActivityManagerProxy: android.os.ParcelFileDescriptor openContentUri(android.net.Uri)> (FILE_INFORMATION)
<gov.nist.javax.sip.header.ims.PAssociatedURI: javax.sip.address.URI getAssociatedURI()> (FILE_INFORMATION)
<java.lang.System: java.lang.SecurityManager getSecurityManager()> (FILE_INFORMATION)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: android.net.Uri getUriForIntent(android.content.Context,long)> (FILE_INFORMATION)
<org.apache.http.impl.client.DefaultRedirectHandler: java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> (FILE_INFORMATION)
<org.apache.http.client.methods.HttpRequestBase: java.net.URI getURI()> (FILE_INFORMATION)
<android.provider.MediaStore$Audio$Genres$Members: android.net.Uri getContentUri(java.lang.String,long)> (FILE_INFORMATION)
<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUri(java.lang.String)> (FILE_INFORMATION)
<com.android.camera.VideoModule$VideoNamer: android.net.Uri getUri()> (FILE_INFORMATION)
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.String getSecurityMechanism()> (FILE_INFORMATION)
<com.android.launcher2.LauncherSettings$Favorites: android.net.Uri getContentUri(long,boolean)> (FILE_INFORMATION)
<com.android.email.AttachmentInfo: android.net.Uri getUriForIntent(android.content.Context,long)> (FILE_INFORMATION)
<com.android.phone.PhoneUtils: android.net.Uri getProviderGatewayUri(android.content.Intent)> (FILE_INFORMATION)
<org.xml.sax.helpers.NamespaceSupport: java.lang.String getURI(java.lang.String)> (FILE_INFORMATION)
<libcore.net.http.HttpEngine: java.net.URI getUri()> (FILE_INFORMATION)
<org.apache.http.message.BasicRequestLine: java.lang.String getUri()> (FILE_INFORMATION)
<android.media.RingtoneManager: android.net.Uri getValidRingtoneUri(android.content.Context)> (FILE_INFORMATION)
<android.provider.MediaStore$Audio$Playlists$Members: android.net.Uri getContentUri(java.lang.String,long)> (FILE_INFORMATION)
<org.apache.http.impl.client.RequestWrapper: java.net.URI getURI()> (FILE_INFORMATION)
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)> (FILE_INFORMATION)
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUri(java.lang.String)> (FILE_INFORMATION)
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)> (FILE_INFORMATION)
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)> (FILE_INFORMATION)
<org.kxml2.io.KXmlParser: java.lang.String getNamespaceUri(int)> (FILE_INFORMATION)
<gov.nist.javax.sip.header.AuthenticationHeader: javax.sip.address.URI getURI()> (FILE_INFORMATION)
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getURI(int)> (FILE_INFORMATION)
<com.android.providers.downloads.DownloadInfo: android.net.Uri getAllDownloadsUri()> android.permission.WRITE_EXTERNAL_STORAGE android.permission.INTERNET android.permission.VIBRATE (FILE_INFORMATION)
<android.media.Ringtone: android.net.Uri getUri()> (FILE_INFORMATION)
<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String getNamespaceURI(java.lang.String)> (FILE_INFORMATION)
<android.provider.MediaStore$Audio$Artists: android.net.Uri getContentUri(java.lang.String)> (FILE_INFORMATION)
<com.google.android.picasasync.PicasaFacade: android.net.Uri getAlbumUri(long)> (FILE_INFORMATION)
<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String)> (FILE_INFORMATION)
<com.android.providers.downloads.DownloadInfo: android.net.Uri getMyDownloadsUri()> android.permission.WRITE_EXTERNAL_STORAGE android.permission.INTERNET android.permission.VIBRATE (FILE_INFORMATION)
<com.google.android.picasastore.PicasaStoreFacade: android.net.Uri getPhotoUri(long,java.lang.String,java.lang.String)> (FILE_INFORMATION)
<android.content.pm.VerificationParams: android.net.Uri getVerificationURI()> (FILE_INFORMATION)
<android.text.Layout: android.text.TextDirectionHeuristic getTextDirectionHeuristic()> (FILE_INFORMATION)
<android.net.Uri: android.net.Uri getCanonicalUri()> (FILE_INFORMATION)
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)> (FILE_INFORMATION)
<android.provider.MediaStore$Video$Media: android.net.Uri getContentUri(java.lang.String)> (FILE_INFORMATION)
<android.content.res.XmlBlock$Parser: java.lang.String getNamespaceUri(int)> (FILE_INFORMATION)
<com.google.android.picasastore.FIFEUtil: java.lang.String getImageUriOptions(android.net.Uri)> (FILE_INFORMATION)

BLUETOOTH_INFORMATION:
<android.bluetooth.IBluetoothPbap$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothInputDevice$Stub: android.os.IBinder asBinder()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getUuids()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothInputDevice: java.util.List getConnectedDevices()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetooth$Stub$Proxy: int getRemoteClass(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getPhonebookSize(int)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()> (BLUETOOTH_INFORMATION)
<android.net.ConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService: java.lang.String getName()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkCapabilities getLinkCapabilities()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothStateChangeCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.RemoteDevices: com.android.bluetooth.btservice.RemoteDevices$DeviceProperties getDeviceProperties(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothServerSocket: int getChannel()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pbap.BluetoothPbapAuthenticator: byte[] onAuthenticationResponse(byte[])> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: android.bluetooth.BluetoothDevice getClient()> android.permission.BLUETOOTH (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hid.HidService: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pan.PanService: java.lang.String getName()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: byte[] getAddress()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService: int getBondState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pbap.BluetoothPbapService: java.lang.String getLocalPhoneName()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pbap.BluetoothPbapService: java.lang.String getLocalPhoneNum()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getUuids()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getState()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService: int getAdapterConnectionState()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterProperties: int getConnectionState()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getAddress()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getAddress()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothDevice: java.lang.String getAlias()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetooth$Stub$Proxy: int getAdapterConnectionState()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothTetheringDataTracker: java.lang.String getTcpBufferSizesPropName()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)> android.permission.BLUETOOTH (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetService: java.util.List getConnectedDevices()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetService: int getConnectionState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getConnectedDevices()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHeadsetPhone$Stub: android.os.IBinder asBinder()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.AtPhonebook: boolean getCheckingAccessPermission()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.a2dp.A2dpStateMachine: java.util.List getDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothPan: int getConnectionState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.a2dp.A2dpService: java.lang.String getName()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.util.List getConnectedDevices()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetPhoneState: int getNumActiveCall()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetooth$Stub: android.os.IBinder asBinder()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetooth$Stub$Proxy: int getDiscoverableTimeout()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService: int getProfileConnectionState(int)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService: int getState()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService: int getDiscoverableTimeout()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.Config: java.lang.Class[] getSupportedProfiles()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetStateMachine: java.util.List getConnectedDevices()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getContactsSize()> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList loadCallHistoryList(int)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetService: java.lang.String getName()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetPhoneState: int getBatteryCharge()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.Utils: byte[] getByteAddress(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hid.HidService: com.android.bluetooth.hid.HidService getHidService()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.opp.BluetoothOppPreference: java.lang.String getName(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothSocket: java.io.InputStream getInputStream()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothClass: int getMajorDeviceClass()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.opp.BluetoothOppManager: int getBatchSize()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothTetheringDataTracker: int getDefaultGatewayAddr()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothPbap: android.bluetooth.BluetoothDevice getClient()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.lang.String getOwnerPhoneNumberVcard(boolean,byte[])> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetPhoneState: int getSignal()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetService: int getPriority(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothSocket: java.io.OutputStream getOutputStream()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: android.os.ParcelUuid[] getUuids()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getHealthDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: java.lang.String createOneEntry(boolean)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getConnectedHealthDevices()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String getProfileName(android.content.Context)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.btservice.ProfileService$IProfileServiceBinder initBinder()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothTetheringDataTracker: android.net.NetworkInfo getNetworkInfo()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: java.lang.String getAlias()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothDevice: java.lang.String getAliasName()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hdp.HealthService: java.lang.String getName()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothAdapter: int getDiscoverableTimeout()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetPhoneState: int getSpeakerVolume()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothA2dp$Stub: android.os.IBinder asBinder()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hdp.HealthService: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.opp.BluetoothOppUtility: com.android.bluetooth.opp.BluetoothOppSendFileInfo getSendFileInfo(android.net.Uri)> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getCallHistorySize(int)> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.opp.BluetoothOppSendFileInfo: com.android.bluetooth.opp.BluetoothOppSendFileInfo generateFileInfo(android.content.Context,android.net.Uri,java.lang.String)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.Utils: byte[] getBytesFromAddress(java.lang.String)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hid.HidService: int getPriority(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.a2dp.A2dpService: java.util.List getDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.opp.BluetoothOppRfcommTransport: java.lang.String getRemoteAddress()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.opp.BluetoothOppBatch: com.android.bluetooth.opp.BluetoothOppShareInfo getPendingShare()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)> android.permission.BLUETOOTH (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothDevice: int getBondState()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothAdapter: android.bluetooth.IBluetooth getBluetoothService(android.bluetooth.IBluetoothManagerCallback)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.a2dp.A2dpStateMachine: java.util.List getConnectedDevices()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothTetheringDataTracker getInstance()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetStateMachine: int getAudioState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getScanMode()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: java.lang.String getNetworkOperator()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hdp.HealthService: java.util.List getHealthDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetService: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothPan: java.util.List getDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: int getState()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothDevice: android.bluetooth.IBluetooth getService()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])> android.permission.BLUETOOTH (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.opp.BluetoothOppManager: java.lang.String getDeviceName(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothStateChangeCallback$Stub: android.os.IBinder asBinder()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hid.HidService: java.lang.String getName()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: com.android.bluetooth.btservice.AdapterService getService()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getName()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetPhoneState: int getCallState()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothInputDevice: int getPriority(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelUuid[] getUuids()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetooth$Stub$Proxy: int getState()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.AtPhonebook: java.lang.String getLastDialledNumber()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothPbap$Stub: android.os.IBinder asBinder()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkProperties getLinkProperties()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothAdapter: java.lang.String getName()> (BLUETOOTH_INFORMATION)
<android.media.AudioManager: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)> android.permission.WAKE_LOCK (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothDevice: java.lang.String getAddress()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetooth$Stub$Proxy: int getBondState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothHealthAppConfiguration: int getRole()> (BLUETOOTH_INFORMATION)
<com.android.server.BluetoothManagerService: java.lang.String getAddress()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String createProfileVCard(android.content.Context,int,byte[])> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hid.HidService: int getConnectionState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.ProfileService: android.os.IBinder onBind(android.content.Intent)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterProperties: java.lang.String getName()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hid.HidService: java.util.List getDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingEncryptedRfcommWithServiceRecord(java.lang.String,java.util.UUID)> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothPan$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hdp.HealthService: java.util.List lookupHealthDevicesMatchingStates(int[])> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pbap.BluetoothPbapService: java.lang.String getRemoteDeviceName()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothUuid: int getServiceIdentifierFromParcelUuid(android.os.ParcelUuid)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.ProfileService: android.bluetooth.BluetoothDevice getDevice(byte[])> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: java.lang.String getErrorReason()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getAddress()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothPbap: int getState()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pbap.BluetoothPbapService$2: android.bluetooth.BluetoothDevice getClient()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothManagerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothHeadset: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothCallback$Stub: android.os.IBinder asBinder()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.opp.BluetoothOppManager: com.android.bluetooth.opp.BluetoothOppManager getInstance(android.content.Context)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterProperties: byte[] getAddress()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothInputDevice: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.a2dp.A2dpStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.Utils: java.lang.String getAddressStringFromByte(byte[])> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHeadset$Stub: android.os.IBinder asBinder()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothAdapter: int getConnectionState()> android.permission.BLUETOOTH (BLUETOOTH_INFORMATION)
<com.android.bluetooth.a2dp.A2dpService: com.android.bluetooth.btservice.ProfileService$IProfileServiceBinder initBinder()> (BLUETOOTH_INFORMATION)
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableBluetoothRegexs()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService: int getScanMode()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getPhonebookNameList(int)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetService: com.android.bluetooth.hfp.HeadsetService getHeadsetService()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.a2dp.A2dpService: int getConnectionState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetPhoneState: int getRoam()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.opp.BluetoothOppUtility: java.lang.String getStatusDescription(android.content.Context,int,java.lang.String)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothAdapter: int getScanMode()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: int getDeviceType()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothDevice: java.lang.String getName()> android.permission.BLUETOOTH (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hdp.HealthService: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getAudioState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getDiscoverableTimeout()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothHeadset: int getAudioState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.opp.BluetoothOppTransfer: int getBatchId()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHealthCallback$Stub: android.os.IBinder asBinder()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.a2dp.A2dpService: int getPriority(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothInputDevice: int getConnectionState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.util.List getConnectedHealthDevices()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hdp.HealthService: java.util.List getConnectedHealthDevices()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterProperties: int getBluetoothClass()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: java.lang.String getName()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothHealthAppConfiguration: java.lang.String getName()> (BLUETOOTH_INFORMATION)
<com.android.server.BluetoothManagerService: java.lang.String getName()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothPan: boolean isTetheringOn()> android.permission.BLUETOOTH (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: int getBondState()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: int getCount()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService: int getRemoteClass(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterProperties: android.bluetooth.BluetoothDevice[] getBondedDevices()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getAdapterConnectionState()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetooth$Stub$Proxy: int getProfileConnectionState(int)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.bluetooth.BluetoothDevice[] getBondedDevices()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothSocket: int getPort()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothSocket accept(int)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.a2dp.A2dpService: com.android.bluetooth.a2dp.A2dpService getA2dpService()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService: com.android.bluetooth.btservice.AdapterService getAdapterService()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothDevice getRemoteDevice()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.opp.BluetoothOppPreference: com.android.bluetooth.opp.BluetoothOppPreference getInstance(android.content.Context)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: short getRssi()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothAdapter: android.os.ParcelUuid[] getUuids()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pan.PanService: int getConnectionState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getConnectedDevices()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.a2dp.A2dpService: java.util.List getConnectedDevices()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: java.lang.String getSubscriberNumber()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getContactNamesByNumber(java.lang.String)> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getConnectedDevices()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothInputDevice: java.util.List getDevicesMatchingConnectionStates(int[])> android.permission.BLUETOOTH (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pan.PanService: java.util.List getConnectedDevices()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothClass: int getDeviceClass()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothAdapter: android.bluetooth.IBluetoothManager getBluetoothManager()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.RemoteDevices: android.bluetooth.BluetoothDevice getDevice(byte[])> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetooth$Stub$Proxy: android.bluetooth.BluetoothDevice[] getBondedDevices()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hid.HidService: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothManager$Stub: android.os.IBinder asBinder()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getConnectedDevices()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getName()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterProperties: android.os.ParcelUuid[] getUuids()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothPan: java.util.List getConnectedDevices()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService: android.bluetooth.BluetoothDevice[] getBondedDevices()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService: java.lang.String getAddress()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterProperties: int getScanMode()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (BLUETOOTH_INFORMATION)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableBluetoothRegexs()> android.permission.ACCESS_NETWORK_STATE (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetPhoneState: int getNumHeldCall()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothInputDevice: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothHealthAppConfiguration: int getDataType()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.ProfileService: java.lang.String getName()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetPhoneState: int getMicVolume()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetPhoneState: int getService()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.util.List getHealthDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterProperties: int getDiscoverableTimeout()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getName()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterProperties: int getState()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetService: int getAudioState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getConnectedDevices()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothHealth: java.util.List getDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothDevice: boolean getTrustState()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetooth$Stub$Proxy: int getScanMode()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.opp.BluetoothOppReceiveFileInfo: com.android.bluetooth.opp.BluetoothOppReceiveFileInfo generateFileInfo(android.content.Context,int)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothAdapter: int getState()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.hfp.HeadsetStateMachine: java.util.List getDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothManagerCallback$Stub: android.os.IBinder asBinder()> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothHealthAppConfiguration: int getChannelType()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getConnectedDevices()> android.permission.BLUETOOTH (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothPan$Stub: android.os.IBinder asBinder()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothHealth$Stub: android.os.IBinder asBinder()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.pan.PanService: java.util.List getDevicesMatchingConnectionStates(int[])> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: int getBluetoothClass()> (BLUETOOTH_INFORMATION)
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.util.List getConnectedDevices()> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.opp.BluetoothOppPreference: int getChannel(android.bluetooth.BluetoothDevice,int)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothDevice: int getServiceChannel(android.os.ParcelUuid)> (BLUETOOTH_INFORMATION)
<com.android.bluetooth.btservice.AdapterProperties: int getProfileConnectionState(int)> (BLUETOOTH_INFORMATION)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(byte[])> (BLUETOOTH_INFORMATION)


EMAIL:
<com.android.email.activity.MessagesAdapter$SearchResultsCursor: com.android.emailcommon.provider.Mailbox getSearchedMailbox()> (EMAIL)
<com.android.email.FolderProperties: int getMessageCountForCombinedMailbox(android.content.Context,long)> (EMAIL)
<com.android.email.activity.EmailActivity: android.content.Intent createOpenAccountIntent(android.app.Activity,long)> (EMAIL)
<com.android.email.activity.Welcome: android.content.Intent createOpenAccountInboxIntent(android.content.Context,long)> (EMAIL)
<com.android.email.Controller: long findOrCreateMailboxOfType(long,int)> (EMAIL)
<com.android.email.RefreshManager: boolean isRefreshingAnyMailboxListForTest()> (EMAIL)
<com.android.emailcommon.provider.Mailbox: com.android.emailcommon.provider.Mailbox restoreMailboxOfType(android.content.Context,long,int)> (EMAIL)
<com.android.email.activity.UIControllerBase: long getMailboxListMailboxId()> (EMAIL)
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: java.lang.String getMailboxDisplayName()> (EMAIL)
<com.android.email.activity.UIControllerBase: long getMessageListMailboxId()> (EMAIL)
<com.android.email.activity.EmailActivity: android.content.Intent createOpenMailboxIntent(android.app.Activity,long,long)> android.permission.STOP_APP_SWITCHES (EMAIL)
<com.android.email.activity.MailboxListFragment: long getInitialCurrentMailboxId()> (EMAIL)
<com.android.email.activity.MessageListFragment: com.android.emailcommon.provider.Mailbox getSearchedMailbox()> (EMAIL)
<com.android.email.RefreshManager: com.android.email.RefreshManager$Status getMailboxListStatusForTest(long)> (EMAIL)
<com.android.email.activity.EmailActivity: android.content.Intent createOpenMessageIntent(android.app.Activity,long,long,long)> (EMAIL)
<com.android.email.widget.EmailWidgetLoader$WidgetCursor: java.lang.String getMailboxName()> (EMAIL)
<com.android.email.widget.WidgetManager: long loadMailboxIdPref(android.content.Context,int)> (EMAIL)
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: long getMailboxId()> (EMAIL)
<com.android.email.activity.Welcome: android.content.Intent createOpenMessageIntent(android.content.Context,long,long,long)> (EMAIL)
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: int getMailboxMessageCount()> (EMAIL)
<com.android.email.MessageListContext: long getSearchedMailbox()> (EMAIL)
<com.android.email.Controller: com.android.emailcommon.provider.Mailbox getAttachmentMailbox()> (EMAIL)
<com.android.emailcommon.provider.Mailbox: com.android.emailcommon.provider.Mailbox restoreMailboxWithId(android.content.Context,long)> (EMAIL)
<com.android.email.FolderProperties: java.lang.String getCombinedMailboxName(long)> (EMAIL)
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: int getRecentMailboxCount()> (EMAIL)
<com.android.email.activity.UIControllerTwoPane: long getMailboxSettingsMailboxId()> (EMAIL)
<com.android.email.RefreshManager: long getLastMailboxListRefreshTime(long)> (EMAIL)
<com.android.email.activity.UIControllerSearchTwoPane: long getMailboxSettingsMailboxId()> (EMAIL)
<com.android.email.activity.MailboxListFragment: long getSelectedMailboxId()> (EMAIL)
<com.android.email.Controller: java.lang.String getMailboxServerName(android.content.Context,int)> (EMAIL)
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: long getMailboxId()> (EMAIL)
<com.android.email.Controller: com.android.emailcommon.provider.Mailbox getSearchMailbox(long)> (EMAIL)
<com.android.email.activity.MessageListFragment: long getMailboxId()> (EMAIL)
<com.android.email.activity.UIControllerOnePane: long getMailboxSettingsMailboxId()> (EMAIL)
<com.android.email.activity.UIControllerBase: com.android.email.activity.MailboxListFragment getMailboxListFragment()> (EMAIL)
<com.android.email.activity.MessageListFragment: com.android.emailcommon.provider.Mailbox getMailbox()> (EMAIL)
<com.android.emailcommon.provider.Mailbox: long findMailboxOfType(android.content.Context,long,int)> (EMAIL)
<com.android.email.MessageListContext: long getMailboxId()> (EMAIL)
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: long getMailboxId()> (EMAIL)

SYNCHRONIZATION_DATA:
<android.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_STATS (SYNCHRONIZATION_DATA)
<com.android.emailcommon.TrafficFlags: int getSyncFlags(android.content.Context,com.android.emailcommon.provider.Account)> (SYNCHRONIZATION_DATA)
<android.content.SyncStorageEngine: int getIsSyncable(android.accounts.Account,int,java.lang.String)> (SYNCHRONIZATION_DATA)
<com.android.internal.telephony.DataConnectionAc: int getRefCountSync()> (SYNCHRONIZATION_DATA)
<android.content.ContentService: android.content.SyncAdapterType[] getSyncAdapterTypes()> (SYNCHRONIZATION_DATA)
<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)> (SYNCHRONIZATION_DATA)
<com.android.exchange.ExchangeService$AccountObserver: java.lang.String getSyncableEasMailboxWhere()> (SYNCHRONIZATION_DATA)
<com.android.internal.telephony.DataConnectionAc: java.util.Collection getApnListSync()> (SYNCHRONIZATION_DATA)
<android.app.ContextImpl$ApplicationContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS (SYNCHRONIZATION_DATA)
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: long[] getSyncSamples()> (SYNCHRONIZATION_DATA)
<android.content.IContentService$Stub$Proxy: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS (SYNCHRONIZATION_DATA)
<android.content.ContentResolver: java.util.List getCurrentSyncs()> (SYNCHRONIZATION_DATA)
<android.content.SyncStorageEngine: int getSyncRandomOffset()> (SYNCHRONIZATION_DATA)
<com.coremedia.iso.boxes.SampleTableBox: com.coremedia.iso.boxes.SyncSampleBox getSyncSampleBox()> (SYNCHRONIZATION_DATA)
<android.test.mock.MockContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS (SYNCHRONIZATION_DATA)
<android.content.ContentService: int getIsSyncable(android.accounts.Account,java.lang.String)> (SYNCHRONIZATION_DATA)
<com.android.providers.contacts.TransactionContext: java.util.Set getUpdatedSyncStates()> (SYNCHRONIZATION_DATA)
<android.content.SyncStorageEngine: java.util.ArrayList getSyncHistory()> (SYNCHRONIZATION_DATA)
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getSyncKey()> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (SYNCHRONIZATION_DATA)
<android.content.SyncStorageEngine: java.util.ArrayList getSyncStatus()> (SYNCHRONIZATION_DATA)
<android.content.SyncStorageEngine: android.content.SyncStatusInfo getOrCreateSyncStatus(android.content.SyncStorageEngine$AuthorityInfo)> (SYNCHRONIZATION_DATA)
<com.android.mms.dom.smil.ElementParallelTimeContainerImpl: java.lang.String getEndSync()> (SYNCHRONIZATION_DATA)
<android.content.SyncStatusInfo: long getPeriodicSyncTime(int)> (SYNCHRONIZATION_DATA)
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()> android.permission.READ_SYNC_STATS (SYNCHRONIZATION_DATA)
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getSyncKey()> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (SYNCHRONIZATION_DATA)
<android.app.ContextImpl$ApplicationContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS (SYNCHRONIZATION_DATA)
<com.android.server.BackupManagerService: android.app.IBackupAgent bindToAgentSynchronous(android.content.pm.ApplicationInfo,int)> (SYNCHRONIZATION_DATA)
<com.android.internal.telephony.DataConnectionAc: com.android.internal.telephony.ApnSetting getApnSettingSync()> (SYNCHRONIZATION_DATA)
<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()> (SYNCHRONIZATION_DATA)
<com.android.internal.telephony.DataConnectionAc: android.net.LinkCapabilities getLinkCapabilitiesSync()> (SYNCHRONIZATION_DATA)
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS (SYNCHRONIZATION_DATA)
<android.os.CommonTimeConfig: int getClientSyncInterval()> (SYNCHRONIZATION_DATA)
<android.content.ContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_STATS (SYNCHRONIZATION_DATA)
<com.google.android.picasasync.PicasaFacade: android.net.Uri getSyncRequestUri()> (SYNCHRONIZATION_DATA)
<android.test.mock.MockContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_STATS (SYNCHRONIZATION_DATA)
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS (SYNCHRONIZATION_DATA)
<com.android.contacts.list.CustomContactListFilterActivity: int getSyncMode(com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay)> (SYNCHRONIZATION_DATA)
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: long[] getSyncSamples()> (SYNCHRONIZATION_DATA)
<com.android.providers.calendar.CalendarInstancesHelper: java.lang.String getSyncIdKey(java.lang.String,long)> (SYNCHRONIZATION_DATA)
<android.test.mock.MockContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS (SYNCHRONIZATION_DATA)
<com.android.exchange.adapter.ProvisionParser: java.lang.String getSecuritySyncKey()> (SYNCHRONIZATION_DATA)
<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_STATS (SYNCHRONIZATION_DATA)
<android.content.SyncStorageEngine: java.util.List getPeriodicSyncs(android.accounts.Account,int,java.lang.String)> (SYNCHRONIZATION_DATA)
<android.test.mock.MockContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS (SYNCHRONIZATION_DATA)
<android.content.SyncManager: android.content.SyncAdapterType[] getSyncAdapterTypes(int)> (SYNCHRONIZATION_DATA)
<android.content.IContentService$Stub$Proxy: android.content.SyncAdapterType[] getSyncAdapterTypes()> (SYNCHRONIZATION_DATA)
<com.android.exchange.adapter.AbstractSyncAdapter: java.lang.String getSyncKey()> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (SYNCHRONIZATION_DATA)
<com.android.exchange.AbstractSyncService: java.lang.Object getSynchronizer()> (SYNCHRONIZATION_DATA)
<android.content.SyncManager: android.content.SyncStorageEngine getSyncStorageEngine()> (SYNCHRONIZATION_DATA)
<com.android.providers.calendar.SQLiteContentProvider: boolean getIsCallerSyncAdapter(android.net.Uri)> (SYNCHRONIZATION_DATA)
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getSyncKey()> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (SYNCHRONIZATION_DATA)
<android.app.ContextImpl$ApplicationContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS (SYNCHRONIZATION_DATA)
<android.content.SyncContext: android.os.IBinder getSyncContextBinder()> (SYNCHRONIZATION_DATA)
<com.android.gallery3d.picasasource.PicasaAlbumSet$PicasaSyncTaskFuture: int getSyncResult()> (SYNCHRONIZATION_DATA)
<android.content.IContentService$Stub$Proxy: java.util.List getCurrentSyncs()> (SYNCHRONIZATION_DATA)
<com.android.contacts.util.AsyncTaskExecutors: com.android.contacts.util.AsyncTaskExecutor createAsyncTaskExecutor()> (SYNCHRONIZATION_DATA)
<com.android.internal.telephony.DataConnectionAc: android.app.PendingIntent getReconnectIntentSync()> (SYNCHRONIZATION_DATA)
<com.android.exchange.adapter.PingParser: int getSyncStatus()> (SYNCHRONIZATION_DATA)
<android.app.ContextImpl$ApplicationContentResolver: android.content.SyncInfo getCurrentSync()> android.permission.READ_SYNC_STATS (SYNCHRONIZATION_DATA)
<com.android.email.Preferences: boolean getHasShownRequireManualSync(android.content.Context,com.android.emailcommon.provider.Account)> (SYNCHRONIZATION_DATA)
<com.android.internal.telephony.DataConnectionAc: int getCidSync()> (SYNCHRONIZATION_DATA)
<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult goAsync()> (SYNCHRONIZATION_DATA)
<com.android.server.display.DisplayAdapter: com.android.server.display.DisplayManagerService$SyncRoot getSyncRoot()> (SYNCHRONIZATION_DATA)
<android.content.SyncStorageEngine: java.util.List getCurrentSyncs(int)> (SYNCHRONIZATION_DATA)
<com.android.exchange.adapter.PingParser: java.util.ArrayList getSyncList()> (SYNCHRONIZATION_DATA)
<android.content.AbstractThreadedSyncAdapter: android.os.IBinder getSyncAdapterBinder()> (SYNCHRONIZATION_DATA)
<android.content.IContentService$Stub$Proxy: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS (SYNCHRONIZATION_DATA)
<android.webkit.WebStorageClassic: java.util.Collection getOriginsSync()> (SYNCHRONIZATION_DATA)
<android.test.mock.MockContentResolver: android.content.SyncInfo getCurrentSync()> android.permission.READ_SYNC_STATS (SYNCHRONIZATION_DATA)
<com.android.email.activity.MessageViewFragmentBase: com.android.emailcommon.provider.EmailContent$Message reloadMessageSync(android.app.Activity)> (SYNCHRONIZATION_DATA)
<android.content.ContentService: java.util.List getCurrentSyncs()> (SYNCHRONIZATION_DATA)
<com.android.exchange.adapter.CalendarSyncAdapter: java.lang.String getSyncKey()> (SYNCHRONIZATION_DATA)
<android.net.wifi.WifiStateMachine: java.util.List syncGetScanResultsList()> (SYNCHRONIZATION_DATA)
<com.android.internal.telephony.DataConnectionAc: android.net.LinkProperties getLinkPropertiesSync()> (SYNCHRONIZATION_DATA)
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: boolean getShouldSync()> (SYNCHRONIZATION_DATA)
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.AsyncDialog getAsyncDialog()> (SYNCHRONIZATION_DATA)
<android.content.ContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (SYNCHRONIZATION_DATA)
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS (SYNCHRONIZATION_DATA)

SMS_MMS:
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> (SMS_MMS)
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByFileName(java.lang.String)> (SMS_MMS)
<com.google.android.mms.util.AbstractCache: java.lang.Object get(java.lang.Object)> (SMS_MMS)
<com.google.android.mms.pdu.NotificationInd: long getExpiry()> (SMS_MMS)
<com.google.android.mms.pdu.PduHeaders: byte[] getTextString(int)> (SMS_MMS)
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> (SMS_MMS)
<com.google.android.mms.pdu.DeliveryInd: long getDate()> (SMS_MMS)
<com.google.android.mms.pdu.PduBody: int getPartIndex(com.google.android.mms.pdu.PduPart)> (SMS_MMS)
<com.google.android.mms.pdu.GenericPdu: com.google.android.mms.pdu.EncodedStringValue getFrom()> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: byte[] getData()> (SMS_MMS)
<com.google.android.mms.pdu.ReadOrigInd: int getReadStatus()> (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: byte[] getTransactionId()> (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: com.google.android.mms.pdu.EncodedStringValue getRetrieveText()> (SMS_MMS)
<com.google.android.mms.pdu.SendReq: byte[] getTransactionId()> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: byte[] getContentDisposition()> (SMS_MMS)
<com.google.android.mms.pdu.ReadRecInd: long getDate()> (SMS_MMS)
<com.google.android.mms.pdu.PduParser: byte[] getWapString(java.io.ByteArrayInputStream,int)> (SMS_MMS)
<com.google.android.mms.pdu.NotificationInd: com.google.android.mms.pdu.EncodedStringValue getFrom()> (SMS_MMS)
<com.google.android.mms.pdu.PduParser: com.google.android.mms.pdu.PduHeaders parseHeaders(java.io.ByteArrayInputStream)> (SMS_MMS)
<com.google.android.mms.pdu.SendReq: com.google.android.mms.pdu.EncodedStringValue[] getCc()> (SMS_MMS)
<com.google.android.mms.pdu.MultimediaMessagePdu: long getDate()> (SMS_MMS)
<com.google.android.mms.pdu.SendConf: byte[] getTransactionId()> (SMS_MMS)
<com.google.android.mms.pdu.SendConf: int getResponseStatus()> (SMS_MMS)
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByContentId(java.lang.String)> (SMS_MMS)
<com.google.android.mms.pdu.GenericPdu: int getMessageType()> (SMS_MMS)
<com.google.android.mms.pdu.ReadOrigInd: byte[] getMessageId()> (SMS_MMS)
<com.google.android.mms.pdu.NotificationInd: int getDeliveryReport()> (SMS_MMS)
<com.google.android.mms.pdu.AcknowledgeInd: int getReportAllowed()> (SMS_MMS)
<com.google.android.mms.pdu.NotificationInd: byte[] getMessageClass()> (SMS_MMS)
<com.google.android.mms.pdu.PduPersister: android.database.Cursor getPendingMessages(long)> (SMS_MMS)
<com.google.android.mms.pdu.MultimediaMessagePdu: int getPriority()> (SMS_MMS)
<com.google.android.mms.pdu.SendReq: int getDeliveryReport()> (SMS_MMS)
<com.google.android.mms.pdu.ReadRecInd: byte[] getMessageId()> (SMS_MMS)
<com.google.android.mms.pdu.EncodedStringValue: byte[] getTextString()> (SMS_MMS)
<com.google.android.mms.pdu.ReadOrigInd: long getDate()> (SMS_MMS)
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByContentLocation(java.lang.String)> (SMS_MMS)
<com.google.android.mms.pdu.SendReq: byte[] getContentType()> (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: com.google.android.mms.pdu.EncodedStringValue getFrom()> (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: byte[] getMessageClass()> (SMS_MMS)
<com.google.android.mms.pdu.PduHeaders: long getLongInteger(int)> (SMS_MMS)
<com.google.android.mms.pdu.NotifyRespInd: byte[] getTransactionId()> (SMS_MMS)
<com.google.android.mms.pdu.SendReq: long getExpiry()> (SMS_MMS)
<com.google.android.mms.util.PduCacheEntry: long getThreadId()> (SMS_MMS)
<com.google.android.mms.pdu.SendReq: com.google.android.mms.pdu.EncodedStringValue[] getBcc()> (SMS_MMS)
<com.google.android.mms.pdu.EncodedStringValue: int getCharacterSet()> (SMS_MMS)
<com.google.android.mms.ContentType: java.util.ArrayList getImageTypes()> (SMS_MMS)
<com.google.android.mms.ContentType: java.util.ArrayList getAudioTypes()> (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: com.google.android.mms.pdu.EncodedStringValue[] getCc()> (SMS_MMS)
<com.google.android.mms.pdu.NotificationInd: byte[] getContentLocation()> (SMS_MMS)
<com.google.android.mms.util.PduCacheEntry: int getMessageBox()> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: byte[] getName()> (SMS_MMS)
<com.google.android.mms.pdu.SendConf: byte[] getMessageId()> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: int getCharset()> (SMS_MMS)
<com.google.android.mms.pdu.DeliveryInd: byte[] getMessageId()> android.permission.STOP_APP_SWITCHES (SMS_MMS)
<com.google.android.mms.pdu.ReadRecInd: int getReadStatus()> android.permission.STOP_APP_SWITCHES (SMS_MMS)
<com.google.android.mms.pdu.NotificationInd: int getContentClass()> (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: byte[] getContentType()> (SMS_MMS)
<com.google.android.mms.pdu.PduHeaders: int getOctet(int)> (SMS_MMS)
<com.google.android.mms.pdu.SendReq: byte[] getMessageClass()> (SMS_MMS)
<com.google.android.mms.pdu.AcknowledgeInd: byte[] getTransactionId()> (SMS_MMS)
<com.google.android.mms.pdu.ReadOrigInd: com.google.android.mms.pdu.EncodedStringValue[] getTo()> (SMS_MMS)
<com.google.android.mms.pdu.MultimediaMessagePdu: com.google.android.mms.pdu.PduBody getBody()> (SMS_MMS)
<com.google.android.mms.pdu.NotificationInd: com.google.android.mms.pdu.EncodedStringValue getSubject()> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: byte[] getContentId()> (SMS_MMS)
<com.google.android.mms.util.SqliteWrapper: android.database.Cursor query(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (SMS_MMS)
<com.google.android.mms.util.SqliteWrapper: android.net.Uri insert(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues)> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: byte[] getContentType()> (SMS_MMS)
<com.google.android.mms.pdu.NotificationInd: byte[] getTransactionId()> (SMS_MMS)
<com.google.android.mms.pdu.NotifyRespInd: int getReportAllowed()> (SMS_MMS)
<com.google.android.mms.util.PduCache: com.google.android.mms.util.PduCache getInstance()> (SMS_MMS)
<com.google.android.mms.pdu.PduBody: int getPartsNum()> (SMS_MMS)
<com.google.android.mms.pdu.SendReq: int getReadReport()> (SMS_MMS)
<com.google.android.mms.pdu.ReadOrigInd: com.google.android.mms.pdu.EncodedStringValue getFrom()> (SMS_MMS)
<com.android.providers.telephony.MmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: int getDeliveryReport()> (SMS_MMS)
<com.google.android.mms.pdu.PduHeaders: com.google.android.mms.pdu.EncodedStringValue getEncodedStringValue(int)> (SMS_MMS)
<com.google.android.mms.pdu.SendReq: long getMessageSize()> (SMS_MMS)
<com.google.android.mms.util.DrmConvertSession: byte[] convert(byte[],int)> (SMS_MMS)
<com.google.android.mms.pdu.MultimediaMessagePdu: com.google.android.mms.pdu.EncodedStringValue getSubject()> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: byte[] getContentLocation()> (SMS_MMS)
<com.google.android.mms.pdu.DeliveryInd: int getStatus()> (SMS_MMS)
<com.google.android.mms.pdu.ReadRecInd: com.google.android.mms.pdu.EncodedStringValue[] getTo()> (SMS_MMS)
<com.android.providers.telephony.MmsSmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (SMS_MMS)
<com.google.android.mms.pdu.NotificationInd: long getMessageSize()> (SMS_MMS)
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByName(java.lang.String)> (SMS_MMS)
<com.google.android.mms.pdu.DeliveryInd: com.google.android.mms.pdu.EncodedStringValue[] getTo()> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: android.net.Uri getDataUri()> (SMS_MMS)
<com.google.android.mms.util.PduCacheEntry: com.google.android.mms.pdu.GenericPdu getPdu()> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: byte[] getContentTransferEncoding()> (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: byte[] getMessageId()> (SMS_MMS)
<com.google.android.mms.ContentType: java.util.ArrayList getSupportedTypes()> (SMS_MMS)
<com.google.android.mms.pdu.MultimediaMessagePdu: com.google.android.mms.pdu.EncodedStringValue[] getTo()> (SMS_MMS)
<com.google.android.mms.pdu.NotifyRespInd: int getStatus()> (SMS_MMS)
<com.google.android.mms.pdu.GenericPdu: int getMmsVersion()> (SMS_MMS)
<com.google.android.mms.pdu.PduPersister: byte[] getBytes(java.lang.String)> (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: int getRetrieveStatus()> (SMS_MMS)
<com.google.android.mms.pdu.RetrieveConf: int getReadReport()> (SMS_MMS)
<com.google.android.mms.pdu.PduComposer$PositionMarker: int getLength()> (SMS_MMS)
<com.google.android.mms.pdu.GenericPdu: com.google.android.mms.pdu.PduHeaders getPduHeaders()> (SMS_MMS)
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPart(int)> (SMS_MMS)
<com.google.android.mms.pdu.PduComposer: byte[] make()> (SMS_MMS)
<com.google.android.mms.pdu.PduHeaders: com.google.android.mms.pdu.EncodedStringValue[] getEncodedStringValues(int)> (SMS_MMS)
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.PduPersister getPduPersister(android.content.Context)> (SMS_MMS)
<com.google.android.mms.pdu.Base64: byte[] discardNonBase64(byte[])> (SMS_MMS)
<com.google.android.mms.ContentType: java.util.ArrayList getVideoTypes()> (SMS_MMS)
<com.google.android.mms.pdu.PduPart: byte[] getFilename()> (SMS_MMS)

CONTACT_INFORMATION:
<com.android.contacts.util.StreamItemEntry: long getId()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: java.lang.String getViewGroupActivity()> (CONTACT_INFORMATION)
<com.android.contacts.widget.IndexerListAdapter: int getPinnedHeaderCount()> (CONTACT_INFORMATION)
<com.android.contacts.widget.IndexerListAdapter: int getPositionForSection(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$NicknameKindBuilder: java.lang.String getTagName()> (CONTACT_INFORMATION)
<com.android.contacts.model.AccountTypeManagerImpl: com.android.contacts.model.dataitem.DataKind getKindOrFallback(java.lang.String,java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.ContactPresenceIconUtil: android.graphics.drawable.Drawable getPresenceIcon(android.content.Context,int)> (CONTACT_INFORMATION)
<com.android.vcard.VCardUtils: java.lang.String getPropertyNameForIm(int)> (CONTACT_INFORMATION)
<com.android.contacts.activities.ActionBarAdapter: int getCurrentTab()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$NameKindBuilder: java.lang.String getTagName()> (CONTACT_INFORMATION)
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getPersonUri(int)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getResourceText(android.content.Context,java.lang.String,int,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getEditContactActivityClassName()> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.util.ExpirableCache: com.android.contacts.util.ExpirableCache$CachedValue getCachedValue(java.lang.Object)> (CONTACT_INFORMATION)
<com.android.contacts.editor.EventFieldEditorView: android.app.Dialog createDialog(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListAdapter: int getViewTypeCount()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneticGivenName()> (CONTACT_INFORMATION)
<com.android.contacts.detail.StreamItemAdapter: java.lang.Object getItem(int)> (CONTACT_INFORMATION)
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDeltaList fromQuery(android.net.Uri,android.content.ContentResolver,java.lang.String,java.lang.String[],java.lang.String)> (CONTACT_INFORMATION)
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: java.util.ArrayList getContentValues()> (CONTACT_INFORMATION)
<com.android.contacts.preference.ContactsPreferences: int getDefaultDisplayOrder()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDelta getByRawContactId(java.lang.Long)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.String toString()> (CONTACT_INFORMATION)
<com.android.contacts.interactions.ContactDeletionInteraction: android.app.LoaderManager getLoaderManager()> (CONTACT_INFORMATION)
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.dataitem.DataKind getKind()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeId(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.StructuredPostalDataItem: java.lang.String getFormattedAddress()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.IntentProvider: com.android.contacts.calllog.IntentProvider getCallDetailIntentProvider(com.android.contacts.calllog.CallLogAdapter,int,long,int)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactLocaleUtils$ContactLocaleUtilsBase: java.util.Iterator getNameLookupKeys(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorUtils: com.android.contacts.model.account.AccountWithDataSet getCreatedAccount(int,android.content.Intent)> (CONTACT_INFORMATION)
<com.android.contacts.interactions.TestLoaderManager: android.content.Loader restartLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactsRequest: java.lang.CharSequence getActivityTitle()> (CONTACT_INFORMATION)
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: com.android.contacts.model.account.AccountTypeWithDataSet getAccountTypeAndDataSet()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: int getViewTypeCount()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountTypeWithDataSet: com.android.contacts.model.account.AccountTypeWithDataSet get(java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.calllog.IntentProvider: com.android.contacts.calllog.IntentProvider getPlayVoicemailIntentProvider(long,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneticMiddleName()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContact: com.android.contacts.model.account.AccountType getAccountType()> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getStreamItems()> (CONTACT_INFORMATION)
<com.android.contacts.editor.GroupMembershipView$GroupSelectionItem: long getGroupId()> (CONTACT_INFORMATION)
<com.android.contacts.ContactsUtils: android.content.Intent getInvitableIntent(com.android.contacts.model.account.AccountType,android.net.Uri)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListFilterController: com.android.contacts.list.ContactListFilterController getInstance(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactTileListFragment$2: int getApproximateTileWidth()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getAsString(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.editor.PhotoActionPopup$ChoiceListItem: int getId()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.CharSequence getTypeLabel(android.content.res.Resources,java.lang.Integer,java.lang.CharSequence)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.GoogleAccountType: java.lang.String getViewContactNotifyServicePackageName()> (CONTACT_INFORMATION)
<com.android.contacts.ContactsApplication: java.lang.Object getSystemService(java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ProfileDatabaseHelper: com.android.providers.contacts.ProfileDatabaseHelper getInstance(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.editor.GroupMembershipView$GroupMembershipAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.SpecialCharSequenceMgr$SimContactQueryCookie: android.widget.EditText getTextField()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$RelationActionInflater: int getTypeLabelResource(java.lang.Integer)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListAdapter: int getContactNameDisplayOrder()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactTileAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.account.AccountType getRawContactAccountType(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailDisplayUtils: android.view.View addStreamItemText(android.content.Context,com.android.contacts.util.StreamItemEntry,android.view.View)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListAdapter: com.android.contacts.list.ContactListFilter getFilter()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindWebsite(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.PhotoDataItem: byte[] getPhoto()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ProfileDatabaseHelper: com.android.providers.contacts.ProfileDatabaseHelper getNewInstanceForTest(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$PhoneKindBuilder: java.lang.String getTagName()> (CONTACT_INFORMATION)
<com.android.providers.contacts.PhotoProcessor: byte[] getThumbnailPhotoBytes()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ReorderingCursorWrapper: int getInt(int)> (CONTACT_INFORMATION)
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getSectionForPosition(int)> (CONTACT_INFORMATION)
<com.android.vcard.VCardUtils: java.lang.String getPhoneTypeString(java.lang.Integer)> (CONTACT_INFORMATION)
<com.android.contacts.util.StreamItemEntry: java.lang.String getDataSet()> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailContentProvider$UriData: com.android.providers.contacts.VoicemailUriType getUriType()> (CONTACT_INFORMATION)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.calllog.CallDetailHistoryAdapter: int getViewTypeCount()> (CONTACT_INFORMATION)
<com.android.providers.contacts.PhotoProcessor: byte[] getDisplayPhotoBytes()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListFragment: android.widget.ListView getListView()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.dialog.ClearFrequentsDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.util.ContactMatcher$MatchScore: int getScore()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta: java.lang.String getAccountName()> (CONTACT_INFORMATION)
<com.android.providers.contacts.AbstractContactsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getMimetype()> (CONTACT_INFORMATION)
<com.android.contacts.interactions.ImportExportDialogFragment$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailLayoutController: com.android.contacts.activities.ContactDetailActivity$FragmentKeyListener getCurrentPage()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListItemView: android.widget.TextView getNameTextView()> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.util.ContactMatcher$MatchScore: long getContactId()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredName(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.String getCompany(android.content.Context,com.android.contacts.model.Contact)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListItemView: android.widget.TextView getDataView()> (CONTACT_INFORMATION)
<com.android.phone.ContactsAsyncHelper$ImageTracker: int getPhotoState()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredPostal(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.model.AccountTypeManagerImpl: java.util.List getAccounts(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.ResolveCache: java.lang.CharSequence getDescription(com.android.contacts.quickcontact.Action)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.String getLabelColumn()> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupListItem: java.lang.String getAccountName()> (CONTACT_INFORMATION)
<com.android.providers.contacts.util.DbQueryUtils: java.lang.String getEqualityClause(java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactDirectoryManager: com.android.providers.contacts.ContactsDatabaseHelper getDbHelper()> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntry: java.lang.String getDisplayName()> (CONTACT_INFORMATION)
<com.android.contacts.list.DirectoryPartition: java.lang.String getDirectoryType()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.CallTypeIconsView: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.account.AccountType$EditType getType()> (CONTACT_INFORMATION)
<com.android.contacts.util.StructuredPostalUtils: android.net.Uri getPostalAddressUri(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContact: java.util.List getDataItems()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: int getMaxDisplayPhotoDim()> (CONTACT_INFORMATION)
<com.android.contacts.ContactsApplication: android.content.ContentResolver getContentResolver()> (CONTACT_INFORMATION)
<com.android.contacts.interactions.PhoneNumberInteraction: android.content.CursorLoader getLoader()> (CONTACT_INFORMATION)
<com.android.contacts.interactions.GroupDeletionDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: boolean getUseStrictPhoneNumberComparisonForTest()> (CONTACT_INFORMATION)
<com.android.contacts.list.PhoneFavoriteMergedAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (CONTACT_INFORMATION)
<gov.nist.javax.sip.header.Contact: gov.nist.javax.sip.header.ContactList getContactList()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListAdapter: int getSelectedContactPosition()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneNumber()> (CONTACT_INFORMATION)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (CONTACT_INFORMATION)
<com.android.contacts.util.StopWatch: com.android.contacts.util.StopWatch getNullStopWatch()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$PostalActionInflater: int getTypeLabelResource(java.lang.Integer)> (CONTACT_INFORMATION)
<com.android.mms.data.Contact: byte[] access$1700(com.android.mms.data.Contact)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: java.lang.ThreadLocal getTransactionHolder()> (CONTACT_INFORMATION)
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.RawContactDelta$ValuesDelta getValues()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailDisplayUtils$StreamPhotoTag: android.net.Uri getStreamItemPhotoUri()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.String getPhoneticName(android.content.Context,com.android.contacts.model.Contact)> (CONTACT_INFORMATION)
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.AccountTypeManager createAccountTypeManager(android.content.Context)> (CONTACT_INFORMATION)
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()> (CONTACT_INFORMATION)
<com.android.contacts.util.StreamItemEntry: java.lang.CharSequence getDecodedText()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.GoogleAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEmail(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.util.AccountsListAdapter: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(android.net.Uri)> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.QuickContactListFragment$1: long getItemId(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNote(android.content.Context)> (CONTACT_INFORMATION)
<com.android.common.contacts.BaseEmailAddressAdapter$DirectoryPartitionFilter: int getLimit()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: com.android.contacts.model.account.AccountType getItem(int)> (CONTACT_INFORMATION)
<com.android.internal.telephony.PhoneProxy: boolean getIccRecordsLoaded()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListItemView: android.widget.TextView getPhoneticNameTextView()> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailStatusHelperImpl: int getNumberActivityVoicemailSources(android.database.Cursor)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredName(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.list.PhoneFavoriteMergedAdapter: java.lang.Object[] getSections()> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: int getDirectoryExportSupport()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: int getDisplayNameSource()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListFragment: android.view.View getView()> (CONTACT_INFORMATION)
<com.android.mms.data.Contact: com.android.mms.data.Contact get(java.lang.String,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta: java.lang.Long getRawContactId()> (CONTACT_INFORMATION)
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: java.lang.Object getItem(int)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment: android.content.Context getContext()> (CONTACT_INFORMATION)
<android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)> (CONTACT_INFORMATION)
<com.android.contacts.calllog.CallLogFragment: com.android.contacts.calllog.CallLogAdapter getAdapter()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDeltaList: java.lang.Long getRawContactId(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: long getFirstWritableRawContactId(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindWebsite(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.list.EmailAddressListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: com.android.contacts.model.dataitem.DataKind getKindForMimetype(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getDisplayLabel(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactBrowseListFragment: android.net.Uri getSelectedContactUri()> (CONTACT_INFORMATION)
<com.android.contacts.ContactStatusUtil: java.lang.String getStatusString(android.content.Context,int)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getSuperPrimaryEntry(java.lang.String,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupBrowseListAdapter: android.net.Uri getSelectedGroup()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$NetworkTitleViewEntry: java.lang.CharSequence getLabel()> (CONTACT_INFORMATION)
<com.android.providers.contacts.DefaultCallLogInsertionHelper: java.lang.String getGeocodedLocationFor(java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.widget.PinnedHeaderListView: float getTopFadingEdgeStrength()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta: java.util.ArrayList getContentValues()> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: java.lang.String getDirectoryAccountName()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindIm(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: java.lang.Object getItem(int)> (CONTACT_INFORMATION)
<com.android.contacts.activities.ActionBarAdapter: java.lang.String getQueryString()> (CONTACT_INFORMATION)
<com.android.contacts.model.AccountTypeManagerImpl: java.util.List getGroupWritableAccounts()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: int getPhoneType()> (CONTACT_INFORMATION)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact get(java.lang.String,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListAdapter: android.view.View newHeaderView(android.content.Context,int,android.database.Cursor,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListAdapter: long getSelectedContactId()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.PhoneNumberHelper: java.lang.CharSequence getDisplayNumber(java.lang.CharSequence,java.lang.CharSequence)> android.permission.READ_PHONE_STATE (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListAdapter: android.view.View createPinnedSectionHeaderView(android.content.Context,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForSip()> (CONTACT_INFORMATION)
<com.android.vcard.VCardComposer: java.lang.String createOneEntry(java.lang.reflect.Method)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListAdapter: android.net.Uri getFirstContactUri()> (CONTACT_INFORMATION)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchSuggestionsQuery(android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.ContactDirectoryManager getContactDirectoryManagerForTest()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhone(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: java.lang.Exception getException()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: com.android.contacts.detail.ContactDetailFragment$ViewEntry getItem(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$EmailActionInflater: int getTypeLabelResource(java.lang.Integer)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoto(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.calllog.CallTypeHelper: java.lang.CharSequence getCallTypeText(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getInvitableAccountTypes()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getUseStrictPhoneNumberComparisonParameter()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListFragment: com.android.contacts.widget.ContextMenuAdapter getContextMenuAdapter()> (CONTACT_INFORMATION)
<com.android.contacts.activities.DialtactsActivity$ViewPagerAdapter: android.app.Fragment getItem(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$WebsiteKindBuilder: java.lang.String getTagName()> (CONTACT_INFORMATION)
<com.android.contacts.model.AccountTypeManagerImpl$InvitableAccountTypeCache: java.util.Map getCachedValue()> (CONTACT_INFORMATION)
<com.android.contacts.editor.ViewIdGenerator: int getId(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.RawContactDelta$ValuesDelta,int)> (CONTACT_INFORMATION)
<com.android.contacts.util.StreamItemEntry: java.lang.String getLabelRes()> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntry$WebsiteData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackFragment$ActivityReference: android.app.Activity get()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListFilterControllerImpl: com.android.contacts.list.ContactListFilter getFilter()> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupEditorFragment$Member: java.lang.String getDisplayName()> (CONTACT_INFORMATION)
<com.android.contacts.ContactsUtils: android.net.Uri getCallUri(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.util.BitmapUtil: int getSmallerExtentFromBytes(byte[])> (CONTACT_INFORMATION)
<android.provider.Contacts$Organizations: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)> (CONTACT_INFORMATION)
<com.android.mms.data.Contact$ContactsCache: java.util.List getContactInfoForPhoneUris(android.os.Parcelable[])> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (CONTACT_INFORMATION)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailDisplayUtils: android.text.Html$ImageGetter getImageGetter(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContact: com.android.contacts.model.RawContact$NamedDataItem addNamedDataItemValues(android.net.Uri,android.content.ContentValues)> (CONTACT_INFORMATION)
<com.android.providers.contacts.util.Clock: com.android.providers.contacts.util.Clock getInstance()> (CONTACT_INFORMATION)
<com.android.contacts.GroupMetaData: long getGroupId()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactLocaleUtils$ChineseContactUtils: java.util.Iterator getNameLookupKeys(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.ContactsActivity: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListItemView: android.widget.TextView getLabelView()> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.QuickContactListFragment$1: int getCount()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactLocaleUtils: java.util.Iterator getNameLookupKeys(java.lang.String,int)> (CONTACT_INFORMATION)
<com.android.vcard.VCardParserImpl_V21: java.lang.String getVersionString()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)> (CONTACT_INFORMATION)
<com.android.vcard.VCardParserImpl_V30: java.lang.String getVersionString()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewStreamItemActivity()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.CallLogListItemViews: com.android.contacts.calllog.CallLogListItemViews createForTest(android.content.Context)> (CONTACT_INFORMATION)
<com.android.vcard.VCardParserImpl_V40: java.lang.String getVersionString()> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: java.lang.String getLookupKey()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListAdapter: com.android.contacts.ContactPhotoManager getPhotoLoader()> (CONTACT_INFORMATION)
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: byte[] getPhotoByteArray()> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.ImDataItem: java.lang.Integer getProtocol()> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.ContactAggregator$NameLookupSelectionBuilder: java.lang.String getSelection()> (CONTACT_INFORMATION)
<com.android.providers.contacts.PhotoStore: long getTotalSize()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getProperty(java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListAdapter: java.lang.String[] getProjection(boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ReorderingCursorWrapper: double getDouble(int)> (CONTACT_INFORMATION)
<com.android.contacts.util.AccountsListAdapter: long getItemId(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.account.AccountType getAccountType(com.android.contacts.model.AccountTypeManager)> (CONTACT_INFORMATION)
<com.android.contacts.list.PhoneFavoriteFragment$ContactTileAdapterListener: int getApproximateTileWidth()> (CONTACT_INFORMATION)
<com.android.mms.data.Contact: com.android.mms.data.Contact getMe(boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContact: android.content.ContentValues getValues()> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.AccountTypeManager getAccountTypeManager()> (CONTACT_INFORMATION)
<com.android.contacts.ContactsApplication: com.android.contacts.test.InjectedServices getInjectedServices()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta: java.lang.String getDataSet()> (CONTACT_INFORMATION)
<com.android.contacts.widget.IndexerListAdapter: com.android.contacts.widget.IndexerListAdapter$Placement getItemPlacementInSection(int)> (CONTACT_INFORMATION)
<com.android.contacts.ContactsUtils: java.lang.String getCurrentCountryIso(android.content.Context)> (CONTACT_INFORMATION)
<com.android.providers.contacts.AbstractContactsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (CONTACT_INFORMATION)
<com.android.providers.contacts.LegacyApiSupport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (CONTACT_INFORMATION)
<com.android.vcard.VCardProperty: byte[] getByteValue()> android.permission.STOP_APP_SWITCHES (CONTACT_INFORMATION)
<com.android.vcard.VCardParserImpl_V30: java.lang.String getBase64(java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ProfileProvider: java.lang.ThreadLocal getTransactionHolder()> (CONTACT_INFORMATION)
<com.android.vcard.VCardParserImpl_V21: java.lang.String getBase64(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.util.StreamItemEntry: java.lang.CharSequence getDecodedComments()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDeltaList fromIterator(java.util.Iterator)> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailStatusTable: java.lang.String getType(com.android.providers.contacts.VoicemailContentProvider$UriData)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.GoogleAccountType: java.util.List getExtensionPackageNames()> (CONTACT_INFORMATION)
<com.android.vcard.VCardSourceDetector: java.lang.String getEstimatedCharset()> (CONTACT_INFORMATION)
<com.android.contacts.list.PhoneNumberListAdapter: android.net.Uri getDataUri(int)> (CONTACT_INFORMATION)
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor buildSingleRowResult(java.lang.String[],java.lang.String[],java.lang.Object[])> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: boolean getStarred()> (CONTACT_INFORMATION)
<com.android.contacts.detail.StreamItemAdapter: int getItemViewType(int)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListFragment: com.android.contacts.list.ContactEntryListAdapter getAdapter()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$KindTitleViewEntry: java.lang.String getTitle()> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorUtils: com.android.contacts.editor.ContactEditorUtils getInstance(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getPhoneUri(int)> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupBrowseListAdapter$GroupListItemViewCache: android.net.Uri getUri()> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.ContactAggregator: android.database.Cursor queryAggregationSuggestions(android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],long,int,java.lang.String,java.util.ArrayList)> (CONTACT_INFORMATION)
<gov.nist.javax.sip.header.Contact: gov.nist.core.NameValueList getContactParms()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailViewPagerAdapter: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.widget.PinnedHeaderListView: int getPinnedHeaderHeight(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: java.lang.String getDirectoryType()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.PhotoPriorityResolver createPhotoPriorityResolver(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.widget.PinnedHeaderListView: int getTotalTopPinnedHeaderHeight()> (CONTACT_INFORMATION)
<gov.nist.javax.sip.header.Contact: java.lang.String getTempGruuParam()> (CONTACT_INFORMATION)
<com.android.contacts.group.SuggestedMemberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.util.CommonNicknameCache: java.lang.String[] getCommonNicknameClusters(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getViewTypeCount()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$ImActionInflater: int getTypeLabelResource(java.lang.Integer)> (CONTACT_INFORMATION)
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: long getChildId(int,int)> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.DataAction: java.lang.CharSequence getBody()> (CONTACT_INFORMATION)
<com.android.contacts.util.StreamItemEntry: java.util.List getPhotos()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$PhotoKindBuilder: java.lang.String getTagName()> (CONTACT_INFORMATION)
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.AccountTypeManager getInstance(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorUtils: java.lang.String[] getWritableAccountTypeStrings()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$StructuredPostalKindBuilder: java.lang.String getTagName()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getWidePaddingLeft()> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.OrganizationDataItem: java.lang.String getTitle()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ProfileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> (CONTACT_INFORMATION)
<com.android.vcard.VCardParserImpl_V21: java.lang.String getNonEmptyLine()> (CONTACT_INFORMATION)
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: java.lang.Object getGroup(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEvent(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: long getGroupId(int)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailViewPagerAdapter: int getItemPosition(java.lang.Object)> (CONTACT_INFORMATION)
<com.android.vcard.VCardParserImpl_V30: java.lang.String getNonEmptyLine()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListFragment: int getContactNameDisplayOrder()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: com.android.providers.contacts.ContactsDatabaseHelper getNewInstanceForTest(android.content.Context)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForEmail()> (CONTACT_INFORMATION)
<com.android.contacts.datepicker.DatePicker$SavedState: int getMonth()> (CONTACT_INFORMATION)
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.dataitem.DataKind getKindOrFallback(java.lang.String,java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.ContactLoader: com.android.contacts.model.Contact loadInBackground()> (CONTACT_INFORMATION)
<com.android.contacts.vcard.ExportProcessor: com.android.contacts.vcard.ExportRequest getRequest()> (CONTACT_INFORMATION)
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: com.android.contacts.list.CustomContactListFilterActivity$GroupDelta fromSettings(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.interactions.TestLoaderManager: android.content.Loader getLoader(int)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: java.lang.String getQueryParameter(android.net.Uri,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.AccountTypeManagerImpl: com.android.contacts.model.account.AccountType getAccountType(com.android.contacts.model.account.AccountTypeWithDataSet)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Long getAsLong(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.interactions.GroupCreationDialogFragment: int getTitleResourceId()> (CONTACT_INFORMATION)
<com.android.providers.contacts.AccountWithDataSet: java.lang.String getAccountType()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: java.lang.String getEditContactActivityClassName()> (CONTACT_INFORMATION)
<com.android.contacts.editor.SelectAccountDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> android.permission.READ_SYNC_SETTINGS android.permission.GET_ACCOUNTS (CONTACT_INFORMATION)
<com.android.contacts.util.ExpirableCache$GenerationalCachedValue: java.lang.Object getValue()> (CONTACT_INFORMATION)
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: com.android.exchange.adapter.ContactsSyncAdapter$RowBuilder createBuilder(android.content.Entity,java.lang.String,int,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupListItem: long getGroupId()> (CONTACT_INFORMATION)
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.QuickContactActivity$ViewPagerAdapter: android.app.Fragment getItem(int)> (CONTACT_INFORMATION)
<com.android.providers.contacts.DataRowHandler: android.content.ContentValues getAugmentedValues(android.database.sqlite.SQLiteDatabase,long,android.content.ContentValues)> (CONTACT_INFORMATION)
<com.android.providers.contacts.PhotoPriorityResolver: int getPhotoPriority(java.lang.String)> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntry$PostalData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getEmailLabel()> (CONTACT_INFORMATION)
<com.android.providers.contacts.DataRowHandlerForPhoneNumber: int getTypeRank(int)> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailContentProvider$UriData: java.lang.String getSourcePackage()> (CONTACT_INFORMATION)
<com.android.contacts.list.DefaultContactBrowseListFragment: com.android.contacts.list.ContactEntryListAdapter createListAdapter()> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.DataAction: android.content.Intent getIntent()> (CONTACT_INFORMATION)
<com.android.providers.contacts.AbstractContactsProvider: com.android.providers.contacts.ContactsTransaction getCurrentTransaction()> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getRawContacts()> (CONTACT_INFORMATION)
<com.android.contacts.ContactsApplication: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)> (CONTACT_INFORMATION)
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getName()> (CONTACT_INFORMATION)
<com.android.vcard.VCardConfig: int getNameOrderType(int)> (CONTACT_INFORMATION)
<com.android.mms.data.ContactList: com.android.mms.data.ContactList getByIds(java.lang.String,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.list.EmailAddressListAdapter: android.net.Uri getDataUri(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: byte[] getAsByteArray(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.list.CustomContactListFilterActivity$AccountSet loadInBackground()> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.GET_ACCOUNTS android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (CONTACT_INFORMATION)
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.QuickContactListFragment$1: java.lang.Object getItem(int)> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.QuickContactListFragment$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.providers.contacts.NameSplitter: int getAdjustedFullNameStyle(int)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindSipAddress(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment: android.net.Uri getUri()> (CONTACT_INFORMATION)
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: long getOrCreateAccountIdInTransaction(com.android.providers.contacts.AccountWithDataSet)> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupEditorFragment$Member: long getContactId()> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: android.net.Uri getLookupUri()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.CallDetailHistoryAdapter: java.lang.Object getItem(int)> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailContentProvider$UriData: android.net.Uri getUri()> (CONTACT_INFORMATION)
<com.android.providers.contacts.CallLogProvider: com.android.providers.contacts.ContactsDatabaseHelper getDatabaseHelper(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Long getGroupRowId()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNickname(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailTabCarousel: float getStoredYCoordinateForTab(int)> (CONTACT_INFORMATION)
<com.android.mms.ui.QuickContactDivot: float getCloseOffset()> (CONTACT_INFORMATION)
<com.android.providers.contacts.DataRowHandlerForOrganization: int getTypeRank(int)> (CONTACT_INFORMATION)
<com.android.phone.ContactsAsyncHelper$ImageTracker: android.net.Uri getPhotoUri()> (CONTACT_INFORMATION)
<com.android.providers.contacts.MemoryCursor: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListFilter: com.android.contacts.list.ContactListFilter restoreDefaultPreferences(android.content.SharedPreferences)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactTileAdapter: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getViewGroupLabel(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: byte[] getPhotoBinaryData()> (CONTACT_INFORMATION)
<com.android.providers.contacts.util.MemoryUtils: long getTotalMemorySize()> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailStatusTable: android.database.Cursor query(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (CONTACT_INFORMATION)
<com.android.mms.data.Contact: byte[] access$1702(com.android.mms.data.Contact,byte[])> (CONTACT_INFORMATION)
<com.android.contacts.interactions.PhoneNumberInteraction$PhoneDisambiguationDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> android.permission.READ_SYNC_SETTINGS android.permission.GET_ACCOUNTS (CONTACT_INFORMATION)
<com.android.contacts.activities.DialtactsActivity$PageChangeListener: int getCurrentPosition()> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupDetailDisplayUtils: android.view.View getNewGroupSourceView(android.content.Context)> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntry$PostalData: java.lang.String getFormattedAddress(int)> (CONTACT_INFORMATION)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)> (CONTACT_INFORMATION)
<com.android.contacts.activities.ShowOrCreateActivity: android.app.Dialog onCreateDialog(int)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactTileAdapter: int getColumnCount()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ReorderingCursorWrapper: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.socialwidget.SocialWidgetSettings: android.net.Uri getContactUri(android.content.Context,int)> (CONTACT_INFORMATION)
<com.android.contacts.editor.RawContactReadOnlyEditorView: long getRawContactId()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.ExtendedCursor: long getLong(int)> (CONTACT_INFORMATION)
<com.android.contacts.dialpad.DialpadFragment$ErrorDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExternalAccountType: int getInviteContactActionResId()> (CONTACT_INFORMATION)
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactsRequest: android.content.Intent getRedirectIntent()> (CONTACT_INFORMATION)
<com.android.providers.contacts.FastScrollingIndexCache: android.os.Bundle get(android.net.Uri,java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactsRequest: android.net.Uri getContactUri()> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorFragment: long getContactId()> (CONTACT_INFORMATION)
<com.android.mms.data.Contact: java.lang.String getName()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: byte[] getPhoto()> (CONTACT_INFORMATION)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailContentProvider: java.lang.String getType(android.net.Uri)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListFragment: int getDirectorySearchMode()> (CONTACT_INFORMATION)
<com.android.email.activity.setup.SetupData: android.accounts.AccountAuthenticatorResponse getAccountAuthenticatorResponse()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.ExtendedCursor: float getFloat(int)> (CONTACT_INFORMATION)
<com.android.contacts.editor.GroupMembershipView$GroupMembershipAdapter: int getItemViewType(int)> (CONTACT_INFORMATION)
<com.android.contacts.calllog.CallTypeIconsView: int getCallType(int)> (CONTACT_INFORMATION)
<com.android.contacts.util.LocalizedNameResolver: java.lang.String getAllContactsName(android.content.Context,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContact: android.content.Context getContext()> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.PhoneDataItem: java.lang.String getNumber()> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: long getPhotoId()> (CONTACT_INFORMATION)
<com.android.providers.contacts.util.DbQueryUtils: java.lang.String getInequalityClause(java.lang.String,long)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int)> (CONTACT_INFORMATION)
<com.android.contacts.vcard.ImportVCardActivity$VCardFile: java.lang.String getCanonicalPath()> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupDetailFragment$1: int getApproximateTileWidth()> (CONTACT_INFORMATION)
<com.android.contacts.util.AccountSelectionUtil$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.activities.DialtactsActivity: android.content.Intent getCallSettingsIntent()> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener getListener()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListItemView: android.widget.QuickContactBadge getQuickContact()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.CallTypeHelper: java.lang.Integer getHighlightedColor(int)> (CONTACT_INFORMATION)
<com.android.contacts.ContactsUtils: android.content.Intent getVoicemailIntent()> (CONTACT_INFORMATION)
<com.android.providers.contacts.SearchIndexManager: java.lang.String getFtsMatchQuery(java.lang.String,com.android.providers.contacts.SearchIndexManager$FtsQueryBuilder)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListAdapter: char[] getUpperCaseQueryString()> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: android.net.Uri getRequestedUri()> (CONTACT_INFORMATION)
<com.android.providers.contacts.TransactionContext: java.util.Set getDirtyRawContactIds()> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.DataAction: java.lang.String getAlternateIconDescription()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingBottom()> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorFragment: android.database.Cursor access$1202(com.android.contacts.editor.ContactEditorFragment,android.database.Cursor)> (CONTACT_INFORMATION)
<gov.nist.javax.sip.header.Contact: java.lang.String getPubGruuParam()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragmentCarousel: int getCurrentPage()> (CONTACT_INFORMATION)
<com.android.contacts.test.InjectedServices: android.content.SharedPreferences getSharedPreferences()> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.DataItem: java.lang.String getMimeType()> (CONTACT_INFORMATION)
<gov.nist.javax.sip.header.Contact: javax.sip.address.Address getAddress()> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.widget.IndexerListAdapter: int getSectionForPosition(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewGroupActivity()> (CONTACT_INFORMATION)
<com.android.vcard.VCardParserImpl_V30: java.util.Set getKnownPropertyNameSet()> (CONTACT_INFORMATION)
<com.android.vcard.VCardParserImpl_V21: java.util.Set getKnownPropertyNameSet()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDeltaList: java.util.ArrayList buildDiff()> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: long getNameRawContactId()> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: java.lang.String getPhotoUri()> (CONTACT_INFORMATION)
<com.android.contacts.activities.ConfirmAddDetailActivity: com.android.contacts.util.DialogManager getDialogManager()> (CONTACT_INFORMATION)
<com.android.vcard.VCardParserImpl_V40: java.util.Set getKnownPropertyNameSet()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListAdapter: com.android.contacts.list.DirectoryPartition createDefaultDirectoryPartition()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ProfileProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindOrganization(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: com.android.contacts.voicemail.VoicemailStatusHelperImpl$Action getAction()> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntry$ImData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.ClearCallLogDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountWithDataSet: com.android.contacts.model.account.AccountTypeWithDataSet getAccountTypeWithDataSet()> (CONTACT_INFORMATION)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: long getWritableEntityId()> android.permission.READ_SYNC_SETTINGS android.permission.GET_ACCOUNTS (CONTACT_INFORMATION)
<com.android.mms.data.Contact: android.net.Uri getPhoneUri()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListItemView: android.widget.TextView getCountView()> (CONTACT_INFORMATION)
<com.android.contacts.list.JoinContactLoader: android.database.Cursor loadInBackground()> (CONTACT_INFORMATION)
<com.android.contacts.preference.ContactsPreferences: int getSortOrder()> (CONTACT_INFORMATION)
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: java.lang.CharSequence getTitle(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.dialpad.DialpadFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntry$EmailData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> (CONTACT_INFORMATION)
<com.android.providers.contacts.DataRowHandler: int getTypeRank(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getPhoneticFamilyName()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListItemView: android.widget.TextView getStatusView()> (CONTACT_INFORMATION)
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: java.lang.Object getChild(int,int)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$KindParser: java.util.List parseDataKindTag(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.ImDataItem: java.lang.String getData()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ProfileProvider: java.lang.String getType(android.net.Uri)> (CONTACT_INFORMATION)
<com.android.contacts.ContactsActivity: android.content.ContentResolver getContentResolver()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: int getInviteContactActionResId()> (CONTACT_INFORMATION)
<com.android.contacts.list.ProfileAndContactsLoader: android.database.Cursor loadInBackground()> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (CONTACT_INFORMATION)
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.account.AccountType getAccountType(java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoneticName(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.account.AccountType getAccountTypeForAccount(com.android.contacts.model.account.AccountWithDataSet)> (CONTACT_INFORMATION)
<com.android.contacts.editor.EditorAnimator: com.android.contacts.editor.EditorAnimator getInstance()> (CONTACT_INFORMATION)
<com.android.contacts.ContactPhotoManager: int getDefaultAvatarResId(boolean,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$ImActionInflater: java.lang.String getTypeColumn()> (CONTACT_INFORMATION)
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: long getItemId(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$EmailKindBuilder: java.lang.String getTagName()> (CONTACT_INFORMATION)
<com.android.contacts.widget.PinnedHeaderListAdapter: int getPinnedHeaderCount()> (CONTACT_INFORMATION)
<com.android.contacts.GroupMetaData: java.lang.String getTitle()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEmail(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.util.HtmlUtils$StreamItemQuoteSpan: int getLeadingMargin(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.util.ImageViewDrawableSetter: byte[] getCompressedImage()> (CONTACT_INFORMATION)
<com.android.contacts.editor.KindSectionView: java.lang.String getTitle()> (CONTACT_INFORMATION)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntry$OrganizationData: java.lang.String getFormattedString()> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupBrowseListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.list.CustomContactListFilterActivity$AccountSet: java.util.ArrayList buildDiff()> (CONTACT_INFORMATION)
<com.android.providers.contacts.TransactionContext: java.lang.Long getAccountIdOrNullForRawContact(long)> (CONTACT_INFORMATION)
<com.android.providers.contacts.CallLogProvider: java.lang.String getType(android.net.Uri)> (CONTACT_INFORMATION)
<com.android.contacts.list.PhoneFavoriteMergedAdapter: java.lang.Object getItem(int)> (CONTACT_INFORMATION)
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])> (CONTACT_INFORMATION)
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> (CONTACT_INFORMATION)
<com.android.contacts.activities.GroupEditorActivity: com.android.contacts.util.DialogManager getDialogManager()> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$Action: int getMessageId()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.CallDetailHistoryAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.activities.PeopleActivity$TabPagerAdapter: int getItemPosition(java.lang.Object)> (CONTACT_INFORMATION)
<com.android.contacts.ContactsUtils: android.graphics.Rect getTargetRectFromView(android.content.Context,android.view.View)> (CONTACT_INFORMATION)
<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri,boolean)> (CONTACT_INFORMATION)
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result loadInBackground()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListAdapter: int getDirectoryResultLimit()> (CONTACT_INFORMATION)
<com.android.contacts.interactions.GroupNameDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.DataAction: java.lang.String getMimeType()> (CONTACT_INFORMATION)
<com.android.contacts.util.ContactBadgeUtil: java.lang.CharSequence getSocialDate(com.android.contacts.util.StreamItemEntry,android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getValues()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindOrganization(android.content.Context)> (CONTACT_INFORMATION)
<com.android.providers.contacts.TransactionContext: java.util.Set getStaleSearchIndexRawContactIds()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactModifier: java.util.ArrayList getValidTypes(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.account.AccountType$EditType)> (CONTACT_INFORMATION)
<com.android.providers.contacts.PhotoStore: com.android.providers.contacts.PhotoStore$Entry get(long)> (CONTACT_INFORMATION)
<com.android.contacts.list.LegacyContactListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.vcard.ExportProcessor: int getType()> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: java.lang.String getCurrentPhotoFile()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.Long getAccountIdOrNull(com.android.providers.contacts.AccountWithDataSet)> (CONTACT_INFORMATION)
<com.android.contacts.widget.PinnedHeaderListAdapter: int getScrollPositionForHeader(int)> (CONTACT_INFORMATION)
<com.android.contacts.detail.StreamItemAdapter: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorFragment$JoinSuggestedContactDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.datepicker.DatePicker: int getDayOfMonth()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneticFamilyName()> (CONTACT_INFORMATION)
<com.android.contacts.list.ProviderStatusWatcher: com.android.contacts.list.ProviderStatusWatcher$Status getProviderStatus()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.ExtendedCursor: java.lang.String getString(int)> (CONTACT_INFORMATION)
<com.android.contacts.ContactsActivity: android.view.View getView(int)> (CONTACT_INFORMATION)
<com.android.mms.data.Contact: int getContactMethodType()> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntry$NicknameData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> (CONTACT_INFORMATION)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getPinnedHeaderView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.ResolveCache: com.android.contacts.quickcontact.ResolveCache$Entry getEntry(com.android.contacts.quickcontact.Action)> (CONTACT_INFORMATION)
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(android.net.Uri,java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.DataRowHandler getDataRowHandlerForProfile(java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactLocaleUtils$ContactLocaleUtilsBase: java.lang.String getSortKey(java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ReorderingCursorWrapper: short getShort(int)> (CONTACT_INFORMATION)
<com.android.contacts.calllog.CallDetailHistoryAdapter: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.list.ProviderStatusWatcher: com.android.contacts.list.ProviderStatusWatcher getInstance(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: long getDirectoryId()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta: java.lang.String getAccountType()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryLocal(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,long,android.os.CancellationSignal)> (CONTACT_INFORMATION)
<com.android.contacts.preference.SortOrderPreference: java.lang.CharSequence getSummary()> (CONTACT_INFORMATION)
<com.android.contacts.ContactPhotoManagerImpl$Request: long getId()> (CONTACT_INFORMATION)
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: boolean getVisible()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewStreamItemPhotoActivity()> (CONTACT_INFORMATION)
<com.android.mms.data.ContactList: java.lang.String[] getNumbers()> (CONTACT_INFORMATION)
<com.android.contacts.datepicker.DatePicker: int getMonth()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactsSectionIndexer: java.lang.Object[] getSections()> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupEditorFragment$Member: android.net.Uri getLookupUri()> (CONTACT_INFORMATION)
<com.android.providers.contacts.NameLookupBuilder: java.lang.String normalizeName(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindIm(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread: android.net.Uri[] getSourceUris()> (CONTACT_INFORMATION)
<com.android.mms.data.Contact: java.util.List getByPhoneUris(android.os.Parcelable[])> (CONTACT_INFORMATION)
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: java.lang.String getViewContactNotifyServicePackageName()> (CONTACT_INFORMATION)
<com.android.contacts.ContactPhotoManager: com.android.contacts.ContactPhotoManager getInstance(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.ContactsUtils: int getThumbnailSize(android.content.Context)> (CONTACT_INFORMATION)
<com.android.vcard.VCardSourceDetector: int getEstimatedType()> (CONTACT_INFORMATION)
<com.android.contacts.list.PhoneFavoriteFragment: com.android.contacts.list.ContactListFilter getFilter()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListFragment: android.app.LoaderManager getLoaderManager()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactTileAdapter: java.lang.Object getItem(int)> (CONTACT_INFORMATION)
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (CONTACT_INFORMATION)
<com.android.contacts.editor.BaseRawContactEditorView: com.android.contacts.editor.PhotoEditorView getPhotoEditor()> (CONTACT_INFORMATION)
<com.android.contacts.editor.KindSectionView: com.android.contacts.model.dataitem.DataKind getKind()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.account.AccountType$EditType getType(com.android.contacts.model.dataitem.DataKind,int)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactsSectionIndexer: int getSectionForPosition(int)> (CONTACT_INFORMATION)
<gov.nist.javax.sip.header.Contact: boolean getWildCardFlag()> (CONTACT_INFORMATION)
<com.android.contacts.vcard.ImportVCardActivity$VCardFile: long getLastModified()> (CONTACT_INFORMATION)
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getString(java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ReorderingCursorWrapper: java.lang.String getString(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.PhoneDataItem: java.lang.String getNormalizedNumber()> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: int getCallDetailsMessageId()> (CONTACT_INFORMATION)
<com.android.contacts.list.PhoneNumberPickerFragment: com.android.contacts.list.ContactListFilter getFilter()> (CONTACT_INFORMATION)
<com.android.contacts.editor.PhoneticNameEditorView$PhoneticValuesDelta: java.lang.Long getId()> (CONTACT_INFORMATION)
<com.android.contacts.activities.PhotoSelectionActivity: android.content.Intent buildIntent(android.content.Context,android.net.Uri,android.graphics.Bitmap,byte[],android.graphics.Rect,com.android.contacts.model.RawContactDeltaList,boolean,boolean,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.util.MemoryUtils: long getTotalMemorySize()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$OrganizationKindBuilder: java.lang.String getTagName()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getEntry(java.lang.Long)> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailContentProvider$UriData: java.lang.String getId()> (CONTACT_INFORMATION)
<com.android.contacts.vcard.NfcImportVCardActivity$ImportTask: com.android.contacts.vcard.ImportRequest doInBackground(com.android.contacts.vcard.VCardService[])> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.VIBRATE android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (CONTACT_INFORMATION)
<com.android.contacts.list.ContactBrowseListFragment: com.android.contacts.list.ContactListFilter getFilter()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForStructuredName()> (CONTACT_INFORMATION)
<com.android.contacts.activities.NonPhoneActivity$NonPhoneDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailTabCarousel: int getAllowedVerticalScrollLength()> (CONTACT_INFORMATION)
<com.android.contacts.activities.PeopleActivity: com.android.contacts.util.DialogManager getDialogManager()> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntry$OrganizationData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEmail(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailStatusHelperImpl: java.util.List getStatusMessages(android.database.Cursor)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListAdapter: java.lang.String getQueryString()> (CONTACT_INFORMATION)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: java.util.ArrayList loadEfFilesFromUsim()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$PhoneActionAltInflater: int getTypeLabelResource(java.lang.Integer)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListItemView: android.widget.ImageView getPhotoView()> (CONTACT_INFORMATION)
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result getContactInfo(android.content.Context,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactTileView: android.widget.QuickContactBadge getQuickContact()> (CONTACT_INFORMATION)
<com.android.contacts.editor.RawContactEditorView: long getRawContactId()> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: java.lang.String getDirectoryAccountType()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: java.util.ArrayList getSortedDataKinds()> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.DataAction: int getPresence()> (CONTACT_INFORMATION)
<com.android.contacts.list.JoinContactListAdapter: int getItemViewType(int,int)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.GoogleAccountType: java.lang.String getViewContactNotifyServiceClassName()> (CONTACT_INFORMATION)
<com.android.contacts.util.ExpirableCache: com.android.contacts.util.ExpirableCache create(int)> (CONTACT_INFORMATION)
<com.android.vcard.VCardProperty: java.util.Map getParameterMap()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListAdapter: int getItemViewType(int,int)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta: int getEntryCount(boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.AbstractContactsProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper()> (CONTACT_INFORMATION)
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)> (CONTACT_INFORMATION)
<com.android.contacts.util.StreamItemEntry: java.lang.String getText()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingLeft()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailDisplayUtils$DefaultImageGetter: android.graphics.drawable.Drawable getDrawable(java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.TransactionContext: java.util.Set getUpdatedRawContactIds()> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.OrganizationDataItem: java.lang.String getCompany()> (CONTACT_INFORMATION)
<com.android.contacts.test.InjectedServices: java.lang.Object getSystemService(java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.util.DbQueryUtils: java.lang.String getEqualityClause(java.lang.String,long)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExternalAccountType: int getViewGroupLabelResId()> (CONTACT_INFORMATION)
<com.android.contacts.widget.IndexerListAdapter: android.view.View getPinnedHeaderView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorFragment$SuggestionEditConfirmationDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.WebsiteDataItem: java.lang.String getUrl()> (CONTACT_INFORMATION)
<com.android.contacts.vcard.ProcessorBase: java.lang.Object get()> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.ResolveCache: android.content.pm.ResolveInfo getBestResolve(android.content.Intent,java.util.List)> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntry$AndroidCustomData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupDetailFragment: long getGroupId()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListFilter: java.lang.String getId()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoto(android.content.Context)> (CONTACT_INFORMATION)
<com.android.providers.contacts.TransactionContext: java.util.Set getStaleSearchIndexContactIds()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Long getId()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ActionsViewContainer: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()> (CONTACT_INFORMATION)
<com.android.mms.data.ContactList: java.lang.String[] getNumbers(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$ViewEntry: int getViewType()> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: int getCallLogMessageId()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhone(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: long getItemId(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getPhoneticGivenName()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getDataMimeType(long)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListFragment: android.content.CursorLoader createCursorLoader()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ReorderingCursorWrapper: long getLong(int)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getCurrentCountryIso()> (CONTACT_INFORMATION)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: com.android.contacts.group.GroupEditorFragment$Member getItem(int)> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupListItem: java.lang.String getTitle()> (CONTACT_INFORMATION)
<com.android.contacts.util.StreamItemEntry: long getTimestamp()> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: java.lang.String getAltDisplayName()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: int getAggregationMode(long)> (CONTACT_INFORMATION)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: int[] getAdnRecordsSize(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: java.lang.String getPhoneticName()> (CONTACT_INFORMATION)
<com.android.contacts.list.PostalAddressListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.CharSequence getDisplayName(android.content.Context,com.android.contacts.model.Contact)> (CONTACT_INFORMATION)
<com.android.providers.contacts.CountryMonitor: java.lang.String getCountryIso()> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupBrowseListAdapter: long getItemId(int)> (CONTACT_INFORMATION)
<com.android.mms.data.Contact: android.net.Uri getUri()> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorFragment$CancelEditDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: int getPriority()> (CONTACT_INFORMATION)
<com.android.contacts.editor.EventFieldEditorView: com.android.contacts.model.account.AccountType$EditType getType()> (CONTACT_INFORMATION)
<com.android.contacts.util.AccountsListAdapter: com.android.contacts.model.account.AccountWithDataSet getItem(int)> (CONTACT_INFORMATION)
<com.android.contacts.widget.IndexerListAdapter: int getIndexedPartition()> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: java.lang.String getDirectoryDisplayName()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.ContactInfoHelper: com.android.contacts.calllog.ContactInfo lookupNumber(java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.list.JoinContactListFragment: com.android.contacts.list.ContactEntryListAdapter createListAdapter()> (CONTACT_INFORMATION)
<com.android.contacts.model.AccountTypeManagerImpl: java.util.List getAccountTypes(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactsRequest: int getActionCode()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindDisplayName(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactTileView: android.view.View$OnClickListener createClickListener()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta: java.util.ArrayList getMimeEntries(java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.SearchIndexManager: java.util.List splitIntoFtsTokens(java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ReorderingCursorWrapper: java.lang.String[] getColumnNames()> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getDisplayName()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2$StructuredNameLookupBuilder: java.lang.String[] getCommonNicknameClusters(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: android.graphics.drawable.Drawable getDisplayIcon(android.content.Context)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: android.database.sqlite.SQLiteDatabase getDatabase(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.util.StreamItemEntry: java.lang.String getResPackage()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$AddToMyContactsQuickFix: java.lang.String getTitle()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$MakeLocalCopyQuickFix: java.lang.String getTitle()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactDirectoryManager: int scanAllPackages()> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: java.lang.String getCustomRingtone()> (CONTACT_INFORMATION)
<com.android.providers.contacts.PhotoProcessor: int getMaxThumbnailPhotoDim()> (CONTACT_INFORMATION)
<com.android.vcard.VCardProperty: java.lang.String getRawValue()> (CONTACT_INFORMATION)
<android.provider.ContactsContract$Groups$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactTileAdapter: android.view.View getDivider()> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.DataItem: java.lang.String getKindString()> (CONTACT_INFORMATION)
<com.android.contacts.activities.PeopleActivity$TabPagerAdapter: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment: int getFirstListItemOffset()> (CONTACT_INFORMATION)
<com.android.contacts.ContactPhotoManagerImpl$Request: int getRequestedExtent()> (CONTACT_INFORMATION)
<com.android.providers.contacts.AccountWithDataSet: java.lang.String getAccountName()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneLabel()> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupDetailFragment: android.net.Uri getGroupUri()> (CONTACT_INFORMATION)
<com.android.providers.contacts.NameNormalizer: java.text.RuleBasedCollator getCompressingCollator()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailPhotoSetter: android.view.View$OnClickListener setupContactPhotoForClick(android.content.Context,com.android.contacts.model.Contact,android.widget.ImageView,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$SipAddressKindBuilder: java.lang.String getTagName()> (CONTACT_INFORMATION)
<com.android.contacts.editor.KindSectionView: int getEditorCount()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.ExtendedCursor: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: android.content.Context getDataSourceContext()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsTransaction: android.database.sqlite.SQLiteDatabase getDbForTag(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta: int getMimeEntriesCount(java.lang.String,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.calllog.ExtendedCursor: short getShort(int)> (CONTACT_INFORMATION)
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: java.lang.String getExtraInfo()> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntry$NameData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ReorderingCursorWrapper: int getType(int)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getCountryIso()> (CONTACT_INFORMATION)
<com.android.vcard.VCardParserImpl_V21: java.util.Set getAvailableEncodingSet()> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getGroupMetaData()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ReorderingCursorWrapper: float getFloat(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.RawContact getRawContact()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExternalAccountType: java.util.List getExtensionPackageNames()> (CONTACT_INFORMATION)
<com.android.exchange.provider.ExchangeDirectoryProvider$GalContactRow: java.lang.Object[] getRow()> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupBrowseListAdapter: com.android.contacts.group.GroupListItem getItem(int)> (CONTACT_INFORMATION)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: android.content.ContentValues getCompleteValues()> (CONTACT_INFORMATION)
<com.android.contacts.activities.DialtactsActivity$ViewPagerAdapter: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorUtils: java.util.List getSavedAccounts()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.GoogleAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhone(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingTop()> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: long getId()> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntry$NoteData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> (CONTACT_INFORMATION)
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getGivenNames()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: java.lang.String getViewContactNotifyServiceClassName()> (CONTACT_INFORMATION)
<com.android.contacts.editor.LabeledEditorView$EditTypeAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactMethodUri(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.AccountTypeManagerImpl: java.util.Map getUsableInvitableAccountTypes()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForOrganization()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListItemView: android.widget.TextView getSnippetView()> (CONTACT_INFORMATION)
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getSuffix()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNote(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener getListener()> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailContentProvider$UriData: java.lang.String getWhereClause()> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.editor.EventFieldEditorView: int getDefaultHourForBirthday()> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.util.NameDistance: float getDistance(byte[],byte[])> (CONTACT_INFORMATION)
<com.android.contacts.util.StreamItemEntry: java.lang.String getAccountType()> (CONTACT_INFORMATION)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View newHeaderView(android.content.Context,int,android.database.Cursor,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$AddConnectionViewEntry: android.graphics.drawable.Drawable getIcon()> (CONTACT_INFORMATION)
<com.android.providers.contacts.HanziToPinyin: com.android.providers.contacts.HanziToPinyin getInstance()> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: int getDesiredClipPosition()> (CONTACT_INFORMATION)
<com.android.contacts.detail.PhotoSelectionHandler: com.android.contacts.model.RawContactDeltaList getDeltaForAttachingPhotoToContact()> (CONTACT_INFORMATION)
<com.android.contacts.editor.AggregationSuggestionEngine: int getSuggestedContactCount()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.ExtendedCursor: double getDouble(int)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListAdapter: java.lang.String getSelectedContactLookupKey()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getInviteContactActivityClassName()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactLocaleUtils: java.lang.String getSortKey(java.lang.String,int)> (CONTACT_INFORMATION)
<android.provider.ContactsContract$Contacts: android.net.Uri lookupContact(android.content.ContentResolver,android.net.Uri)> (CONTACT_INFORMATION)
<android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.DataAction: android.content.Intent getAlternateIntent()> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupEditorFragment$Member: long getRawContactId()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindDisplayName(android.content.Context)> (CONTACT_INFORMATION)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> (CONTACT_INFORMATION)
<gov.nist.javax.sip.header.Contact: int getExpires()> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.QuickContactActivity$ViewPagerAdapter: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: long getWritableEntityId()> android.permission.READ_SYNC_SETTINGS android.permission.GET_ACCOUNTS (CONTACT_INFORMATION)
<com.android.contacts.list.AccountFilterActivity: java.util.List access$100(android.content.Context)> (CONTACT_INFORMATION)
<com.android.providers.contacts.HanziToPinyin: java.util.ArrayList get(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: java.lang.String getViewStreamItemPhotoActivity()> (CONTACT_INFORMATION)
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: int getGroupCount()> (CONTACT_INFORMATION)
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getMiddleName()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$GroupMembershipKindBuilder: java.lang.String getTagName()> (CONTACT_INFORMATION)
<com.android.providers.contacts.DataRowHandlerForEmail: int getTypeRank(int)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: com.android.providers.contacts.ContactsDatabaseHelper getInstance(android.content.Context)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactDirectoryManager: java.util.Set getDirectoryProviderPackages(android.content.pm.PackageManager)> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntry$AnniversaryData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.ImDataItem: int getChatCapability()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactLocaleUtils$ChineseContactUtils: java.lang.String getSortKey(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.detail.StreamItemAdapter: int getViewTypeCount()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoneticName(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.editor.RawContactEditorView: com.android.contacts.editor.TextFieldsEditorView getPhoneticNameEditor()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListAdapter: java.lang.String getQuantityText(int,int,int)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: long getItemId(int)> (CONTACT_INFORMATION)
<com.android.contacts.calllog.IntentProvider$1: android.content.Intent getIntent(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.calllog.IntentProvider$2: android.content.Intent getIntent(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.calllog.IntentProvider$3: android.content.Intent getIntent(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$EventKindBuilder: java.lang.String getTagName()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: int getViewGroupLabelResId()> (CONTACT_INFORMATION)
<com.android.providers.contacts.aggregation.ContactAggregator$NameLookupSelectionBuilder: java.lang.String[] getCommonNicknameClusters(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.util.AsyncTaskExecutors: com.android.contacts.util.AsyncTaskExecutor createThreadPoolExecutor()> (CONTACT_INFORMATION)
<com.android.internal.telephony.IIccPhoneBook$Stub: android.os.IBinder asBinder()> (CONTACT_INFORMATION)
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getContent()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: android.content.ContentValues getAfter()> (CONTACT_INFORMATION)
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> android.permission.READ_CONTACTS android.permission.WAKE_LOCK (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListAdapter: boolean getDisplayPhotos()> (CONTACT_INFORMATION)
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.RawContactDelta$ValuesDelta getEntry()> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.SipAddressDataItem: java.lang.String getSipAddress()> (CONTACT_INFORMATION)
<com.android.providers.contacts.TransactionContext: java.util.Set getInsertedRawContactIds()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.ExtendedCursor: int getInt(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.CharSequence inflateUsing(android.content.Context,android.content.ContentValues)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: java.lang.String getInviteContactActivityClassName()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.CallDetailHistoryAdapter: long getItemId(int)> (CONTACT_INFORMATION)
<com.android.contacts.editor.LabeledEditorView: android.app.Dialog createDialog(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getPositionForSection(int)> (CONTACT_INFORMATION)
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$AddConnectionViewEntry: java.lang.CharSequence getLabel()> (CONTACT_INFORMATION)
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: int getChildrenCount(int)> (CONTACT_INFORMATION)
<com.android.providers.contacts.DataRowHandler: long insert(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,long,android.content.ContentValues)> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupListItem: java.lang.String getAccountType()> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupListItem: java.lang.String getDataSet()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactTilePhoneFrequentView: int getApproximateImageSize()> (CONTACT_INFORMATION)
<com.android.providers.contacts.CallLogProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> com.android.voicemail.permission.ADD_VOICEMAIL android.permission.READ_CALL_LOG (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: long getContactId(long)> (CONTACT_INFORMATION)
<com.android.contacts.calllog.IntentProvider: com.android.contacts.calllog.IntentProvider getReturnCallIntentProvider(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDelta getFirstWritableRawContact(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$PhoneActionInflater: int getTypeLabelResource(java.lang.Integer)> (CONTACT_INFORMATION)
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()> (CONTACT_INFORMATION)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindGroupMembership(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.vcard.ProcessorBase: java.lang.Object get(long,java.util.concurrent.TimeUnit)> (CONTACT_INFORMATION)
<com.android.contacts.util.StreamItemPhotoEntry: java.lang.String getPhotoUri()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.String getAttribution(android.content.Context,com.android.contacts.model.Contact)> (CONTACT_INFORMATION)
<com.android.vcard.VCardProperty: java.util.List getValueList()> android.permission.STOP_APP_SWITCHES (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewContactNotifyServiceClassName()> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntry$PhotoData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> (CONTACT_INFORMATION)
<com.android.contacts.editor.AggregationSuggestionEngine: android.os.Handler getHandler()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Integer getAsInteger(java.lang.String,java.lang.Integer)> (CONTACT_INFORMATION)
<com.android.contacts.test.InjectedServices: android.content.ContentResolver getContentResolver()> (CONTACT_INFORMATION)
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: long getContactId()> (CONTACT_INFORMATION)
<com.android.contacts.preference.ContactsPreferences: int getDefaultSortOrder()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: long getRawContactId()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListFragment: android.content.Context getContext()> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.ResolveCache: com.android.contacts.quickcontact.ResolveCache getInstance(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: int getPinnedHeaderCount()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactModifier: java.util.ArrayList getValidTypes(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind)> (CONTACT_INFORMATION)
<com.android.contacts.datepicker.DatePicker$SavedState: int getYear()> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.DataAction: android.graphics.drawable.Drawable getAlternateIcon()> (CONTACT_INFORMATION)
<com.android.contacts.ContactPhotoManager: int getDefaultAvatarResId(android.content.Context,int,boolean)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.vcard.CancelActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (CONTACT_INFORMATION)
<android.provider.Contacts$ContactMethods: java.lang.CharSequence getDisplayLabel(android.content.Context,int,int,java.lang.CharSequence)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactLocaleUtils: com.android.providers.contacts.ContactLocaleUtils getIntance()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactTileAdapter: long getItemId(int)> (CONTACT_INFORMATION)
<com.android.contacts.group.SuggestedMemberListAdapter: android.widget.Filter getFilter()> (CONTACT_INFORMATION)
<com.android.contacts.vcard.ImportProcessor: int getType()> (CONTACT_INFORMATION)
<com.android.contacts.ContactsActivity: java.lang.Object getSystemService(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.editor.PhoneticNameEditorView$PhoneticValuesDelta: java.lang.String getAsString(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactTileAdapter: int getItemViewType(int)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListItemView: int getDefaultPhotoViewSize()> (CONTACT_INFORMATION)
<com.android.contacts.widget.IndexerListAdapter: java.lang.Object[] getSections()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForStructuredPostal()> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupBrowseListAdapter: int getCount()> (CONTACT_INFORMATION)
<gov.nist.javax.sip.header.Contact: java.lang.String getSipInstanceParam()> (CONTACT_INFORMATION)
<com.android.contacts.widget.IndexerListAdapter: android.widget.SectionIndexer getIndexer()> (CONTACT_INFORMATION)
<com.android.contacts.ContactPhotoManagerImpl$Request: java.lang.Object getKey()> (CONTACT_INFORMATION)
<com.android.contacts.list.PhoneNumberListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.widget.PinnedHeaderListView: int getPositionAt(int)> (CONTACT_INFORMATION)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.interactions.PhoneNumberInteraction$PhoneItemAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: com.android.contacts.list.ContactListFilter getItem(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: int getEmailType()> (CONTACT_INFORMATION)
<com.android.contacts.list.DirectoryPartition: java.lang.String getDisplayName()> (CONTACT_INFORMATION)
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.ContactPhotoManager: com.android.contacts.ContactPhotoManager createContactPhotoManager(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$ViewEntry: long getId()> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupEditorFragment$Member: android.net.Uri getPhotoUri()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.String getTypeColumn()> (CONTACT_INFORMATION)
<com.android.contacts.vcard.ImportVCardActivity$VCardFile: java.lang.String getName()> (CONTACT_INFORMATION)
<com.android.contacts.ContactPhotoManagerImpl$Request: android.net.Uri getUri()> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailContentProvider$UriData: com.android.providers.contacts.VoicemailContentProvider$UriData createUriData(android.net.Uri)> (CONTACT_INFORMATION)
<com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask$2: int getMaximumScrollableHeaderOffset()> (CONTACT_INFORMATION)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (CONTACT_INFORMATION)
<com.android.vcard.VCardParserImpl_V40: int getVersion()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: java.lang.String[] getDefaultProjection(android.net.Uri)> (CONTACT_INFORMATION)
<com.android.vcard.VCardParserImpl_V30: int getVersion()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactTileAdapter: int getNumFrequents()> (CONTACT_INFORMATION)
<com.android.vcard.VCardProperty: java.util.Collection getParameters(java.lang.String)> (CONTACT_INFORMATION)
<com.android.vcard.VCardParserImpl_V21: int getVersion()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.ExtendedCursor: java.lang.String[] getColumnNames()> (CONTACT_INFORMATION)
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (CONTACT_INFORMATION)
<com.android.vcard.VCardParserImpl_V21: java.lang.String getLine()> (CONTACT_INFORMATION)
<com.android.contacts.preference.ContactsPreferences: int getDisplayOrder()> (CONTACT_INFORMATION)
<com.android.vcard.VCardParserImpl_V30: java.lang.String getLine()> (CONTACT_INFORMATION)
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: int getInt(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.GroupMembershipDataItem: long getGroupRowId()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneNormalizedNumber()> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: long getItemId(int)> (CONTACT_INFORMATION)
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: long getItemId(int)> (CONTACT_INFORMATION)
<com.android.contacts.interactions.TestLoaderManager: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactsRequest: java.lang.String getQueryString()> (CONTACT_INFORMATION)
<com.android.contacts.vcard.ImportVCardActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.editor.AggregationSuggestionEngine: java.util.List getSuggestions()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListFragment: java.lang.String getQueryString()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.CallDetailHistoryAdapter: int getItemViewType(int)> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupEditorFragment$CancelEditDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.editor.LabeledEditorView$EditTypeAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.vcard.VCardService$MyBinder: com.android.contacts.vcard.VCardService getService()> (CONTACT_INFORMATION)
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getCollectionName()> (CONTACT_INFORMATION)
<com.android.contacts.socialwidget.SocialWidgetSettings: com.android.contacts.socialwidget.SocialWidgetSettings getInstance()> (CONTACT_INFORMATION)
<com.android.contacts.editor.GroupMembershipView$GroupMembershipAdapter: int getViewTypeCount()> (CONTACT_INFORMATION)
<com.android.contacts.list.DirectoryPartition: int getStatus()> (CONTACT_INFORMATION)
<com.android.contacts.util.ExpirableCache: java.lang.Object getPossiblyExpired(java.lang.Object)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.account.AccountType$EditType getBestValidType(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,boolean,int)> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorUtils: com.android.contacts.model.account.AccountWithDataSet getDefaultAccount()> (CONTACT_INFORMATION)
<com.android.providers.contacts.NameSplitter: int getAdjustedNameStyleBasedOnPhoneticNameStyle(int,int)> (CONTACT_INFORMATION)
<com.android.providers.contacts.AccountWithDataSet: java.lang.String getDataSet()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Integer getAsInteger(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.PhoneDataItem: java.lang.String getFormattedPhoneNumber()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContact: java.lang.String getAccountTypeString()> (CONTACT_INFORMATION)
<com.android.contacts.editor.SplitContactConfirmationDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getDataUri(int)> (CONTACT_INFORMATION)
<com.android.contacts.ContactsActivity: android.app.Fragment getFragment(int)> (CONTACT_INFORMATION)
<com.android.mms.data.ContactList: com.android.mms.data.ContactList getByNumbers(java.lang.String,boolean,boolean)> android.permission.STOP_APP_SWITCHES (CONTACT_INFORMATION)
<com.android.mms.data.Contact: java.lang.String getNameAndNumber()> (CONTACT_INFORMATION)
<com.android.providers.contacts.NameNormalizer: java.text.RuleBasedCollator getComplexityCollator()> (CONTACT_INFORMATION)
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$ImKindBuilder: java.lang.String getTagName()> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailContentProvider: java.lang.String getCallingPackage()> com.android.voicemail.permission.ADD_VOICEMAIL (CONTACT_INFORMATION)
<com.android.contacts.editor.RawContactEditorView: com.android.contacts.editor.TextFieldsEditorView getNameEditor()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingRight()> (CONTACT_INFORMATION)
<com.android.contacts.list.DirectoryPartition: long getDirectoryId()> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupListItem: int getMemberCount()> (CONTACT_INFORMATION)
<com.android.mms.data.Contact: android.graphics.drawable.Drawable getAvatar(android.content.Context,android.graphics.drawable.Drawable)> (CONTACT_INFORMATION)
<com.android.contacts.interactions.ImportExportDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: int getCount()> (CONTACT_INFORMATION)
<com.android.vcard.VCardComposer: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContact: com.android.contacts.model.AccountTypeManager getAccountTypeManager()> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntry$BirthdayData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getPrimaryEntry(java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper$StructuredNameLookupBuilder: java.lang.String[] getCommonNicknameClusters(java.lang.String)> (CONTACT_INFORMATION)
<com.android.mms.data.Contact: long getRecipientId()> (CONTACT_INFORMATION)
<com.android.vcard.VCardProperty: java.lang.String getName()> (CONTACT_INFORMATION)
<com.android.mms.data.Contact: java.lang.String getNumber()> (CONTACT_INFORMATION)
<com.android.contacts.util.StreamItemPhotoEntry: long getId()> (CONTACT_INFORMATION)
<com.android.contacts.list.JoinContactListAdapter: int getViewTypeCount()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$EventActionInflater: int getTypeLabelResource(java.lang.Integer)> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getPhoneticMiddleName()> (CONTACT_INFORMATION)
<com.android.contacts.util.DataStatus: int getPresence()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContact: java.lang.String getDataSet()> (CONTACT_INFORMATION)
<com.android.contacts.voicemail.VoicemailPlaybackPresenter$FetchResultHandler: java.lang.Runnable getTimeoutRunnable()> (CONTACT_INFORMATION)
<com.android.contacts.list.ProfileAndContactsLoader$1: android.os.Bundle getExtras()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: java.util.List getExtensionPackageNames()> (CONTACT_INFORMATION)
<com.android.contacts.activities.DialtactsActivity: java.lang.String getCallOrigin()> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntry$SipData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> (CONTACT_INFORMATION)
<com.android.providers.contacts.DataRowHandler: long getMimeTypeId()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactsSectionIndexer: int getPositionForSection(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.ImDataItem: java.lang.String getCustomProtocol()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactTileView: android.net.Uri getLookupUri()> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntryCommitter: java.util.ArrayList getCreatedUris()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$SimpleInflater: java.lang.String getColumnNameForTest()> (CONTACT_INFORMATION)
<com.android.vcard.VCardParserImpl_V21: java.util.Set getKnownValueSet()> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailUpdatesFragment: int getFirstListItemOffset()> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.DataItem: int getKindTypeColumn()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: android.accounts.Account getDefaultAccount()> (CONTACT_INFORMATION)
<com.android.providers.contacts.AccountWithDataSet: com.android.providers.contacts.AccountWithDataSet get(java.lang.String,java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$ImActionInflater: java.lang.String getLabelColumn()> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorFragment: com.android.contacts.editor.BaseRawContactEditorView getRawContactEditorView(long)> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupBrowseListAdapter: int getSelectedGroupPosition()> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.DataItem: long getId()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getCreateContactActivityClassName()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredPostal(android.content.Context)> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailContentTable: java.lang.String getType(com.android.providers.contacts.VoicemailContentProvider$UriData)> (CONTACT_INFORMATION)
<com.android.contacts.util.ThemeUtils: int getAttribute(android.content.res.Resources$Theme,int)> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: int getCount()> (CONTACT_INFORMATION)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getMe(boolean)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNickname(android.content.Context)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: java.util.Locale getLocale()> (CONTACT_INFORMATION)
<com.android.contacts.model.account.BaseAccountType$NoteKindBuilder: java.lang.String getTagName()> (CONTACT_INFORMATION)
<com.android.contacts.util.WeakAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (CONTACT_INFORMATION)
<com.android.contacts.util.ImageViewDrawableSetter: android.widget.ImageView getTarget()> (CONTACT_INFORMATION)
<com.android.contacts.TypePrecedence: int getTypePrecedence(java.lang.String,int)> (CONTACT_INFORMATION)
<com.android.vcard.VCardParserImpl_V21: java.util.Set getKnownTypeSet()> (CONTACT_INFORMATION)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchShortcutRefresh(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.ContactsDatabaseHelper getThreadActiveDatabaseHelperForTest()> (CONTACT_INFORMATION)
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: java.lang.String getDisplayName()> (CONTACT_INFORMATION)
<com.android.contacts.detail.StreamItemAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.providers.contacts.PhotoProcessor: android.graphics.Bitmap getDisplayPhoto()> (CONTACT_INFORMATION)
<com.android.providers.contacts.DefaultCallLogInsertionHelper: com.android.providers.contacts.DefaultCallLogInsertionHelper getInstance(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.dataitem.DataKind getDataKind()> (CONTACT_INFORMATION)
<com.android.contacts.list.PhoneFavoriteMergedAdapter: long getItemId(int)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactTileAdapter: int getViewTypeCount()> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntry: java.util.ArrayList constructInsertOperations(android.content.ContentResolver,java.util.ArrayList)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (CONTACT_INFORMATION)
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getTokens()> (CONTACT_INFORMATION)
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: long getItemId(int)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: int getMaxThumbnailDim()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForPhone()> (CONTACT_INFORMATION)
<com.android.contacts.activities.ActionBarAdapter$CustomArrayAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.PhotoStore getProfilePhotoStore()> (CONTACT_INFORMATION)
<com.android.contacts.list.DirectoryListLoader: android.database.Cursor loadInBackground()> (CONTACT_INFORMATION)
<com.android.contacts.vcard.ExportVCardActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.account.AccountType$EditType getCurrentType(com.android.contacts.model.RawContactDelta$ValuesDelta,com.android.contacts.model.dataitem.DataKind)> (CONTACT_INFORMATION)
<com.android.contacts.group.GroupBrowseListFragment: android.database.Cursor access$302(com.android.contacts.group.GroupBrowseListFragment,android.database.Cursor)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForIm()> (CONTACT_INFORMATION)
<com.android.contacts.calllog.DefaultVoicemailNotifier: com.android.contacts.calllog.DefaultVoicemailNotifier getInstance(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableMap getStatuses()> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.DataAction: java.lang.CharSequence getSubtitle()> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntryCounter: int getCount()> (CONTACT_INFORMATION)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactTileAdapter: int getFrequentHeaderPosition()> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getEmailData()> (CONTACT_INFORMATION)
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ProfileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> android.permission.READ_PROFILE (CONTACT_INFORMATION)
<com.android.contacts.detail.PhotoSelectionHandler: long getWritableEntityId()> android.permission.READ_SYNC_SETTINGS android.permission.GET_ACCOUNTS (CONTACT_INFORMATION)
<com.android.contacts.util.AccountsListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getInviteContactActionLabel(android.content.Context)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: java.lang.String getViewStreamItemActivity()> (CONTACT_INFORMATION)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> android.permission.READ_CONTACTS android.permission.WAKE_LOCK (CONTACT_INFORMATION)
<com.android.contacts.activities.ActionBarAdapter$CustomArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailTabCarousel: int getAllowedHorizontalScrollLength()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListAdapter: int getSortOrder()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: java.util.Set getAllAccountsWithDataSets()> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.DataItem: android.content.ContentValues getContentValues()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.PhotoStore getPhotoStore()> (CONTACT_INFORMATION)
<com.android.internal.telephony.IIccPhoneBook$Stub: com.android.internal.telephony.IIccPhoneBook asInterface(android.os.IBinder)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getDisplayName()> (CONTACT_INFORMATION)
<com.android.contacts.model.Contact: java.lang.String getDisplayName()> (CONTACT_INFORMATION)
<com.android.providers.contacts.SearchIndexManager$FtsQueryBuilder: com.android.providers.contacts.SearchIndexManager$FtsQueryBuilder getDigitsQueryBuilder(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.detail.ContactDetailFragment$NetworkTitleViewEntry: android.graphics.drawable.Drawable getIcon()> (CONTACT_INFORMATION)
<com.android.vcard.VCardEntry$PhoneData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactListAdapter: long getSelectedContactDirectoryId()> (CONTACT_INFORMATION)
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContact: java.lang.Long getId()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: int getDisplayNameSourceForMimeTypeId(int)> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.account.AccountType getAccountType()> (CONTACT_INFORMATION)
<com.android.mms.data.ContactList: com.android.mms.data.ContactList getByNumbers(java.lang.Iterable,boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailContentProvider: com.android.providers.contacts.ContactsDatabaseHelper getDatabaseHelper(android.content.Context)> (CONTACT_INFORMATION)
<com.android.providers.contacts.MemoryCursor: java.lang.String[] getColumnNames()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.DataRowHandler getDataRowHandler(java.lang.String)> (CONTACT_INFORMATION)
<com.android.vcard.VCardComposer: java.lang.String createOneEntry()> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactsDatabaseHelper: long getPackageId(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListFragment: int getSortOrder()> (CONTACT_INFORMATION)
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: java.lang.String getCurrentPhotoFile()> (CONTACT_INFORMATION)
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getPrefix()> (CONTACT_INFORMATION)
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getItemViewType(int)> (CONTACT_INFORMATION)
<com.android.contacts.list.ContactEntryListAdapter: java.lang.String getContactsCount()> (CONTACT_INFORMATION)
<com.android.contacts.datepicker.DatePicker: int getYear()> (CONTACT_INFORMATION)
<com.android.mms.data.Contact: boolean getSendToVoicemail()> (CONTACT_INFORMATION)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getType(android.net.Uri)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS (CONTACT_INFORMATION)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> android.permission.READ_CONTACTS android.permission.WAKE_LOCK (CONTACT_INFORMATION)
<com.android.contacts.activities.ContactEditorActivity: com.android.contacts.util.DialogManager getDialogManager()> (CONTACT_INFORMATION)
<com.android.contacts.preference.DisplayOrderPreference: java.lang.CharSequence getSummary()> (CONTACT_INFORMATION)
<com.android.providers.contacts.PhotoProcessor: android.graphics.Bitmap getNormalizedBitmap(android.graphics.Bitmap,int,boolean)> (CONTACT_INFORMATION)
<com.android.providers.contacts.ContactDirectoryManager: java.lang.String providerDescription(android.content.pm.ProviderInfo)> (CONTACT_INFORMATION)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEf(int)> (CONTACT_INFORMATION)
<com.android.contacts.datepicker.DatePicker$SavedState: int getDay()> (CONTACT_INFORMATION)
<com.android.contacts.util.DialogManager: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (CONTACT_INFORMATION)
<com.android.contacts.model.RawContact: java.lang.String getAccountName()> (CONTACT_INFORMATION)
<com.android.providers.contacts.VoicemailContentTable: android.database.Cursor query(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.util.StructuredPostalUtils: android.content.Intent getViewPostalAddressIntent(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.NfcHandler: android.nfc.NdefMessage createNdefMessage(android.nfc.NfcEvent)> (CONTACT_INFORMATION)
<com.android.contacts.detail.StreamItemAdapter: long getItemId(int)> (CONTACT_INFORMATION)
<com.android.contacts.ContactSaveService: java.lang.Object getSystemService(java.lang.String)> (CONTACT_INFORMATION)
<com.android.contacts.model.account.AccountType: java.lang.String getCreateContactActivityClassName()> (CONTACT_INFORMATION)
<com.android.contacts.model.dataitem.EmailDataItem: java.lang.String getData()> (CONTACT_INFORMATION)
<com.android.contacts.widget.PinnedHeaderListAdapter: android.view.View getPinnedHeaderView(int,android.view.View,android.view.ViewGroup)> (CONTACT_INFORMATION)
<com.android.contacts.quickcontact.ResolveCache: android.graphics.drawable.Drawable getIcon(com.android.contacts.quickcontact.Action)> (CONTACT_INFORMATION)
<com.android.contacts.model.ContactLoader: android.net.Uri getLookupUri()> (CONTACT_INFORMATION)
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getFamilyName()> (CONTACT_INFORMATION)

CALENDAR_INFORMATION:
<com.android.calendar.Utils: java.lang.String getDisplayedDatetime(long,long,long,java.lang.String,boolean,android.content.Context)> android.permission.READ_CALENDAR (CALENDAR_INFORMATION)
<com.android.calendar.EventRecurrenceFormatter: java.lang.String getRepeatString(android.content.res.Resources,com.android.calendarcommon2.EventRecurrence)> (CALENDAR_INFORMATION)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.widget.RemoteViews getViewAt(int)> (CALENDAR_INFORMATION)
<com.android.calendar.month.SimpleWeekView: int getFirstJulianDay()> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: long getTardis()> (CALENDAR_INFORMATION)
<java.util.Calendar: int getActualMinimum(int)> (CALENDAR_INFORMATION)
<com.android.calendar.month.SimpleWeeksAdapter: android.text.format.Time getSelectedDay()> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: java.lang.Object getItem(int)> (CALENDAR_INFORMATION)
<com.android.calendar.EventInfoFragment: android.database.Cursor access$2002(com.android.calendar.EventInfoFragment,android.database.Cursor)> (CALENDAR_INFORMATION)
<com.android.calendar.alerts.AlertReceiver: com.android.calendar.alerts.AlertService$NotificationWrapper makeDigestNotification(android.content.Context,java.util.ArrayList,java.lang.String,boolean)> (CALENDAR_INFORMATION)
<android.widget.CalendarView: int getDateTextAppearance()> (CALENDAR_INFORMATION)
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)> android.permission.READ_CALENDAR (CALENDAR_INFORMATION)
<com.android.calendar.TimezoneAdapter: int getRowById(java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: java.lang.String[] getSharedPreference(android.content.Context,java.lang.String,java.lang.String[])> (CALENDAR_INFORMATION)
<com.android.calendar.Event: java.lang.String getTitleAndLocation()> (CALENDAR_INFORMATION)
<com.android.calendar.alerts.AlertUtils: android.content.SharedPreferences getFiredAlertsTable(android.content.Context)> (CALENDAR_INFORMATION)
<com.android.calendar.EventInfoFragment: long getStartMillis()> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: int getDeclinedColorFromColor(int)> (CALENDAR_INFORMATION)
<com.android.calendar.alerts.AlertUtils: java.lang.String formatTimeLocation(android.content.Context,long,boolean,java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CALENDAR_INFORMATION)
<com.android.calendar.event.EditEventView$TitleAdapter: int getCount()> (CALENDAR_INFORMATION)
<android.widget.CalendarView$WeekView: java.util.Calendar getFirstDay()> (CALENDAR_INFORMATION)
<com.android.calendar.alerts.AlertReceiver: android.content.Intent createEmailIntent(android.content.Context,long,java.lang.String)> (CALENDAR_INFORMATION)
<java.util.Calendar: java.util.Calendar getInstance()> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: java.lang.String[] getQuickResponses(android.content.Context)> (CALENDAR_INFORMATION)
<com.android.providers.calendar.CalendarProvider2: java.lang.String getType(android.net.Uri)> (CALENDAR_INFORMATION)
<com.android.calendar.event.EditEventFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaWindowAdapter: int getHeaderPositionFromItemPosition(int)> (CALENDAR_INFORMATION)
<com.android.providers.calendar.SQLiteContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: long getItemId(int)> (CALENDAR_INFORMATION)
<com.android.calendar.EventInfoFragment: android.database.Cursor access$900(com.android.calendar.EventInfoFragment)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaWindowAdapter: long getItemId(int)> (CALENDAR_INFORMATION)
<java.util.GregorianCalendar: int getLeastMaximum(int)> (CALENDAR_INFORMATION)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: int getViewTypeCount()> (CALENDAR_INFORMATION)
<com.android.providers.calendar.CalendarDatabaseHelper: com.android.providers.calendar.CalendarDatabaseHelper getInstance(android.content.Context)> (CALENDAR_INFORMATION)
<android.widget.CalendarView: int getWeekDayTextAppearance()> (CALENDAR_INFORMATION)
<com.android.calendar.event.EditEventHelper: long constructDefaultStartTime(long)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (CALENDAR_INFORMATION)
<com.android.calendar.month.MonthByWeekAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CALENDAR_INFORMATION)
<android.widget.CalendarView$WeeksAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CALENDAR_INFORMATION)
<com.android.calendar.AsyncQueryService: int getNextToken()> (CALENDAR_INFORMATION)
<android.widget.CalendarView$WeeksAdapter: long getItemId(int)> (CALENDAR_INFORMATION)
<com.android.calendar.DayView$ScrollInterpolator: float getInterpolation(float)> (CALENDAR_INFORMATION)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: java.lang.String access$500(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.view.View newGroupView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: long getItemId(int)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaWindowAdapter$DayAdapterInfo getAdapterInfoByPosition(int)> (CALENDAR_INFORMATION)
<com.android.calendarcommon2.Duration: long getMillis()> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: int getWeeksSinceEpochFromJulianDay(int,int)> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: int getSharedPreference(android.content.Context,java.lang.String,int)> (CALENDAR_INFORMATION)
<com.android.calendar.DayFragment: long getSelectedTimeInMillis()> (CALENDAR_INFORMATION)
<com.android.providers.calendar.MetaData: com.android.providers.calendar.MetaData$Fields getFieldsLocked()> (CALENDAR_INFORMATION)
<com.android.exchange.utility.CalendarUtilities: com.android.exchange.utility.CalendarUtilities$TimeZoneDate getTimeZoneDateFromSystemTime(byte[],int)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaListView: long getFirstVisibleTime(com.android.calendar.agenda.AgendaWindowAdapter$EventInfo)> (CALENDAR_INFORMATION)
<com.android.calendar.DayFragment: long getSupportedEventTypes()> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CALENDAR_INFORMATION)
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account)> (CALENDAR_INFORMATION)
<com.android.calendar.DayOfMonthDrawable: int getOpacity()> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: int getWeekNumberFromTime(long,android.content.Context)> (CALENDAR_INFORMATION)
<com.android.calendar.month.MonthByWeekFragment: long getSupportedEventTypes()> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: boolean getSharedPreference(android.content.Context,java.lang.String,boolean)> (CALENDAR_INFORMATION)
<com.android.calendar.EventInfoFragment: android.database.Cursor access$600(com.android.calendar.EventInfoFragment)> (CALENDAR_INFORMATION)
<android.widget.CalendarView: int getSelectedWeekBackgroundColor()> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: java.lang.Object getItem(int)> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)> (CALENDAR_INFORMATION)
<java.util.Calendar: java.lang.String getDisplayName(int,int,java.util.Locale)> (CALENDAR_INFORMATION)
<com.android.calendar.month.SimpleWeeksAdapter: long getItemId(int)> (CALENDAR_INFORMATION)
<com.android.providers.calendar.QueryParameterUtils: java.lang.String getQueryParameter(android.net.Uri,java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: java.util.HashMap getChanges()> (CALENDAR_INFORMATION)
<android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])> (CALENDAR_INFORMATION)
<com.android.calendar.SearchActivity: long getSupportedEventTypes()> (CALENDAR_INFORMATION)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.widget.RemoteViews getLoadingView()> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaWindowAdapter: long getSelectedInstanceId()> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaWindowAdapter: int getCount()> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarViewAdapter: java.lang.Object getItem(int)> (CALENDAR_INFORMATION)
<com.android.calendar.EventInfoFragment: android.content.DialogInterface$OnDismissListener access$3400(com.android.calendar.EventInfoFragment)> (CALENDAR_INFORMATION)
<com.android.calendar.AbstractCalendarActivity: com.android.calendar.AsyncQueryService getAsyncQueryService()> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: java.lang.String getDisplayedTimezone(long,java.lang.String,java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarController: long getEventId()> (CALENDAR_INFORMATION)
<android.provider.CalendarContract$CalendarAlerts: long findNextAlarmTime(android.content.ContentResolver,long)> android.permission.READ_CALENDAR (CALENDAR_INFORMATION)
<com.android.exchange.utility.CalendarUtilities: int getTrueTransitionHour(java.util.GregorianCalendar)> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.database.Cursor getChildrenCursor(android.database.Cursor)> android.permission.READ_CALENDAR (CALENDAR_INFORMATION)
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)> (CALENDAR_INFORMATION)
<android.widget.CalendarView$WeeksAdapter: java.lang.Object getItem(int)> (CALENDAR_INFORMATION)
<java.util.Calendar: int getActualMaximum(int)> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: int getCount()> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaWindowAdapter: int getItemViewType(int)> (CALENDAR_INFORMATION)
<com.android.providers.calendar.CalendarProvider2: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)> (CALENDAR_INFORMATION)
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])> android.permission.READ_CALENDAR (CALENDAR_INFORMATION)
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> (CALENDAR_INFORMATION)
<com.android.exchange.utility.CalendarUtilities: java.lang.String getString(byte[],int,int)> (CALENDAR_INFORMATION)
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEntity(android.content.Context,android.content.Entity,int,java.lang.String,com.android.emailcommon.provider.Account)> (CALENDAR_INFORMATION)
<android.widget.CalendarView: int getUnfocusedMonthDateColor()> (CALENDAR_INFORMATION)
<com.android.exchange.utility.CalendarUtilities: int getWord(byte[],int)> (CALENDAR_INFORMATION)
<java.util.Calendar: java.lang.String toString()> (CALENDAR_INFORMATION)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: long getItemId(int)> (CALENDAR_INFORMATION)
<com.android.calendar.TimezoneAdapter: java.lang.CharSequence[][] getAllTimezones()> (CALENDAR_INFORMATION)
<com.android.calendar.event.EditEventFragment: long getSupportedEventTypes()> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarController: long getDateFlags()> (CALENDAR_INFORMATION)
<java.util.Calendar: int getMinimalDaysInFirstWeek()> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: int getDaysPerWeek(android.content.Context)> (CALENDAR_INFORMATION)
<android.widget.CalendarView: int getFocusedMonthDateColor()> (CALENDAR_INFORMATION)
<com.android.calendar.DayView: long getSelectedTimeInMillis()> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: long getNextMidnight(android.text.format.Time,long,java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.Event: long getEndMillis()> (CALENDAR_INFORMATION)
<android.widget.CalendarView: long getMaxDate()> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarController: int getPreviousViewType()> (CALENDAR_INFORMATION)
<com.android.calendar.widget.CalendarAppWidgetProvider: android.app.PendingIntent getLaunchPendingIntentTemplate(android.content.Context)> (CALENDAR_INFORMATION)
<com.android.calendar.month.SimpleWeeksAdapter: int getCount()> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarViewAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> (CALENDAR_INFORMATION)
<com.android.calendar.DayView: int getFirstVisibleHour()> (CALENDAR_INFORMATION)
<com.android.calendar.month.MonthWeekEventsView: int getDayIndexFromLocation(float)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaByDayAdapter: long getItemId(int)> (CALENDAR_INFORMATION)
<android.widget.CalendarView: android.graphics.drawable.Drawable getSelectedDateVerticalBar()> (CALENDAR_INFORMATION)
<com.android.providers.calendar.SQLiteContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (CALENDAR_INFORMATION)
<com.android.calendar.Event: int getColumn()> (CALENDAR_INFORMATION)
<com.android.exchange.adapter.CalendarSyncAdapter: java.lang.String getCollectionName()> (CALENDAR_INFORMATION)
<com.android.calendar.Event: int getMaxColumns()> (CALENDAR_INFORMATION)
<android.widget.CalendarView: int getFirstDayOfWeek()> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarController: long getTime()> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: int getDisplayColorFromColor(int)> (CALENDAR_INFORMATION)
<com.android.exchange.utility.CalendarUtilities: long getUtcAllDayCalendarTime(long,java.util.TimeZone)> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: java.lang.String getSharedPreference(android.content.Context,java.lang.String,java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaByDayAdapter: int getCount()> (CALENDAR_INFORMATION)
<java.util.GregorianCalendar: int getGreatestMinimum(int)> (CALENDAR_INFORMATION)
<com.android.calendar.EventInfoFragment: long getEventId()> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.view.View newChildView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)> (CALENDAR_INFORMATION)
<com.android.calendar.month.SimpleWeekView: int getFirstMonth()> (CALENDAR_INFORMATION)
<android.widget.CalendarView: long getDate()> (CALENDAR_INFORMATION)
<android.widget.CalendarView$WeeksAdapter: int getCount()> (CALENDAR_INFORMATION)
<com.android.calendar.EventInfoFragment: long getSupportedEventTypes()> (CALENDAR_INFORMATION)
<com.android.calendar.alerts.AlertService: boolean updateAlertNotification(android.content.Context)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)> android.permission.READ_CALENDAR (CALENDAR_INFORMATION)
<com.android.calendar.EventInfoFragment: long getEndMillis()> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaListView: com.android.calendar.agenda.AgendaAdapter$ViewHolder getSelectedViewHolder()> (CALENDAR_INFORMATION)
<com.android.calendar.event.EditEventHelper: android.content.ContentValues getContentValuesFromModel(com.android.calendar.CalendarEventModel)> (CALENDAR_INFORMATION)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: int getCount()> (CALENDAR_INFORMATION)
<com.android.providers.calendar.CalendarProvider2: com.android.providers.calendar.CalendarAlarmManager getOrCreateCalendarAlarmManager()> (CALENDAR_INFORMATION)
<com.android.calendar.AsyncQueryServiceHelper$OperationInfo: long getDelay(java.util.concurrent.TimeUnit)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getEventByPosition(int)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarEventModel: java.lang.String getAttendeesString()> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaListView: com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getFirstVisibleEvent()> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: java.lang.String getSearchAuthority(android.content.Context)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarController: com.android.calendar.CalendarController getInstance(android.content.Context)> (CALENDAR_INFORMATION)
<java.util.GregorianCalendar: java.util.Date getGregorianChange()> (CALENDAR_INFORMATION)
<com.android.calendar.GeneralPreferences: java.lang.String getRingtoneTitleFromUri(android.content.Context,java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaWindowAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CALENDAR_INFORMATION)
<android.widget.CalendarView: int getWeekNumberColor()> (CALENDAR_INFORMATION)
<com.android.exchange.utility.CalendarUtilities: int getTrueTransitionMinute(java.util.GregorianCalendar)> (CALENDAR_INFORMATION)
<com.android.providers.calendar.SQLiteContentProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper()> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaWindowAdapter: int getHeaderItemsNumber(int)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarEventModel$ReminderEntry: int getMinutes()> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaWindowAdapter: int getStickyHeaderHeight()> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaByDayAdapter: java.lang.Object getItem(int)> (CALENDAR_INFORMATION)
<java.util.Calendar: java.util.Locale[] getAvailableLocales()> (CALENDAR_INFORMATION)
<com.android.calendar.month.MonthWeekEventsView: android.text.format.Time getDayFromLocation(float)> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: int getVisible(int)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaByDayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> android.permission.READ_CALENDAR (CALENDAR_INFORMATION)
<com.android.calendar.event.EditEventHelper: java.util.LinkedHashSet getAddressesFromList(java.lang.String,com.android.common.Rfc822Validator)> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: java.lang.String getWidgetScheduledUpdateAction(android.content.Context)> (CALENDAR_INFORMATION)
<java.util.Calendar: long getTimeInMillis()> (CALENDAR_INFORMATION)
<android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])> (CALENDAR_INFORMATION)
<com.android.calendar.DayView: android.text.format.Time getSelectedTime()> (CALENDAR_INFORMATION)
<java.util.Calendar: java.util.Date getTime()> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaByDayAdapter: int getViewTypeCount()> (CALENDAR_INFORMATION)
<com.android.exchange.utility.CalendarUtilities: long getLocalAllDayCalendarTime(long,java.util.TimeZone)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarEventModel$ReminderEntry: int getMethod()> (CALENDAR_INFORMATION)
<com.android.calendar.extensions.AllInOneMenuExtensions: java.lang.Integer getExtensionMenuResource(android.view.Menu)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaWindowAdapter: java.lang.Object getItem(int)> (CALENDAR_INFORMATION)
<com.android.providers.calendar.CalendarProvider2: java.lang.String getTimezoneDatabaseVersion()> (CALENDAR_INFORMATION)
<com.android.providers.calendar.CalendarCache: java.lang.String readDataLocked(android.database.sqlite.SQLiteDatabase,java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaByDayAdapter: long getInstanceId(int)> (CALENDAR_INFORMATION)
<com.android.exchange.utility.CalendarUtilities: java.lang.String getUidFromGlobalObjId(java.lang.String)> (CALENDAR_INFORMATION)
<com.android.exchange.utility.CalendarUtilities: boolean getDSTCalendars(java.util.TimeZone,java.util.GregorianCalendar[],java.util.GregorianCalendar[])> (CALENDAR_INFORMATION)
<com.android.calendar.GeneralPreferences: android.content.SharedPreferences getSharedPreferences(android.content.Context)> (CALENDAR_INFORMATION)
<com.android.calendar.month.SimpleWeeksAdapter: java.lang.Object getItem(int)> (CALENDAR_INFORMATION)
<android.widget.CalendarView$WeekView: int getMonthOfLastWeekDay()> (CALENDAR_INFORMATION)
<java.util.GregorianCalendar: int getMaximum(int)> (CALENDAR_INFORMATION)
<android.widget.CalendarView$WeeksAdapter: java.util.Calendar getSelectedDay()> (CALENDAR_INFORMATION)
<android.provider.CalendarContract$CalendarEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getEventByPosition(int,boolean)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaByDayAdapter: int getHeaderPosition(int)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaByDayAdapter: long getStartTime(int)> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: long getSupportedEventTypes()> (CALENDAR_INFORMATION)
<java.util.Calendar: java.util.TimeZone getTimeZone()> (CALENDAR_INFORMATION)
<java.util.GregorianCalendar: int getActualMinimum(int)> (CALENDAR_INFORMATION)
<com.android.calendar.widget.CalendarAppWidgetProvider: android.content.ComponentName getComponentName(android.content.Context)> (CALENDAR_INFORMATION)
<com.android.providers.calendar.CalendarProvider2: com.android.providers.calendar.CalendarProvider2 getInstance()> (CALENDAR_INFORMATION)
<com.android.providers.calendar.CalendarAlarmManager: android.os.PowerManager$WakeLock getScheduleNextAlarmWakeLock()> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarController$EventInfo: int getResponse()> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: java.lang.CharSequence getLabelForType(java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.Event: long getStartMillis()> (CALENDAR_INFORMATION)
<com.android.calendar.widget.CalendarAppWidgetProvider: android.content.Intent getLaunchFillInIntent(android.content.Context,long,long,long,boolean)> (CALENDAR_INFORMATION)
<com.android.calendar.EventInfoFragment: android.database.Cursor access$2000(com.android.calendar.EventInfoFragment)> (CALENDAR_INFORMATION)
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarViewAdapter: int getViewTypeCount()> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaAdapter$ViewHolder getSelectedViewHolder()> (CALENDAR_INFORMATION)
<com.android.calendar.DayView: int getEventsAlpha()> (CALENDAR_INFORMATION)
<com.android.calendar.alerts.AlertActivity: android.database.Cursor access$002(com.android.calendar.alerts.AlertActivity,android.database.Cursor)> (CALENDAR_INFORMATION)
<com.android.providers.calendar.CalendarDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> (CALENDAR_INFORMATION)
<java.util.Calendar: java.lang.Object clone()> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarController: int getViewType()> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaByDayAdapter: int getCursorPosition(int)> (CALENDAR_INFORMATION)
<com.android.calendar.AllInOneActivity: long getSupportedEventTypes()> (CALENDAR_INFORMATION)
<android.widget.CalendarView$WeekView: int getMonthOfFirstWeekDay()> (CALENDAR_INFORMATION)
<com.android.calendar.month.SimpleWeeksAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CALENDAR_INFORMATION)
<java.util.Calendar: int getFirstDayOfWeek()> (CALENDAR_INFORMATION)
<com.android.calendar.EventInfoFragment: android.database.Cursor access$1802(com.android.calendar.EventInfoFragment,android.database.Cursor)> (CALENDAR_INFORMATION)
<com.android.calendar.EditResponseHelper: int getWhichEvents()> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter$TabletCalendarItemBackgrounds: int[] getBackgrounds()> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaListView: long getSelectedInstanceId()> (CALENDAR_INFORMATION)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: java.lang.Runnable access$800(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory,java.lang.String,android.content.BroadcastReceiver$PendingResult,int)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaFragment: long getSupportedEventTypes()> (CALENDAR_INFORMATION)
<android.widget.CalendarView: int getWeekSeparatorLineColor()> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaListView: android.view.View getFirstVisibleView()> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: android.database.Cursor access$102(com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment,android.database.Cursor)> (CALENDAR_INFORMATION)
<android.widget.CalendarView: long getMinDate()> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: java.lang.String getWidgetUpdateAction(android.content.Context)> (CALENDAR_INFORMATION)
<java.util.GregorianCalendar: int getActualMaximum(int)> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: int getCount()> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarViewAdapter: int getCount()> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarViewAdapter: long getItemId(int)> (CALENDAR_INFORMATION)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri access$200(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)> (CALENDAR_INFORMATION)
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)> (CALENDAR_INFORMATION)
<com.android.calendar.EventInfoFragment: android.database.Cursor access$602(com.android.calendar.EventInfoFragment,android.database.Cursor)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: java.lang.String getDayOfWeekString(int,int,long,android.content.Context)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaWindowAdapter: int getViewTypeCount()> (CALENDAR_INFORMATION)
<java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: java.lang.String getVersionCode(android.content.Context)> (CALENDAR_INFORMATION)
<com.android.calendar.month.SimpleWeekView: android.text.format.Time getDayFromLocation(float)> (CALENDAR_INFORMATION)
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account,java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.EventInfoFragment: android.database.Cursor access$902(com.android.calendar.EventInfoFragment,android.database.Cursor)> (CALENDAR_INFORMATION)
<com.android.calendar.DayView: android.text.format.Time getSelectedTimeForAccessibility()> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaFragment: long getLastShowEventId()> (CALENDAR_INFORMATION)
<com.android.calendar.alerts.AlertActivity: android.database.Cursor getItemForView(android.view.View)> (CALENDAR_INFORMATION)
<com.android.calendar.widget.CalendarAppWidgetProvider: android.app.PendingIntent getUpdateIntent(android.content.Context)> (CALENDAR_INFORMATION)
<com.android.providers.calendar.SQLiteContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])> (CALENDAR_INFORMATION)
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: android.graphics.drawable.Drawable getBackground(int,boolean)> (CALENDAR_INFORMATION)
<java.util.Calendar: int get(int)> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: int getJulianMondayFromWeeksSinceEpoch(int)> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaByDayAdapter: int getItemViewType(int)> (CALENDAR_INFORMATION)
<com.android.exchange.utility.CalendarUtilities: int getLong(byte[],int)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarUtils: android.content.SharedPreferences getSharedPreferences(android.content.Context,java.lang.String)> (CALENDAR_INFORMATION)
<com.android.providers.calendar.CalendarProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (CALENDAR_INFORMATION)
<com.android.calendar.ExpandableTextView: java.lang.CharSequence getText()> (CALENDAR_INFORMATION)
<com.android.calendar.agenda.AgendaByDayAdapter: int getHeaderItemsCount(int)> (CALENDAR_INFORMATION)
<com.android.exchange.utility.CalendarUtilities: long getMillisAtTimeZoneDateTransition(java.util.TimeZone,com.android.exchange.utility.CalendarUtilities$TimeZoneDate)> (CALENDAR_INFORMATION)
<android.widget.CalendarView: int getShownWeekCount()> (CALENDAR_INFORMATION)
<com.android.calendar.Utils: int getFirstDayOfWeek(android.content.Context)> (CALENDAR_INFORMATION)
<java.util.GregorianCalendar: int getMinimum(int)> (CALENDAR_INFORMATION)
<com.android.calendar.month.SimpleWeekView: int getLastMonth()> (CALENDAR_INFORMATION)
<android.widget.CalendarView: boolean getShowWeekNumber()> (CALENDAR_INFORMATION)
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)> (CALENDAR_INFORMATION)
<com.android.calendar.CalendarViewAdapter: int getItemViewType(int)> (CALENDAR_INFORMATION)

SYSTEM_SETTINGS:
<com.android.internal.telephony.sip.SipPhoneBase: boolean getCallForwardingIndicator()> (SYSTEM_SETTINGS)
<gov.nist.javax.sip.address.SipUri: java.lang.String getUserPassword()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getTotalTcpBytesReceived(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void getEnhancedVoicePrivacy(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiMulticastTime(long,int)> (SYSTEM_SETTINGS)
<gov.nist.javax.sip.address.UserInfo: java.lang.String getPassword()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getTimeAtCpuSpeedStep(int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void getNeighboringCids(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getBatteryRealtime(long)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<android.webkit.WebSettingsClassic: boolean getDomStorageEnabled()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String,int)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: int getBluetoothPingCount()> android.permission.BLUETOOTH (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getPackageStats()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone$SipConnection: boolean getMute()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccFileHandler getIccFileHandler()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: boolean getUnitTestMode()> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getDevPersistBytes(long)> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsCollection: long getTotalBytes()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: boolean getIccRecordsLoaded()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: java.util.List getAllCellInfo()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: android.content.Context getContext()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void getCallWaiting(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getWifiOnTime(long,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: android.telephony.SignalStrength getSignalStrength()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccFileHandler getIccFileHandler()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: int getUid()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: int getInputEventCount(int)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(int,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: int getCdmaEriIconMode()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: int getLowDischargeAmountSinceCharge()> (SYSTEM_SETTINGS)
<android.webkit.WebSettings: boolean getSavePassword()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)> (SYSTEM_SETTINGS)
<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledProtocols()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccCard getIccCard()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$SamplingTimer getKernelWakelockTimerLocked(java.lang.String)> (SYSTEM_SETTINGS)
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getCGI3GPP()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOnSinceCharge()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Uid$Pid getPidStatsLocked(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: boolean getCallForwardingIndicator()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DataConnectionTracker: boolean getDataOnRoamingEnabled()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.ims.IsimRecords getIsimRecords()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IccCardProxy: boolean getIccFdnEnabled()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: int getLteOnCdmaMode()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String[] getIsimImpu()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone$SipConnection: int getNumberPresentation()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsCollection: long getFirstAtomicBucketMillis()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void getNeighboringCids(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.SignalStrength getSignalStrength()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Timer: long getTotalTimeLocked(long,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getBackgroundCall()> (SYSTEM_SETTINGS)
<com.android.internal.widget.LockPatternUtils: int getRequestedMinimumPasswordLength()> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsCollection: long getStartMillis()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getStartTimeToNowLocked(long)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: int getLteOnCdmaMode()> (SYSTEM_SETTINGS)
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getAwakeTimeBattery()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void getCallWaiting(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection getOrLoadCompleteLocked()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getUidPersistBytes(long)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IccFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (SYSTEM_SETTINGS)
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getEnabledCipherSuites()> (SYSTEM_SETTINGS)
<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.widget.ILockSettings$Stub$Proxy: boolean getBoolean(java.lang.String,boolean,int)> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsCollection: long getEndMillis()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: java.util.List getPendingMmiCodes()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: android.telephony.ServiceState getServiceState()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(int,java.lang.String,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: int getLaunches(int)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getGlobalWifiRunningTime(long,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: java.util.List getPendingMmiCodes()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: android.telephony.ServiceState getServiceState()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiScanTime(long,int)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledLockingShiftTables()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getBatteryRealtimeLocked(long)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: int getHandle()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.UiccCardApplication: boolean getIccLockEnabled()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl getBatteryStats()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: int getStarts(int)> (SYSTEM_SETTINGS)
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getEnabledProtocols()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumLetters()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccFileHandler getIccFileHandler()> (SYSTEM_SETTINGS)
<android.webkit.WebSettings: boolean getDatabaseEnabled()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.SparseArray getPidStats()> (SYSTEM_SETTINGS)
<com.android.server.am.BatteryStatsService: com.android.internal.os.BatteryStatsImpl getActiveStatistics()> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getPollInterval()> android.permission.STOP_APP_SWITCHES (SYSTEM_SETTINGS)
<com.android.server.am.BatteryStatsService: long getAwakeTimeBattery()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: boolean getMute()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getPhoneSignalStrengthTime(int,long,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: android.os.Handler getHandler()> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getXtConfig()> (SYSTEM_SETTINGS)
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getEnabledProtocols()> (SYSTEM_SETTINGS)
<com.android.server.pm.Settings: int getComponentEnabledSettingLPr(android.content.ComponentName,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccCardApplicationStatus$AppType getCurrentUiccAppType()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: boolean getMessageWaitingIndicator()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$StopwatchTimer getWakeTimerLocked(java.lang.String,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: int getPhoneType()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.ServiceState getServiceState()> (SYSTEM_SETTINGS)
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.lang.String getString(java.lang.String,java.lang.String,int)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getMobileTcpBytesSent(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()> (SYSTEM_SETTINGS)
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getEnabledCipherSuites()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: int getCdmaEriIconMode()> (SYSTEM_SETTINGS)
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumNumeric()> android.permission.STOP_APP_SWITCHES (SYSTEM_SETTINGS)
<android.webkit.WebSettingsClassic: boolean getJavaScriptEnabled()> (SYSTEM_SETTINGS)
<android.webkit.WebSettingsClassic: boolean getPluginsEnabled()> (SYSTEM_SETTINGS)
<com.android.internal.widget.LockSettingsService: long getLong(java.lang.String,long,int)> (SYSTEM_SETTINGS)
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getEnabledProtocols()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: boolean getMessageWaitingIndicator()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getScreenOnTime(long,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Phone getPhone()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getBluetoothOnTime(long,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getSensorStats()> (SYSTEM_SETTINGS)
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneConstants$State getState()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: boolean getMessageWaitingIndicator()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: android.net.LinkProperties getLinkProperties(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call getCall()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOffSinceCharge()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: boolean getDataRoamingEnabled()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: int getUserActivityCount(int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccCard getIccCard()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getPhoneOnTime(long,int)> (SYSTEM_SETTINGS)
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumSymbols()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: int getPhoneDataConnectionCount(int,int)> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStatsHistory getHistory(android.net.NetworkTemplate,int,int,int,int,long,long)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void getDataCallList(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: java.util.Map getKernelWakelockStats()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(java.lang.String,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.server.pm.Settings: int getApplicationEnabledSettingLPr(java.lang.String,int)> (SYSTEM_SETTINGS)
<android.webkit.WebSettingsClassic: boolean getSavePassword()> (SYSTEM_SETTINGS)
<android.webkit.WebSettingsClassic: boolean getDatabaseEnabled()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getBackgroundCall()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: int getStarts(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: java.lang.String[] getActiveApnTypes()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: long getAudioTurnedOnTime(long,int)> (SYSTEM_SETTINGS)
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getEnabledCipherSuites()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getHistoryBaseTime()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()> (SYSTEM_SETTINGS)
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getEnabledCipherSuites()> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getXtPersistBytes(long)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RIL: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: byte[] readFully(java.io.FileInputStream)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccCard getIccCard()> (SYSTEM_SETTINGS)
<android.webkit.WebSettings: boolean getLightTouchEnabled()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneConstants$State getState()> (SYSTEM_SETTINGS)
<com.android.server.sip.SipSessionGroup$SipSessionImpl$2$1: java.lang.String getPassword()> (SYSTEM_SETTINGS)
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.Object getExtensionAccessInfo()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: android.net.LinkProperties getLinkProperties(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void getCellBroadcastSmsConfig(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: int getUpdateVersion()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: boolean getCallForwardingIndicator()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: int getPhoneType()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void getEnhancedVoicePrivacy(android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: int getStartCount()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumUpperCase()> (SYSTEM_SETTINGS)
<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledCipherSuites()> android.permission.STOP_APP_SWITCHES (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone$SipCall: java.util.List getConnections()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: int getDischargeStartLevel()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getForegroundCall()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getPhoneDataConnectionTime(int,long,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccCard getIccCard()> (SYSTEM_SETTINGS)
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int,java.net.InetAddress)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: boolean getDataRoamingEnabled()> (SYSTEM_SETTINGS)
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getAccessType()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getCurrentDataConnectionList()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getPendingMmiCodes()> (SYSTEM_SETTINGS)
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumLowerCase()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.UiccCardApplication: boolean getIccFdnEnabled()> (SYSTEM_SETTINGS)
<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()> android.permission.STOP_APP_SWITCHES (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getWakelockStats()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: java.util.Map getServiceStats()> (SYSTEM_SETTINGS)
<gov.nist.core.net.SslNetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)> (SYSTEM_SETTINGS)
<com.android.server.NetworkManagementSocketTagger: int getThreadSocketStatsTag()> (SYSTEM_SETTINGS)
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getEnabledCipherSuites()> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getDevConfig()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getScreenBrightnessTime(int,long,int)> (SYSTEM_SETTINGS)
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getEnabledProtocols()> android.permission.STOP_APP_SWITCHES (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: boolean getIccRecordsLoaded()> (SYSTEM_SETTINGS)
<android.webkit.WebSettingsClassic: boolean getAutoFillEnabled()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledSingleShiftTables()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void getAvailableNetworks(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void getSmscAddress(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: int getWakeups(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: int getVoiceMessageCount()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: android.util.SparseArray getUidStats()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: boolean getDataRoamingEnabled()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: void getCallForwardingOption(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: android.os.BatteryStats$Timer getSensorTime()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void getCallForwardingOption(int,android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: int getPhoneSignalStrengthCount(int,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Connection dial(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: int getPhoneType()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getRingingCall()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneConstants$State getState()> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getUidConfig()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Counter: int getCountLocked(int)> (SYSTEM_SETTINGS)
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordQuality()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CallTracker getCallTracker()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipConnectionBase: int getNumberPresentation()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptime(long)> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getTimeCacheMaxAge()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getRadioDataUptime()> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getGlobalAlertBytes(long)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getForegroundTime(int)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getAwakeTimePlugged()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: long getTcpBytesSent(int)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: com.android.internal.os.BatteryStatsImpl getBatteryStats()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String[] getIsimImpu()> (SYSTEM_SETTINGS)
<com.android.internal.widget.LockPatternUtils: int getActivePasswordQuality()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: int getDischargeCurrentLevelLocked()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOff()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: boolean getDataRoamingEnabled()> (SYSTEM_SETTINGS)
<android.webkit.WebSettings: boolean getJavaScriptEnabled()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Phone getActivePhone()> (SYSTEM_SETTINGS)
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.lang.String[] getEnabledCipherSuites()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getEnhancedVoicePrivacy(android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: java.util.List getAllCellInfo()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()> (SYSTEM_SETTINGS)
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordHistoryLength()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.DataConnectionTracker: boolean getAnyDataEnabled()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getLaunchTimeToNowLocked(long)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: java.lang.String[] getActiveApnTypes()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(int,java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: android.telephony.SignalStrength getSignalStrength()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: int getCdmaEriIconIndex()> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStats getSummary(android.net.NetworkTemplate,long,long)> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStatsHistory getHistory(android.net.NetworkTemplate,int,int,int,int)> (SYSTEM_SETTINGS)
<android.webkit.WebSettings: boolean getPluginsEnabled()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State getState()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void getAvailableNetworks(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getUserTime(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getMobileTcpBytesReceived(int)> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getUidTagPersistBytes(long)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: int getHighDischargeAmountSinceCharge()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: void getEnhancedVoicePrivacy(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: android.telephony.SignalStrength getSignalStrength()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.rtp.AudioGroup getAudioGroup()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getRadioDataUptimeMs()> android.permission.STOP_APP_SWITCHES (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getStartTime(long,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: boolean getDataRoamingEnabled()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Phone getPhone()> (SYSTEM_SETTINGS)
<android.webkit.WebSettingsClassic: boolean getHardwareAccelSkiaEnabled()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$State getState()> (SYSTEM_SETTINGS)
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLServerSocket createSSLServerSocket(int,int,java.net.InetAddress)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: long getVideoTurnedOnTime(long,int)> (SYSTEM_SETTINGS)
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getPhoneSignalScanningTime(long,int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getDefaultPhone()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOn()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: long getFullWifiLockTime(long,int)> (SYSTEM_SETTINGS)
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumNonLetter()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ims.IsimRecords getIsimRecords()> (SYSTEM_SETTINGS)
<android.webkit.WebSettings: boolean getDomStorageEnabled()> (SYSTEM_SETTINGS)
<gov.nist.javax.sip.address.Authority: java.lang.String getPassword()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.RILRequest: com.android.internal.telephony.RILRequest obtain(int,android.os.Message)> (SYSTEM_SETTINGS)
<android.webkit.WebSettingsClassic: boolean getLightTouchEnabled()> (SYSTEM_SETTINGS)
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.CipherSuite[] getEnabledCipherSuitesMember()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: int getDischargeCurrentLevel()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void getDataCallList(android.os.Message)> (SYSTEM_SETTINGS)
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getEnabledProtocols()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: int getVoiceMessageCount()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: boolean isDataConnectivityPossible()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid getUidStatsLocked(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: int getVoiceMessageCount()> (SYSTEM_SETTINGS)
<com.android.server.NetworkManagementService: boolean getIpForwardingEnabled()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: long getTcpBytesReceived(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()> (SYSTEM_SETTINGS)
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.lang.String[] getEnabledProtocols()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getProcessStats()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: boolean getUnitTestMode()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: com.android.internal.os.BatteryStatsImpl getBatteryStats()> (SYSTEM_SETTINGS)
<com.android.server.am.BatteryStatsService: byte[] getStatistics()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptimeLocked()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void getDataCallList(android.os.Message)> (SYSTEM_SETTINGS)
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getDSLLocation()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: boolean getMute()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getForegroundCall()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getAllCellInfo()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Wakelock: android.os.BatteryStats$Timer getWakeTime(int)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiRunningTime(long,int)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getTotalTcpBytesSent(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: void getCallWaiting(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: android.content.Context getContext()> (SYSTEM_SETTINGS)
<com.android.internal.widget.LockPatternUtils: int getKeyguardStoredPasswordQuality()> (SYSTEM_SETTINGS)
<com.android.server.am.BatteryStatsService: long getAwakeTimePlugged()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: com.android.internal.os.BatteryStatsImpl getBatteryStats()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: boolean getIccRecordsLoaded()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: boolean getMessageWaitingIndicator()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getRingingCall()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneConstants$State getState()> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getUidTagConfig()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: int getCpuSpeedSteps()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: void getOutgoingCallerIdDisplay(android.os.Message)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: android.os.BatteryStats$Uid$Proc$ExcessivePower getExcessivePower(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.IccCardProxy: boolean getIccLockEnabled()> (SYSTEM_SETTINGS)
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getCI3GPP2()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: boolean getCallForwardingIndicator()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean getAnyDataEnabled()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$StopwatchTimer getSensorTimerLocked(int,boolean)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: boolean getIsOnBattery()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: int getCdmaEriIconIndex()> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Timer: int getCountLocked(int)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.PhoneProxy: java.util.List getAllCellInfo()> (SYSTEM_SETTINGS)
<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhone: java.util.List getCurrentDataConnectionList()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptimeLocked(long)> (SYSTEM_SETTINGS)
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()> (SYSTEM_SETTINGS)
<com.android.internal.widget.ILockSettings$Stub$Proxy: long getLong(java.lang.String,long,int)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: int getDischargeStartLevelLocked()> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getSystemTime(int)> (SYSTEM_SETTINGS)
<com.android.internal.os.BatteryStatsImpl: long getProcessWakeTime(int,int,long)> (SYSTEM_SETTINGS)
<com.android.internal.widget.ILockSettings$Stub: android.os.IBinder asBinder()> (SYSTEM_SETTINGS)

IMAGE:
<com.android.gallery3d.data.UriImage: com.android.gallery3d.data.MediaDetails getDetails()> (IMAGE)
<com.android.gallery3d.ui.GLView: int getVisibility()> (IMAGE)
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.BytesBufferPool getBytesBufferPool()> (IMAGE)
<com.android.gallery3d.exif.ExifTag: long getUnsignedLong(int)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageCrop: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: int getViewTypeCount()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: com.google.android.picasastore.PicasaStoreFacade getPicasaStoreFacade()> (IMAGE)
<com.android.gallery3d.data.FilterEmptyPromptSet: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.exif.ExifData: int getStripCount()> (IMAGE)
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getExpectedUsedBytes()> (IMAGE)
<com.android.gallery3d.exif.ExifData: byte[] getCompressedThumbnail()> (IMAGE)
<com.android.gallery3d.data.FilterDeleteSet: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaAlbum: android.database.Cursor internalQuery(int,int)> (IMAGE)
<com.android.gallery3d.data.BitmapPool: android.graphics.Bitmap getBitmap(int,int)> (IMAGE)
<com.android.gallery3d.picasasource.PicasaImage: com.android.gallery3d.data.Face[] getFaces()> (IMAGE)
<com.android.gallery3d.ui.TileImageView$Tile: int getTextureWidth()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getFlipMatrix(float,float,com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Bitmap getGeometryOnlyImage()> (IMAGE)
<com.android.gallery3d.ui.TiledScreenNail: int getWidth()> (IMAGE)
<com.android.gallery3d.common.LongSparseArray: java.lang.Object get(long)> (IMAGE)
<com.android.gallery3d.data.LocalAlbum: int getMediaItemCount()> (IMAGE)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: int getCount()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.app.GalleryApp getApplication()> (IMAGE)
<com.android.gallery3d.filtershow.presets.ImagePreset: com.android.gallery3d.filtershow.cache.ImageLoader getImageLoader()> (IMAGE)
<com.android.gallery3d.data.Face: android.graphics.Rect getPosition()> (IMAGE)
<com.android.gallery3d.data.MtpClient: android.mtp.MtpObjectInfo getObjectInfo(java.lang.String,int)> (IMAGE)
<com.android.gallery3d.ui.CropView: int getImageWidth()> (IMAGE)
<com.android.gallery3d.provider.GalleryProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (IMAGE)
<com.android.gallery3d.data.ClusterAlbumSet: int getSubMediaSetCount()> (IMAGE)
<com.android.gallery3d.util.ThreadPool$Worker: java.lang.Object get()> (IMAGE)
<com.android.gallery3d.data.LocalAlbumSet: int getSubMediaSetCount()> (IMAGE)
<com.android.gallery3d.app.ActivityState: float[] getBackgroundColor()> (IMAGE)
<com.android.gallery3d.exif.ExifTag: int getOffset()> (IMAGE)
<com.android.gallery3d.ui.SlotView$IntegerAnimation: int get()> (IMAGE)
<com.android.gallery3d.util.LightCycleHelper: com.android.gallery3d.util.LightCycleHelper$PanoramaMetadata getPanoramaMetadata(android.content.Context,android.net.Uri)> (IMAGE)
<com.android.gallery3d.exif.Rational: long getNominator()> (IMAGE)
<com.android.gallery3d.filtershow.filters.ImageFilter: int getMaxParameter()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getOriginalToScreen(boolean,float,float,float,float)> (IMAGE)
<com.android.gallery3d.exif.IfdData: com.android.gallery3d.exif.ExifTag getTag(short)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF unrotatedCropBounds()> (IMAGE)
<com.android.gallery3d.data.MediaObject: int getCacheFlag()> (IMAGE)
<com.android.gallery3d.filtershow.cache.ZoomCache: android.graphics.Bitmap getImage(com.android.gallery3d.filtershow.presets.ImagePreset,android.graphics.Rect)> (IMAGE)
<com.android.gallery3d.picasasource.PicasaAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (IMAGE)
<com.android.gallery3d.app.SinglePhotoDataAdapter: int getLoadingState(int)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.PanelController getPanelController()> (IMAGE)
<com.android.gallery3d.ui.ResourceTexture: int getHeight()> (IMAGE)
<com.android.gallery3d.ui.PhotoView: boolean getFilmMode()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: long getDateTaken(com.android.gallery3d.data.MediaObject)> (IMAGE)
<com.android.gallery3d.ui.Paper: float[] getTransform(android.graphics.Rect,float)> (IMAGE)
<com.android.gallery3d.ui.BitmapLoader: android.graphics.Bitmap getBitmap()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: long getTotalTargetCacheSize()> (IMAGE)
<com.android.gallery3d.ui.PreparePageFadeoutTexture: com.android.gallery3d.ui.RawTexture get()> (IMAGE)
<com.android.gallery3d.app.TimeBar: int getPreferredHeight()> (IMAGE)
<com.android.gallery3d.filtershow.HistoryAdapter: com.android.gallery3d.filtershow.presets.ImagePreset getLast()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageRotate: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.ui.PositionController: android.graphics.Rect getPosition(int)> (IMAGE)
<com.android.gallery3d.ui.BitmapTileProvider: com.android.gallery3d.ui.ScreenNail getScreenNail()> (IMAGE)
<com.android.gallery3d.app.AlbumSetDataLoader: com.android.gallery3d.data.MediaSet getMediaSet(int)> (IMAGE)
<com.android.gallery3d.filtershow.cache.ImageLoader: android.net.Uri getUri()> (IMAGE)
<com.android.gallery3d.app.AlbumSetPage: int getBackgroundColorId()> (IMAGE)
<com.android.gallery3d.data.LocalImage: int getRotation()> (IMAGE)
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.data.DataManager getDataManager()> (IMAGE)
<com.android.gallery3d.data.LocalVideo: int getMediaType()> (IMAGE)
<com.android.gallery3d.filtershow.PanelController$Panel: int getPosition()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.RectF getCropBounds(android.graphics.Bitmap)> (IMAGE)
<com.android.gallery3d.data.LocalAlbum: android.database.Cursor getItemCursor(android.content.ContentResolver,android.net.Uri,java.lang.String[],int)> (IMAGE)
<com.android.gallery3d.data.MtpImage: int getMediaType()> (IMAGE)
<com.android.gallery3d.data.SecureAlbum: int getMediaItemCount()> (IMAGE)
<com.android.gallery3d.ui.BasicTexture: int getWidth()> (IMAGE)
<com.android.gallery3d.data.LocalImage$LocalLargeImageRequest: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)> (IMAGE)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: long getItemId(int)> (IMAGE)
<com.android.gallery3d.data.MediaObject: int getTypeFromString(java.lang.String)> (IMAGE)
<com.android.gallery3d.data.LocalMediaItem: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.ui.GLView: int getMeasuredHeight()> (IMAGE)
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap getOriginalBitmapLarge()> (IMAGE)
<com.android.gallery3d.app.PhotoDataAdapter: int getImageRotation(int)> (IMAGE)
<com.android.gallery3d.data.FilterEmptyPromptSet: java.util.ArrayList getMediaItem(int,int)> (IMAGE)
<com.android.gallery3d.app.AlbumSetDataLoader: com.android.gallery3d.data.MediaItem getCoverItem(int)> (IMAGE)
<com.android.gallery3d.data.LocalVideo: java.lang.String getFilePath()> (IMAGE)
<com.android.gallery3d.data.UriImage: int getHeight()> (IMAGE)
<com.android.gallery3d.app.TransitionStore: java.lang.Object get(java.lang.Object)> (IMAGE)
<com.android.gallery3d.data.BytesBufferPool: com.android.gallery3d.data.BytesBufferPool$BytesBuffer get()> (IMAGE)
<com.android.gallery3d.app.ManageCachePage: int getBackgroundColorId()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: float getScaleFactor()> (IMAGE)
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (IMAGE)
<com.android.gallery3d.data.MtpImage: long getSize()> (IMAGE)
<com.android.gallery3d.data.MediaDetails: java.lang.Object getDetail(int)> (IMAGE)
<com.android.gallery3d.exif.ExifParser: com.android.gallery3d.exif.ExifTag getTag()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.RectF getPhotoBounds()> (IMAGE)
<com.android.gallery3d.common.OverScroller: float getCurrVelocity()> (IMAGE)
<com.android.gallery3d.ui.GLView: int getMeasuredWidth()> (IMAGE)
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: java.lang.Object getItem(int)> (IMAGE)
<com.android.gallery3d.ui.PositionController: int getImageAtEdges()> (IMAGE)
<com.android.gallery3d.exif.ExifTag: int getDataSize()> (IMAGE)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> (IMAGE)
<com.android.gallery3d.data.MediaSource: long getTotalUsedCacheSize()> (IMAGE)
<com.android.gallery3d.data.LocalAlbum: com.android.gallery3d.data.MediaItem[] getMediaItemById(com.android.gallery3d.app.GalleryApp,boolean,java.util.ArrayList)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageShow: int getDefaultBackgroundColor()> (IMAGE)
<com.android.gallery3d.app.PhotoPage: android.content.Intent access$2600(android.net.Uri)> (IMAGE)
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap getImageForPreset(com.android.gallery3d.filtershow.imageshow.ImageShow,com.android.gallery3d.filtershow.presets.ImagePreset,boolean)> (IMAGE)
<com.android.gallery3d.common.EntrySchema: com.android.gallery3d.common.EntrySchema$ColumnInfo getColumn(java.lang.String)> (IMAGE)
<com.android.gallery3d.data.ComboAlbumSet: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.ui.RawTexture: int getTextureWidth()> (IMAGE)
<com.android.gallery3d.ui.EdgeEffect$Drawable: int getIntrinsicWidth()> (IMAGE)
<com.android.gallery3d.ui.GLRootView: android.graphics.Matrix getCompensationMatrix()> (IMAGE)
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItems()> (IMAGE)
<com.android.gallery3d.ui.BitmapTexture: android.graphics.Bitmap getBitmap()> (IMAGE)
<com.android.gallery3d.data.DataManager: long getTotalUsedCacheSize()> (IMAGE)
<com.android.gallery3d.filtershow.filters.ImageFilter: int getParameter()> (IMAGE)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(com.android.gallery3d.data.Path)> (IMAGE)
<com.android.gallery3d.ui.CropView: int getImageHeight()> (IMAGE)
<com.android.gallery3d.ui.SlotView: int getVisibleStart()> (IMAGE)
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItem(int,int)> (IMAGE)
<com.android.gallery3d.util.JobLimiter$JobWrapper: java.lang.Object get()> (IMAGE)
<com.android.gallery3d.data.TagClustering: java.lang.String getClusterName(int)> (IMAGE)
<com.android.gallery3d.app.PhotoDataAdapter: int getLevelCount()> (IMAGE)
<com.android.gallery3d.data.LocalAlbum: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaImage: java.lang.String getMimeType()> (IMAGE)
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: int getCount()> (IMAGE)
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getUsedBytes()> (IMAGE)
<com.android.gallery3d.data.ActionImage: android.net.Uri getContentUri()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaImage: android.net.Uri getPlayUri()> (IMAGE)
<com.android.gallery3d.ui.AnimationTime: long get()> (IMAGE)
<com.android.gallery3d.data.Face: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.ui.TileImageView$Tile: int getTextureHeight()> (IMAGE)
<com.android.gallery3d.ui.ExtTexture: int getWidth()> (IMAGE)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(java.lang.String)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.imageshow.ImageShow getMaster()> (IMAGE)
<com.android.gallery3d.exif.ExifTag: int getElementSize(short)> (IMAGE)
<com.android.gallery3d.app.PhotoPage: android.content.Intent access$2700(com.android.gallery3d.data.MediaObject)> (IMAGE)
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaDetails getDetails()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getUntranslatedStraightenCropBounds(android.graphics.RectF,float)> (IMAGE)
<com.android.gallery3d.picasasource.PicasaAlbumSet: long getTotalUsedCacheSize(android.content.Context)> (IMAGE)
<com.android.gallery3d.ui.BitmapScreenNail: int getHeight()> (IMAGE)
<com.android.gallery3d.data.ClusterAlbum: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.app.PhotoPage: int getBackgroundColorId()> (IMAGE)
<com.android.gallery3d.ui.CropView: android.graphics.RectF getCropRectangle()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaAlbum: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: com.google.android.picasasync.PicasaFacade getPicasaFacade()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: java.lang.String getContentType(com.android.gallery3d.data.MediaObject)> (IMAGE)
<com.android.gallery3d.app.GalleryActionBar: int getClusterTypeAction()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()> (IMAGE)
<com.android.gallery3d.data.MtpImage: byte[] getImageData()> (IMAGE)
<com.android.gallery3d.anim.FloatAnimation: float get()> (IMAGE)
<com.android.gallery3d.data.LocalImage: android.net.Uri getContentUri()> (IMAGE)
<com.android.gallery3d.provider.GalleryProvider: java.lang.String getAuthority(android.content.Context)> (IMAGE)
<com.android.gallery3d.ui.ResourceTexture: int getTextureHeight()> (IMAGE)
<com.android.gallery3d.data.MtpImage: int getWidth()> (IMAGE)
<com.android.gallery3d.ui.ExtTexture: int getHeight()> (IMAGE)
<com.android.gallery3d.app.TimeBar: int getBarHeight()> (IMAGE)
<com.android.gallery3d.exif.CountedDataInputStream: int getReadByteCount()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaAlbum: long getCacheSize()> (IMAGE)
<com.android.gallery3d.ui.GLView: int getComponentCount()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaAlbumSet: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.ui.FlingScroller: int getFinalY()> (IMAGE)
<com.android.gallery3d.ui.FlingScroller: int getFinalX()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.Matrix getLocalGeoFlipMatrix(float,float)> (IMAGE)
<com.android.gallery3d.exif.ExifTag: short getTagId()> (IMAGE)
<com.android.gallery3d.util.HelpUtils: android.content.Intent getHelpIntent(android.content.Context,int)> (IMAGE)
<com.android.gallery3d.exif.IfdData: int getOffsetToNextIfd()> (IMAGE)
<com.android.gallery3d.data.MediaItem: java.lang.String getFilePath()> (IMAGE)
<com.android.gallery3d.ui.NinePatchTexture: com.android.gallery3d.ui.NinePatchChunk getNinePatchChunk()> (IMAGE)
<com.android.gallery3d.ui.FadeTexture: float getRatio()> (IMAGE)
<com.android.gallery3d.ui.PhotoView$FullPicture: com.android.gallery3d.ui.PhotoView$Size getSize()> (IMAGE)
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Rect getOriginalBounds()> (IMAGE)
<com.android.gallery3d.ui.ExtTexture: int getId()> (IMAGE)
<com.android.gallery3d.data.SnailItem: java.lang.String getMimeType()> (IMAGE)
<com.android.gallery3d.filtershow.cache.ImageLoader: com.adobe.xmp.XMPMeta getXmpObject()> (IMAGE)
<com.android.gallery3d.data.SecureAlbum: java.util.ArrayList getMediaItem(int,int)> (IMAGE)
<com.android.gallery3d.picasasource.PicasaImage: android.net.Uri getContentUri()> (IMAGE)
<com.android.gallery3d.exif.ExifParser: int getStripSize()> (IMAGE)
<com.android.gallery3d.data.ClusterAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (IMAGE)
<com.android.gallery3d.common.OverScroller: int getCurrX()> (IMAGE)
<com.android.gallery3d.ui.ScrollerHelper: int getPosition()> (IMAGE)
<com.android.gallery3d.data.LocalMergeAlbum: int getTotalMediaItemCount()> (IMAGE)
<com.android.gallery3d.ui.GLView: int getWidth()> (IMAGE)
<com.android.gallery3d.data.ComboAlbum: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.BitmapPool getThumbPool()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: double getLatitude(com.android.gallery3d.data.MediaObject)> (IMAGE)
<com.android.gallery3d.data.LocalAlbum: android.net.Uri getContentUri()> (IMAGE)
<com.android.gallery3d.data.MediaItem: long getDateInMs()> (IMAGE)
<com.android.gallery3d.data.MtpClient: java.util.List getDeviceList()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Bitmap getFiltersOnlyImage()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Bitmap getFilteredImage()> (IMAGE)
<com.android.gallery3d.common.EntrySchema: com.android.gallery3d.common.Entry valuesToObject(android.content.ContentValues,com.android.gallery3d.common.Entry)> (IMAGE)
<com.android.gallery3d.data.DataManager: int getMediaType(com.android.gallery3d.data.Path)> (IMAGE)
<com.android.gallery3d.ui.PositionController: float getFilmRatio()> (IMAGE)
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getParent()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: int getLocalValue()> (IMAGE)
<com.android.gallery3d.picasasource.FaceImage: java.lang.String getMimeType()> (IMAGE)
<com.android.gallery3d.data.MediaObject: int getCacheStatus()> (IMAGE)
<com.android.gallery3d.ui.BasicTexture: int getTextureWidth()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaAlbum$CoverItem: int getWidth()> (IMAGE)
<com.android.gallery3d.common.EntrySchema: int getColumnIndex(java.lang.String)> (IMAGE)
<com.android.gallery3d.app.SinglePhotoDataAdapter: int getCurrentIndex()> (IMAGE)
<com.android.gallery3d.data.MediaObject: long getCacheSize()> (IMAGE)
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: java.lang.Object getItem(int)> (IMAGE)
<com.android.gallery3d.ui.GLView: float[] getBackgroundColor()> (IMAGE)
<com.android.gallery3d.exif.ExifTag: int getUnsignedShort(int)> (IMAGE)
<com.android.gallery3d.exif.CountedDataInputStream: java.nio.ByteOrder getByteOrder()> (IMAGE)
<com.android.gallery3d.ui.SlotView: int getVisibleEnd()> (IMAGE)
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.GalleryActionBar getGalleryActionBar()> (IMAGE)
<com.android.gallery3d.data.TagClustering: java.util.ArrayList getCluster(int)> android.permission.STOP_APP_SWITCHES (IMAGE)
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItemFromPath(java.util.ArrayList,int,int,com.android.gallery3d.data.DataManager)> (IMAGE)
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: long getItemId(int)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP getFlipType()> (IMAGE)
<com.android.gallery3d.data.MtpImage: int getHeight()> (IMAGE)
<com.android.gallery3d.data.FilterDeleteSet: int getMediaItemCount()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.Matrix getGeoMatrix(android.graphics.RectF,boolean)> (IMAGE)
<com.android.gallery3d.app.Config$ManageCachePage: com.android.gallery3d.app.Config$ManageCachePage get(android.content.Context)> (IMAGE)
<com.android.gallery3d.ui.PositionController: int getImageHeight()> (IMAGE)
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap rotateToPortrait(android.graphics.Bitmap,int)> (IMAGE)
<com.android.gallery3d.data.PathMatcher$Node: com.android.gallery3d.data.PathMatcher$Node getChild(java.lang.String)> (IMAGE)
<com.android.gallery3d.data.MediaSet: int getSubMediaSetCount()> (IMAGE)
<com.android.gallery3d.ui.RawTexture: int getWidth()> (IMAGE)
<com.android.gallery3d.data.SingleItemAlbum: com.android.gallery3d.data.MediaItem getItem()> (IMAGE)
<com.android.gallery3d.util.IdentityCache: java.lang.Object get(java.lang.Object)> (IMAGE)
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: int getCount()> (IMAGE)
<android.widget.Gallery: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()> (IMAGE)
<com.android.gallery3d.filtershow.filters.ImageFilterRS: android.renderscript.RenderScript getRenderScriptContext()> (IMAGE)
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.ui.ScreenNail getScreenNail()> (IMAGE)
<com.android.gallery3d.data.LocalVideo: int getHeight()> (IMAGE)
<com.android.gallery3d.ui.TiledTexture: int getWidth()> (IMAGE)
<com.android.gallery3d.picasasource.BasePicasaAlbum: android.database.Cursor internalQuery(int,int)> (IMAGE)
<com.android.gallery3d.filtershow.filters.ImageFilter: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.data.SingleItemAlbum: java.util.ArrayList getMediaItem(int,int)> (IMAGE)
<com.android.gallery3d.picasasource.PicasaAlbumSet: long getTotalTargetCacheSize(com.android.gallery3d.picasasource.PicasaSource)> (IMAGE)
<com.android.gallery3d.exif.IfdData: int getTagCount()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getLocalCropBounds()> (IMAGE)
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getFreeBytes()> (IMAGE)
<com.android.gallery3d.app.SinglePhotoDataAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail(int)> (IMAGE)
<com.android.gallery3d.common.EntrySchema: java.lang.String[] getProjection()> (IMAGE)
<com.android.gallery3d.app.PhotoDataAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaAlbum: int getSupportedOperations()> (IMAGE)
<com.android.gallery3d.exif.ExifTag: java.lang.String getString()> (IMAGE)
<com.android.gallery3d.data.FaceClustering: java.lang.String getClusterName(int)> (IMAGE)
<com.android.gallery3d.filtershow.filters.ImageFilterRS: android.graphics.Bitmap apply(android.graphics.Bitmap,float,boolean)> (IMAGE)
<com.android.gallery3d.exif.ExifTag: int getComponentCount()> (IMAGE)
<com.android.gallery3d.filtershow.filters.ImageFilterCurves: com.android.gallery3d.filtershow.ui.Spline getSpline(int)> (IMAGE)
<com.android.gallery3d.ui.SlotView$Layout: int getVisibleStart()> (IMAGE)
<com.android.gallery3d.ui.AlbumLabelMaker: int getBorderSize()> (IMAGE)
<com.android.gallery3d.filtershow.ui.Spline: float[] getAppliedCurve()> (IMAGE)
<com.android.gallery3d.common.EntrySchema: java.lang.String getTableName()> (IMAGE)
<com.android.gallery3d.filtershow.ui.Spline: com.android.gallery3d.filtershow.ui.ControlPoint getPoint(int)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.PanelController getPanelController()> (IMAGE)
<com.android.gallery3d.app.AbstractGalleryActivity: android.content.Context getAndroidContext()> (IMAGE)
<com.android.gallery3d.data.FilterDeleteSet: java.util.ArrayList getMediaItem(int,int)> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.common.BlobCache getFaceCache(android.content.Context)> (IMAGE)
<com.android.gallery3d.picasasource.PicasaImage: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.data.Path: java.lang.String getPrefix()> (IMAGE)
<com.android.gallery3d.data.MediaSet: java.util.ArrayList getMediaItem(int,int)> (IMAGE)
<com.android.gallery3d.picasasource.PicasaImage: int getWidth()> (IMAGE)
<com.android.gallery3d.data.ActionImage: java.lang.String getMimeType()> (IMAGE)
<com.android.gallery3d.app.PhotoDataAdapter: int getImageWidth()> (IMAGE)
<com.android.gallery3d.ui.TileImageViewAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail()> (IMAGE)
<com.android.gallery3d.data.MtpDevice: int getSupportedOperations()> (IMAGE)
<com.android.gallery3d.util.CacheManager: com.android.gallery3d.common.BlobCache getCache(android.content.Context,java.lang.String,int,int,int)> (IMAGE)
<com.android.gallery3d.data.SingleItemAlbum: java.lang.String getName()> android.permission.STOP_APP_SWITCHES (IMAGE)
<com.android.gallery3d.ui.CropView$AnimationController: int getCenterY()> (IMAGE)
<com.android.gallery3d.ui.CropView$AnimationController: int getCenterX()> (IMAGE)
<com.android.gallery3d.data.LocalVideo: int getSupportedOperations()> (IMAGE)
<com.android.gallery3d.picasasource.BasePicasaAlbum: java.util.ArrayList getMediaItem(int,int)> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (IMAGE)
<com.android.gallery3d.data.MediaSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.widget.ArrayAdapter getImageStateAdapter()> (IMAGE)
<com.android.gallery3d.ui.BitmapScreenNail: int getWidth()> (IMAGE)
<com.android.gallery3d.ui.SlideshowView$SlideshowAnimation: int getCanvasSaveFlags()> (IMAGE)
<com.android.gallery3d.data.LocalImage: com.android.gallery3d.data.MediaDetails getDetails()> (IMAGE)
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: java.lang.Object getItem(int)> (IMAGE)
<com.android.gallery3d.data.MediaObject: long getDataVersion()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getLocalStraighten()> (IMAGE)
<com.android.gallery3d.ui.WakeLockHoldingProgressListener: com.android.gallery3d.app.AbstractGalleryActivity getActivity()> (IMAGE)
<com.android.gallery3d.data.UriImage: int getMediaType()> (IMAGE)
<com.android.gallery3d.data.MediaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (IMAGE)
<com.android.gallery3d.filtershow.filters.ImageFilterGeometry: android.graphics.Bitmap apply(android.graphics.Bitmap,float,boolean)> (IMAGE)
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.util.LightCycleHelper$PanoramaViewHelper getPanoramaViewHelper()> (IMAGE)
<com.android.gallery3d.ui.PhotoView$ScreenNailPicture: com.android.gallery3d.ui.PhotoView$Size getSize()> (IMAGE)
<com.android.gallery3d.ui.DetailsHelper: java.lang.String getDetailsName(android.content.Context,int)> (IMAGE)
<com.android.gallery3d.ui.UploadedTexture: int getWidth()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaAlbum: com.google.android.picasasync.PhotoEntry getPhotoEntry(com.android.gallery3d.picasasource.PicasaSource,long)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Rect getDisplayedImageBounds()> (IMAGE)
<com.android.gallery3d.ui.BitmapTexture: int getId()> (IMAGE)
<com.android.gallery3d.ui.RawTexture: int getId()> (IMAGE)
<com.android.gallery3d.data.ActionImage: int getWidth()> (IMAGE)
<com.android.gallery3d.provider.GalleryProvider: java.lang.String getType(android.net.Uri)> (IMAGE)
<com.android.gallery3d.data.MtpImage: long getDateInMs()> (IMAGE)
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getChild(java.lang.String)> (IMAGE)
<com.android.gallery3d.data.SnailItem: int getWidth()> (IMAGE)
<com.android.gallery3d.ui.TiledScreenNail: int getHeight()> (IMAGE)
<com.android.gallery3d.exif.ExifTag: int getLong(int)> android.permission.STOP_APP_SWITCHES (IMAGE)
<com.android.gallery3d.exif.ExifData: byte[] getStrip(int)> (IMAGE)
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: long getItemId(int)> (IMAGE)
<com.android.gallery3d.data.ComboAlbum: int getMediaItemCount()> (IMAGE)
<com.android.gallery3d.data.LocationClustering: int getNumberOfClusters()> (IMAGE)
<com.android.gallery3d.data.MediaObject: com.android.gallery3d.data.MediaDetails getDetails()> (IMAGE)
<com.android.gallery3d.ui.SurfaceTextureScreenNail: int getHeight()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaPostAlbum: int getMediaItemCount()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageSlave: android.graphics.Bitmap getFilteredImage()> (IMAGE)
<com.android.gallery3d.data.LocalImage: int getWidth()> (IMAGE)
<com.android.gallery3d.ui.PositionController: float getImageScale()> (IMAGE)
<com.android.gallery3d.ui.EdgeEffect$Drawable: int getIntrinsicHeight()> (IMAGE)
<com.android.gallery3d.data.SnailItem: com.android.gallery3d.ui.ScreenNail getScreenNail()> (IMAGE)
<com.android.gallery3d.ui.GLView: com.android.gallery3d.ui.GLRoot getGLRoot()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaPostAlbum: int getSupportedOperations()> (IMAGE)
<com.android.gallery3d.data.Cluster: java.util.ArrayList getItems()> (IMAGE)
<com.android.gallery3d.picasasource.BasePicasaAlbum: long reload()> (IMAGE)
<com.android.gallery3d.ui.GLCanvasImpl: javax.microedition.khronos.opengles.GL11 getGLInstance()> (IMAGE)
<com.android.gallery3d.common.Fingerprint: byte[] getBytes()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaAlbumSet: int getSubMediaSetCount()> (IMAGE)
<com.android.gallery3d.ui.PositionController: int getImageWidth()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: long getTotalUsedCacheSize()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaAlbum: int getCacheStatus()> (IMAGE)
<com.android.gallery3d.filtershow.provider.SharedImageProvider: java.lang.String getType(android.net.Uri)> (IMAGE)
<com.android.gallery3d.app.ActivityState: android.view.MenuInflater getSupportMenuInflater()> (IMAGE)
<com.android.gallery3d.data.UriImage: int getWidth()> (IMAGE)
<com.android.gallery3d.data.MediaSet: int getMediaItemCount()> (IMAGE)
<com.android.gallery3d.ui.FlingScroller: int getCurrY()> (IMAGE)
<com.android.gallery3d.ui.FlingScroller: int getCurrX()> (IMAGE)
<com.android.gallery3d.data.LocalAlbum: java.lang.String getLocalizedName(android.content.res.Resources,int,java.lang.String)> (IMAGE)
<com.android.gallery3d.data.MediaSet: int getTotalMediaItemCount()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (IMAGE)
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> (IMAGE)
<com.android.gallery3d.data.MtpClient: java.util.List getObjectList(java.lang.String,int,int)> (IMAGE)
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getTotalBytes()> (IMAGE)
<com.android.gallery3d.data.BitmapPool: android.graphics.Bitmap getBitmap()> (IMAGE)
<com.android.gallery3d.app.PackagesMonitor: int getPackagesVersion(android.content.Context)> (IMAGE)
<com.android.gallery3d.exif.IfdData: com.android.gallery3d.exif.ExifTag[] getAllTags()> (IMAGE)
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.ui.AlbumSetSlidingWindow$AlbumSetEntry get(int)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageStraighten: int getLocalValue()> (IMAGE)
<com.android.gallery3d.exif.IfdData: int getId()> (IMAGE)
<com.android.gallery3d.app.PhotoDataAdapter: android.graphics.Bitmap getTile(int,int,int,int,int,com.android.gallery3d.data.BitmapPool)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageShow: boolean getDirtyGeometryFlag()> (IMAGE)
<android.widget.Gallery: int getChildDrawingOrder(int,int)> (IMAGE)
<com.android.gallery3d.common.Utils: byte[] getBytes(java.lang.String)> (IMAGE)
<com.android.gallery3d.data.MtpDevice: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.data.ComboAlbumSet: int getSubMediaSetCount()> (IMAGE)
<com.android.gallery3d.ui.TileImageViewAdapter: android.graphics.Bitmap getTile(int,int,int,int,int,com.android.gallery3d.data.BitmapPool)> (IMAGE)
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (IMAGE)
<com.android.gallery3d.ui.CanvasTexture: android.graphics.Bitmap onGetBitmap()> (IMAGE)
<com.android.gallery3d.ui.ExtTexture: int getTextureHeight()> (IMAGE)
<com.android.gallery3d.ui.NinePatchTexture$SmallCache: java.lang.Object get(int)> (IMAGE)
<com.android.gallery3d.filtershow.tools.SaveCopyTask: java.io.File getNewFile(android.content.Context,android.net.Uri)> (IMAGE)
<com.android.gallery3d.data.Path: java.lang.String getSuffix()> (IMAGE)
<com.android.gallery3d.exif.ExifParser: int getCompressedImageSize()> (IMAGE)
<com.android.gallery3d.exif.ExifTag: int getIfd()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.HistoryAdapter getHistory()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaPostAlbum: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.util.Future requestSyncOnMultipleSets(com.android.gallery3d.data.MediaSet[],com.android.gallery3d.data.MediaSet$SyncListener)> (IMAGE)
<com.android.gallery3d.ui.BitmapTexture: int getTextureHeight()> (IMAGE)
<com.android.gallery3d.app.PhotoDataAdapter: com.android.gallery3d.data.MediaItem getMediaItem(int)> (IMAGE)
<com.android.gallery3d.util.IntArray: int[] getInternalArray()> (IMAGE)
<com.android.gallery3d.data.LocalMergeAlbum: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.ui.GLView: com.android.gallery3d.ui.GLView getComponent(int)> (IMAGE)
<com.android.gallery3d.ui.BasicTexture: int getHeight()> (IMAGE)
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.StateManager getStateManager()> (IMAGE)
<com.android.gallery3d.filtershow.provider.SharedImageProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> (IMAGE)
<com.android.gallery3d.data.ComboAlbum: java.util.ArrayList getMediaItem(int,int)> (IMAGE)
<com.android.gallery3d.data.MediaObject: int getSupportedOperations()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaImage: com.android.gallery3d.data.MediaDetails getDetails()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: java.lang.String getImageTitle(com.android.gallery3d.data.MediaObject)> (IMAGE)
<com.android.gallery3d.data.Clustering: com.android.gallery3d.data.MediaItem getClusterCover(int)> (IMAGE)
<com.android.gallery3d.gadget.LocalPhotoSource: android.net.Uri getContentUri(int)> (IMAGE)
<com.android.gallery3d.data.UriImage: int getRotation()> (IMAGE)
<com.android.gallery3d.data.SizeClustering: long getMinSize(int)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageCrop: android.graphics.RectF getCropBoundsDisplayed()> (IMAGE)
<com.android.gallery3d.data.ActionImage: int getMediaType()> (IMAGE)
<com.android.gallery3d.ui.UploadedTexture: int getHeight()> (IMAGE)
<com.android.gallery3d.data.BucketHelper: java.lang.String getBucketName(android.content.ContentResolver,int)> (IMAGE)
<com.android.gallery3d.data.MtpClient: java.util.List getStorageList(java.lang.String)> (IMAGE)
<com.android.gallery3d.data.LocalImage: java.lang.String getFilePath()> (IMAGE)
<com.android.gallery3d.data.LocalVideo: android.net.Uri getPlayUri()> (IMAGE)
<com.android.gallery3d.data.DataManager: java.lang.String getTopSetPath(int)> (IMAGE)
<com.android.gallery3d.provider.GalleryProvider: android.net.Uri getUriFor(android.content.Context,com.android.gallery3d.data.Path)> (IMAGE)
<com.android.gallery3d.filtershow.filters.ImageFilterTinyPlanet: float getAngle()> (IMAGE)
<com.android.gallery3d.filtershow.PanelController: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()> (IMAGE)
<com.android.gallery3d.app.Config$AlbumSetPage: com.android.gallery3d.app.Config$AlbumSetPage get(android.content.Context)> (IMAGE)
<com.android.gallery3d.data.LocalImage: int getSupportedOperations()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: long getPicasaId(com.android.gallery3d.data.MediaObject)> (IMAGE)
<com.android.gallery3d.picasasource.PicasaImage: long getDateInMs()> (IMAGE)
<com.android.gallery3d.data.PathMatcher$Node: int getKind()> (IMAGE)
<com.android.gallery3d.ui.TiledTexture: int getHeight()> (IMAGE)
<com.android.gallery3d.filtershow.filters.ImageFilter: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()> (IMAGE)
<com.android.gallery3d.app.AlbumPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> (IMAGE)
<com.android.gallery3d.data.DataManager: long getTotalTargetCacheSize()> (IMAGE)
<com.android.gallery3d.app.StitchingProgressManager: java.lang.Integer getProgress(android.net.Uri)> (IMAGE)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet[] getMediaSetsFromString(java.lang.String)> (IMAGE)
<com.android.gallery3d.data.TimeClustering: java.lang.String getClusterName(int)> (IMAGE)
<com.android.gallery3d.filtershow.presets.ImagePreset: float getScaleFactor()> (IMAGE)
<com.android.gallery3d.app.PhotoDataAdapter: int getLoadingState(int)> (IMAGE)
<com.android.gallery3d.data.MediaSet$1: java.lang.Integer get()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaAlbumSet$PicasaSyncTaskFuture: java.lang.Integer get()> (IMAGE)
<com.android.gallery3d.data.MediaObject: android.net.Uri getPlayUri()> (IMAGE)
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: java.lang.Object getItem(int)> (IMAGE)
<com.android.gallery3d.gadget.MediaSetSource: android.graphics.Bitmap getImage(int)> android.permission.NFC android.permission.SET_WALLPAPER android.permission.INTERNET android.permission.ACCESS_FINE_LOCATION android.permission.VIBRATE android.permission.ACCESS_COARSE_LOCATION android.permission.ACCESS_NETWORK_STATE (IMAGE)
<com.android.gallery3d.data.MediaDetails: int getUnit(int)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageCrop: android.graphics.Matrix getCropRotationMatrix(float,android.graphics.RectF)> (IMAGE)
<com.android.gallery3d.picasasource.FaceImage: int getHeight()> (IMAGE)
<com.android.gallery3d.ui.NinePatchTexture: android.graphics.Rect getPaddings()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.HistoryAdapter getHistory()> (IMAGE)
<com.android.gallery3d.ui.BitmapTileProvider: int getImageWidth()> (IMAGE)
<com.android.gallery3d.ui.ScrollerHelper: float getCurrVelocity()> (IMAGE)
<com.android.gallery3d.data.LocalMergeAlbum: int getMediaItemCount()> (IMAGE)
<com.android.gallery3d.data.SizeClustering: java.lang.String getClusterName(int)> (IMAGE)
<com.android.gallery3d.ui.GLPaint: float getLineWidth()> (IMAGE)
<com.android.gallery3d.filtershow.tools.SaveCopyTask: java.io.File getFinalSaveDirectory(android.content.Context,android.net.Uri)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getLocalRotation()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.GeometryMath: float[] getUnitVectorFromPoints(float[],float[])> (IMAGE)
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.ui.GLRoot getGLRoot()> (IMAGE)
<com.android.gallery3d.data.MtpDevice: java.util.ArrayList getMediaItem(int,int)> (IMAGE)
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getPrefixPath()> (IMAGE)
<com.android.gallery3d.filtershow.ui.ImageButtonTitle: java.lang.String getText()> (IMAGE)
<com.android.gallery3d.data.MediaItem: int getRotation()> (IMAGE)
<com.android.gallery3d.ui.ColorTexture: int getWidth()> (IMAGE)
<android.widget.Gallery: int getLimitedMotionScrollAmount(boolean,int)> (IMAGE)
<com.android.gallery3d.ui.AlbumLabelMaker$LazyLoadedBitmap: android.graphics.Bitmap get()> (IMAGE)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (IMAGE)
<com.android.gallery3d.data.FilterDeleteSet: int getNumberOfDeletions()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.imageshow.GeometryMetadata getGeometry()> (IMAGE)
<com.android.gallery3d.data.MediaSet: int getIndexOf(com.android.gallery3d.data.Path,java.util.ArrayList)> (IMAGE)
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.TransitionStore getTransitionStore()> (IMAGE)
<com.android.gallery3d.filtershow.filters.ImageFilter: byte getFilterType()> (IMAGE)
<com.android.gallery3d.data.MtpDeviceSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> (IMAGE)
<com.android.gallery3d.util.GalleryUtils: byte[] getBytes(java.lang.String)> (IMAGE)
<com.android.gallery3d.data.LocalMediaItem: long getDateInMs()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaAlbum$CoverItem: int getHeight()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.filters.ImageFilter getCurrentFilter()> (IMAGE)
<com.android.gallery3d.data.MediaItem: java.lang.String[] getTags()> (IMAGE)
<com.android.gallery3d.ui.TiledScreenNail: com.android.gallery3d.ui.TiledTexture getTexture()> (IMAGE)
<com.android.gallery3d.data.DataManager: android.net.Uri getContentUri(com.android.gallery3d.data.Path)> (IMAGE)
<com.android.gallery3d.data.ClusterAlbum: int getMediaItemCount()> (IMAGE)
<com.android.gallery3d.data.LocalMergeAlbum: int getSupportedOperations()> (IMAGE)
<com.android.gallery3d.filtershow.cache.DirectPresetCache: android.graphics.Bitmap get(com.android.gallery3d.filtershow.presets.ImagePreset)> (IMAGE)
<com.android.gallery3d.data.FilterDeleteSet: long reload()> (IMAGE)
<com.android.gallery3d.ui.SelectionManager: java.util.ArrayList getSelected(boolean)> (IMAGE)
<com.android.gallery3d.data.FaceClustering: java.util.ArrayList getCluster(int)> (IMAGE)
<com.android.gallery3d.ui.CropView$AnimationController: float getScale()> (IMAGE)
<com.android.gallery3d.data.FaceClustering: com.android.gallery3d.data.MediaItem getClusterCover(int)> (IMAGE)
<com.android.gallery3d.data.MtpDeviceSet: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.ui.SelectionManager: int getSelectedCount()> (IMAGE)
<com.android.gallery3d.exif.ExifData: java.nio.ByteOrder getByteOrder()> (IMAGE)
<com.android.gallery3d.data.MtpImage: com.android.gallery3d.data.MediaDetails getDetails()> (IMAGE)
<com.android.gallery3d.app.StateManager: int getStateCount()> (IMAGE)
<com.android.gallery3d.exif.ExifParser: int getCurrentIfd()> (IMAGE)
<com.android.gallery3d.app.ActivityState: int getBackgroundColorId()> (IMAGE)
<com.android.gallery3d.util.RangeIntArray: int get(int)> (IMAGE)
<com.android.gallery3d.data.MediaSource: java.lang.String getPrefix()> (IMAGE)
<com.android.gallery3d.filtershow.FilterShowActivity: float getPixelsFromDip(float)> (IMAGE)
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)> (IMAGE)
<com.android.gallery3d.picasasource.PicasaImage: com.google.android.picasasync.PhotoEntry getPhotoEntry()> (IMAGE)
<com.android.gallery3d.data.EmptyAlbumImage: int getSupportedOperations()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaImage: int getSupportedOperations()> (IMAGE)
<com.android.gallery3d.data.TimeClustering: int getNumberOfClusters()> (IMAGE)
<com.android.gallery3d.data.MediaItem: long getSize()> (IMAGE)
<com.android.gallery3d.app.SlideshowPage: int getBackgroundColorId()> (IMAGE)
<com.android.gallery3d.app.CommonControllerOverlay: android.view.View getView()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: android.app.Dialog getVersionCheckDialog(android.app.Activity)> (IMAGE)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(com.android.gallery3d.data.Path)> (IMAGE)
<com.android.gallery3d.filtershow.ui.Spline: int getNbPoints()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getLocalScale()> (IMAGE)
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.Path getSetPath(int)> (IMAGE)
<com.android.gallery3d.data.PathMatcher: java.lang.String getVar(int)> (IMAGE)
<com.android.gallery3d.ui.SlotView$IntegerAnimation: int getTarget()> (IMAGE)
<com.android.gallery3d.exif.ExifReader: com.android.gallery3d.exif.ExifData read(java.io.InputStream)> (IMAGE)
<com.android.gallery3d.data.PathMatcher: int getIntVar(int)> (IMAGE)
<com.android.gallery3d.data.ActionImage: int getSupportedOperations()> (IMAGE)
<com.android.gallery3d.data.UriImage: android.net.Uri getContentUri()> (IMAGE)
<com.android.gallery3d.data.UnlockImage: int getSupportedOperations()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaImage: long getAlbumId()> (IMAGE)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.Path findPathByUri(android.net.Uri,java.lang.String)> (IMAGE)
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.BitmapPool getMicroThumbPool()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: float getStraightenRotation()> (IMAGE)
<com.android.gallery3d.ui.BitmapTexture: int getHeight()> (IMAGE)
<com.android.gallery3d.exif.ExifTag: short getDataType()> (IMAGE)
<com.android.gallery3d.app.ActivityState: android.os.Bundle getData()> (IMAGE)
<com.android.gallery3d.common.OverScroller: int getFinalX()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaAlbum: int getMediaItemCount()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaImage: long getSize()> (IMAGE)
<com.android.gallery3d.data.UriImage: int getSupportedOperations()> (IMAGE)
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: int getCount()> (IMAGE)
<com.android.gallery3d.ui.SurfaceTextureScreenNail: int getWidth()> (IMAGE)
<com.android.gallery3d.data.Path: com.android.gallery3d.data.MediaObject getObject()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaPostAlbum$PostSyncFuture: java.lang.Integer get()> (IMAGE)
<com.android.gallery3d.filtershow.filters.ColorSpaceMatrix: float[] getMatrix()> (IMAGE)
<com.android.gallery3d.filtershow.filters.ImageFilterTinyPlanet: android.graphics.Bitmap apply(android.graphics.Bitmap,float,boolean)> (IMAGE)
<android.widget.Gallery: int getChildHeight(android.view.View)> (IMAGE)
<com.android.gallery3d.app.PhotoPage$MyDetailsSource: int setIndex()> (IMAGE)
<com.android.gallery3d.data.SingleItemAlbum: int getMediaItemCount()> (IMAGE)
<com.android.gallery3d.ui.TileImageView$Tile: com.android.gallery3d.ui.TileImageView$Tile getParentTile()> (IMAGE)
<com.android.gallery3d.app.AlbumSetPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> (IMAGE)
<com.android.gallery3d.ui.RawTexture: int getHeight()> (IMAGE)
<com.android.gallery3d.filtershow.ImageStateAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (IMAGE)
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap getScaleOneImageForPreset(com.android.gallery3d.filtershow.imageshow.ImageShow,com.android.gallery3d.filtershow.presets.ImagePreset,android.graphics.Rect,boolean)> (IMAGE)
<com.android.gallery3d.ui.BitmapTileProvider: int getLevelCount()> (IMAGE)
<com.android.gallery3d.ui.ExtTexture: int getTextureWidth()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getHorizontalMatrix(float)> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: android.content.ContentResolver getContentResolver()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaAlbum$CoverItem: java.lang.String getMimeType()> (IMAGE)
<com.android.gallery3d.common.LongSparseArray: java.lang.Object get(long,java.lang.Object)> (IMAGE)
<com.android.gallery3d.data.MtpImage: android.net.Uri getContentUri()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageRotate: int getLocalValue()> (IMAGE)
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> (IMAGE)
<com.android.gallery3d.data.LocalAlbum: java.util.ArrayList getMediaItem(int,int)> (IMAGE)
<com.android.gallery3d.ui.UploadedTexture: int getTarget()> (IMAGE)
<com.android.gallery3d.app.TransitionStore: java.lang.Object get(java.lang.Object,java.lang.Object)> (IMAGE)
<com.android.gallery3d.filtershow.cache.ImageLoader: int getOrientation(android.content.Context,android.net.Uri)> (IMAGE)
<com.android.gallery3d.data.SecureAlbum: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.data.LocalVideo: com.android.gallery3d.data.MediaDetails getDetails()> (IMAGE)
<com.android.gallery3d.ui.GLRootView: int getCompensation()> (IMAGE)
<com.android.gallery3d.data.LocalImage: int getHeight()> (IMAGE)
<com.android.gallery3d.app.AlbumPage: int getBackgroundColorId()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getVerticalMatrix(float)> (IMAGE)
<com.android.gallery3d.data.FilterTypeSet: int getSubMediaSetCount()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getMatrixOriginalOrientation(int,float,float)> (IMAGE)
<com.android.gallery3d.data.LocalMediaItem: void getLatLong(double[])> (IMAGE)
<com.android.gallery3d.data.LocalMediaItem: com.android.gallery3d.data.MediaDetails getDetails()> (IMAGE)
<com.android.gallery3d.app.PhotoDataAdapter: int getCurrentIndex()> (IMAGE)
<com.android.gallery3d.data.FaceClustering: int getNumberOfClusters()> (IMAGE)
<com.android.gallery3d.filtershow.filters.ImageFilter: int getMinParameter()> (IMAGE)
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getChild(int)> (IMAGE)
<com.android.gallery3d.data.MtpContext: com.android.gallery3d.data.MtpClient getMtpClient()> (IMAGE)
<com.android.gallery3d.exif.ExifTag: int getIfdIdFromTagId(short)> (IMAGE)
<com.android.gallery3d.app.Bookmarker: java.lang.Integer getBookmark(android.net.Uri)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageCrop: android.graphics.Matrix getCropBoundDisplayMatrix()> (IMAGE)
<com.android.gallery3d.exif.Rational: long getDenominator()> (IMAGE)
<com.android.gallery3d.data.ClusterAlbum: int getSupportedOperations()> (IMAGE)
<com.android.gallery3d.filtershow.cache.ImageLoader: com.android.gallery3d.filtershow.FilterShowActivity getActivity()> (IMAGE)
<com.android.gallery3d.ui.BasicTexture: int getId()> (IMAGE)
<com.android.gallery3d.data.LocationClustering: java.util.ArrayList getCluster(int)> (IMAGE)
<com.android.gallery3d.app.Config$AlbumPage: com.android.gallery3d.app.Config$AlbumPage get(android.content.Context)> (IMAGE)
<com.android.gallery3d.data.FilterTypeSet: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.app.OrientationManager: int getDisplayRotation()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaImage: java.lang.String[] getTags()> (IMAGE)
<com.android.gallery3d.data.FilterTypeSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> (IMAGE)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getViewAt(int)> (IMAGE)
<com.android.gallery3d.data.LocationClustering: java.lang.String getClusterName(int)> (IMAGE)
<com.android.gallery3d.picasasource.PicasaImage: int getMediaType()> (IMAGE)
<com.android.gallery3d.ui.RawTexture: int getTextureHeight()> (IMAGE)
<com.android.gallery3d.filtershow.HistoryAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (IMAGE)
<com.android.gallery3d.data.LocalVideo$LocalVideoRequest: android.graphics.Bitmap onDecodeOriginal(com.android.gallery3d.util.ThreadPool$JobContext,int)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageSmallFilter: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()> (IMAGE)
<com.android.gallery3d.data.LocalAlbum: int getSupportedOperations()> (IMAGE)
<com.android.gallery3d.data.LocalMergeAlbum: android.net.Uri getContentUri()> (IMAGE)
<com.android.gallery3d.gadget.WidgetService$EmptySource: android.graphics.Bitmap getImage(int)> (IMAGE)
<com.android.gallery3d.ui.PhotoView$ZInterpolator: float getInterpolation(float)> (IMAGE)
<com.android.gallery3d.ui.BasicTexture: int getTextureHeight()> (IMAGE)
<com.android.gallery3d.exif.ExifData: com.android.gallery3d.exif.ExifTag addTag(short)> (IMAGE)
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (IMAGE)
<com.android.gallery3d.data.MtpClient: android.mtp.MtpDevice getDevice(int)> (IMAGE)
<com.android.gallery3d.ui.BitmapTileProvider: android.graphics.Bitmap getTile(int,int,int,int,int,com.android.gallery3d.data.BitmapPool)> (IMAGE)
<com.android.gallery3d.exif.ExifParser: java.nio.ByteOrder getByteOrder()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageStraighten: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.ui.GLCanvasImpl: float getAlpha()> (IMAGE)
<com.android.gallery3d.data.SizeClustering: int getNumberOfClusters()> (IMAGE)
<com.android.gallery3d.data.ClusterAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> (IMAGE)
<com.android.gallery3d.filtershow.cache.ImageLoader: int getOrientationFromPath(java.lang.String)> (IMAGE)
<com.android.gallery3d.ui.SlotView: android.graphics.Rect getSlotRect(int,com.android.gallery3d.ui.GLView)> (IMAGE)
<com.android.gallery3d.app.AlbumSetDataLoader: int getTotalCount(int)> (IMAGE)
<com.android.gallery3d.app.GalleryActionBar: android.view.Menu getMenu()> (IMAGE)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getLoadingView()> (IMAGE)
<com.android.gallery3d.data.MtpDevice: android.mtp.MtpObjectInfo getObjectInfo(com.android.gallery3d.data.MtpContext,int,int)> (IMAGE)
<com.android.gallery3d.picasasource.PicasaImage: int getFullImageRotation()> (IMAGE)
<com.android.gallery3d.data.FaceClustering$FaceCluster: com.android.gallery3d.data.MediaItem getCover()> (IMAGE)
<com.android.gallery3d.data.LocalVideo: android.net.Uri getContentUri()> (IMAGE)
<com.android.gallery3d.ui.ResourceTexture: int getWidth()> (IMAGE)
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: long getItemId(int)> (IMAGE)
<com.android.gallery3d.data.MtpDeviceSet: int getSubMediaSetCount()> (IMAGE)
<com.android.gallery3d.data.MtpImage: int getSupportedOperations()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageSlave: android.graphics.Rect getDisplayedImageBounds()> (IMAGE)
<com.android.gallery3d.ui.BitmapTexture: int getWidth()> (IMAGE)
<com.android.gallery3d.ui.StringTexture: android.text.TextPaint getDefaultPaint(float,int)> (IMAGE)
<com.android.gallery3d.picasasource.PicasaAlbum: int getCacheFlag()> (IMAGE)
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (IMAGE)
<com.android.gallery3d.filtershow.cache.ImageLoader: int getZoomOrientation()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.data.MediaItem getFaceItem(android.content.Context,com.android.gallery3d.data.MediaItem,int)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageTinyPlanet: float getCurrentTouchAngle()> (IMAGE)
<com.android.gallery3d.data.MtpDevice: int getMediaItemCount()> (IMAGE)
<com.android.gallery3d.data.LocalMergeAlbum: java.util.ArrayList getMediaItem(int,int)> (IMAGE)
<com.android.gallery3d.ui.FadeTexture: int getHeight()> (IMAGE)
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (IMAGE)
<com.android.gallery3d.ui.ColorTexture: int getHeight()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: java.lang.String getUserAccount(android.content.Context,com.android.gallery3d.data.MediaObject)> (IMAGE)
<com.android.gallery3d.data.UriImage: java.lang.String getMimeType()> (IMAGE)
<com.android.gallery3d.filtershow.filters.ImageFilter: int getPreviewParameter()> (IMAGE)
<com.android.gallery3d.filtershow.filters.ImageFilter: int getDefaultParameter()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageFlip: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.picasasource.FaceImage: int getWidth()> (IMAGE)
<com.android.gallery3d.data.LocalMediaItem: long getSize()> (IMAGE)
<com.android.gallery3d.data.DataManager: int getSupportedOperations(com.android.gallery3d.data.Path)> (IMAGE)
<com.android.gallery3d.data.MtpClient: byte[] getThumbnail(java.lang.String,int)> (IMAGE)
<com.android.gallery3d.ui.SurfaceTextureScreenNail: android.graphics.SurfaceTexture getSurfaceTexture()> (IMAGE)
<com.android.gallery3d.data.TagClustering: int getNumberOfClusters()> (IMAGE)
<com.android.gallery3d.ui.FadeTexture: int getWidth()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: android.app.Dialog getVersionCheckDialog(android.app.Activity,int)> (IMAGE)
<com.android.gallery3d.exif.ExifTag: com.android.gallery3d.exif.Rational getRational(int)> (IMAGE)
<com.android.gallery3d.app.OrientationManager: int getCompensation()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: android.content.ContentProviderClient getContentProvider()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> (IMAGE)
<com.android.gallery3d.ui.GLPaint: int getColor()> (IMAGE)
<com.android.gallery3d.data.MediaObject: int getMediaType()> (IMAGE)
<com.android.gallery3d.app.PhotoDataAdapter: int getImageHeight()> (IMAGE)
<com.android.gallery3d.app.AlbumDataLoader: com.android.gallery3d.data.MediaItem get(int)> (IMAGE)
<com.android.gallery3d.ui.SlotView$Layout: int getSlotIndexByPosition(float,float)> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getFlipMatrix(float,float)> (IMAGE)
<com.android.gallery3d.data.FilterTypeSet: java.util.ArrayList getMediaItem(int,int)> (IMAGE)
<com.android.gallery3d.data.FilterTypeSet: int getMediaItemCount()> (IMAGE)
<com.android.gallery3d.data.LocalSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (IMAGE)
<com.android.gallery3d.app.SinglePhotoDataAdapter: com.android.gallery3d.data.MediaItem getMediaItem(int)> (IMAGE)
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.OrientationManager getOrientationManager()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getLocalDisplayBounds()> (IMAGE)
<com.android.gallery3d.exif.ExifParser: int getStripIndex()> (IMAGE)
<com.android.gallery3d.ui.TileImageViewAdapter: int getImageHeight()> (IMAGE)
<com.android.gallery3d.ui.FlingScroller: int getDuration()> (IMAGE)
<com.android.gallery3d.data.MediaItem: int getTargetSize(int)> (IMAGE)
<com.android.gallery3d.util.RangeArray: java.lang.Object get(int)> (IMAGE)
<com.android.gallery3d.data.SizeClustering: java.util.ArrayList getCluster(int)> (IMAGE)
<com.android.gallery3d.data.LocalImage: int getMediaType()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.RectF getPreviewCropBounds()> (IMAGE)
<com.android.gallery3d.app.GalleryActionBar: int getHeight()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaImage: int getHeight()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getCurrentTouchAngle()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF straightenBounds()> (IMAGE)
<com.android.gallery3d.ui.GLView: int getHeight()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: float getRotation()> (IMAGE)
<com.android.gallery3d.ui.BitmapTexture: int getTextureWidth()> (IMAGE)
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.Path getItemPath(int)> (IMAGE)
<com.android.gallery3d.ui.ResourceTexture: int getTextureWidth()> (IMAGE)
<com.android.gallery3d.app.SinglePhotoDataAdapter: int getImageRotation(int)> (IMAGE)
<com.android.gallery3d.ui.TileImageViewAdapter: int getLevelCount()> (IMAGE)
<com.android.gallery3d.data.PathMatcher: long getLongVar(int)> (IMAGE)
<com.android.gallery3d.data.DownloadCache$TaskProxy: com.android.gallery3d.data.DownloadCache$Entry get(com.android.gallery3d.util.ThreadPool$JobContext)> (IMAGE)
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getChild(long)> (IMAGE)
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.Face[] getFaces()> (IMAGE)
<com.android.gallery3d.data.LocalMediaItem: int getBucketId()> (IMAGE)
<com.android.gallery3d.app.StitchingProgressManager: java.util.ArrayList access$100(com.android.gallery3d.app.StitchingProgressManager)> (IMAGE)
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (IMAGE)
<com.android.gallery3d.ui.SlotView$Layout: int getVisibleEnd()> (IMAGE)
<com.android.gallery3d.ui.AlbumSlidingWindow: com.android.gallery3d.ui.AlbumSlidingWindow$AlbumEntry get(int)> (IMAGE)
<com.android.gallery3d.data.MtpDeviceSet: java.lang.String getDeviceName(com.android.gallery3d.data.MtpContext,int)> (IMAGE)
<com.android.gallery3d.data.MediaSet$MultiSetSyncFuture: java.lang.Integer get()> (IMAGE)
<com.android.gallery3d.ui.SlotView$Layout: android.graphics.Rect getSlotRect(int,android.graphics.Rect)> (IMAGE)
<com.android.gallery3d.common.BlobCache: byte[] lookup(long)> (IMAGE)
<com.android.gallery3d.ui.GLRootView: int getDisplayRotation()> (IMAGE)
<com.android.gallery3d.data.MediaItem: int getFullImageRotation()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.filters.ImageFilter getCurrentFilter()> (IMAGE)
<com.android.gallery3d.data.ClusterAlbum: int getTotalMediaItemCount()> (IMAGE)
<com.android.gallery3d.app.PhotoDataAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail(int)> (IMAGE)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(java.lang.String)> (IMAGE)
<com.android.gallery3d.exif.ExifData: com.android.gallery3d.exif.IfdData getIfdData(int)> (IMAGE)
<com.android.gallery3d.common.LruCache: java.lang.Object get(java.lang.Object)> (IMAGE)
<com.android.gallery3d.ui.MenuExecutor: java.lang.String getMimeType(int)> (IMAGE)
<com.android.gallery3d.data.ClusterAlbumSet: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.data.MediaItem: void getLatLong(double[])> (IMAGE)
<com.android.gallery3d.data.SnailItem: int getHeight()> (IMAGE)
<com.android.gallery3d.data.MediaItem: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.data.MediaObject: java.lang.String getTypeString(int)> (IMAGE)
<com.android.gallery3d.ui.EdgeAnimation: float getValue()> (IMAGE)
<com.android.gallery3d.data.CameraShortcutImage: int getSupportedOperations()> (IMAGE)
<com.android.gallery3d.app.GalleryActionBar: java.lang.String getClusterByTypeString(android.content.Context,int)> (IMAGE)
<com.android.gallery3d.ui.SlotView: int getScrollY()> (IMAGE)
<com.android.gallery3d.ui.SlotView: int getScrollX()> (IMAGE)
<com.android.gallery3d.gadget.MediaSetSource: android.net.Uri getContentUri(int)> (IMAGE)
<com.android.gallery3d.ui.ResourceTexture: int getId()> (IMAGE)
<com.android.gallery3d.gadget.WidgetService$EmptySource: android.net.Uri getContentUri(int)> (IMAGE)
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: long getItemId(int)> (IMAGE)
<com.android.gallery3d.app.PhotoPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> (IMAGE)
<com.android.gallery3d.data.FilterTypeSet: int getSupportedOperations()> (IMAGE)
<com.android.gallery3d.data.MediaSource: long getTotalTargetCacheSize()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getLocalPhotoBounds()> (IMAGE)
<com.android.gallery3d.ui.TileImageViewAdapter: int getImageWidth()> (IMAGE)
<com.android.gallery3d.data.MediaObject: android.net.Uri getContentUri()> (IMAGE)
<com.android.gallery3d.data.LocalMediaItem: java.lang.String getMimeType()> (IMAGE)
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(android.graphics.Bitmap,int)> (IMAGE)
<com.android.gallery3d.app.StateManager: com.android.gallery3d.app.ActivityState getTopState()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: double getLongitude(com.android.gallery3d.data.MediaObject)> (IMAGE)
<com.android.gallery3d.data.ComboAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> (IMAGE)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (IMAGE)
<com.android.gallery3d.data.MediaObject: com.android.gallery3d.data.Path getPath()> (IMAGE)
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP getLocalFlip()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaPostAlbum: android.database.Cursor internalQuery(int,int)> (IMAGE)
<com.android.gallery3d.data.LocalAlbumSet: java.lang.String getName()> (IMAGE)
<com.android.gallery3d.ui.BitmapTileProvider: int getImageHeight()> (IMAGE)
<com.android.gallery3d.util.GalleryUtils: int getBucketId(java.lang.String)> (IMAGE)
<com.android.gallery3d.data.MtpClient: android.mtp.MtpDevice getDevice(java.lang.String)> (IMAGE)
<com.android.gallery3d.ui.SlotView$Layout: int getScrollLimit()> (IMAGE)
<com.android.gallery3d.data.ActionImage: int getHeight()> (IMAGE)
<com.android.gallery3d.data.MtpImage: java.lang.String getMimeType()> (IMAGE)
<com.android.gallery3d.data.MtpClient: byte[] getObject(java.lang.String,int,int)> (IMAGE)
<com.android.gallery3d.ui.SlotView: android.graphics.Rect getSlotRect(int)> (IMAGE)
<com.android.gallery3d.filtershow.FilterShowActivity$LoadBitmapTask: java.lang.Boolean doInBackground(android.net.Uri[])> (IMAGE)
<com.android.gallery3d.data.TimeClustering: java.util.ArrayList getCluster(int)> (IMAGE)
<com.android.gallery3d.data.LocalVideo: int getWidth()> (IMAGE)
<com.android.gallery3d.picasasource.PicasaSource: android.content.ContentProviderClient getStoreProvider()> (IMAGE)
<com.android.gallery3d.ui.ExtTexture: int getTarget()> (IMAGE)
<com.android.gallery3d.common.Utils: java.lang.String getUserAgent(android.content.Context)> (IMAGE)
<com.android.gallery3d.ui.FlingScroller: int getCurrVelocityY()> (IMAGE)
<com.android.gallery3d.ui.FlingScroller: int getCurrVelocityX()> (IMAGE)
<com.android.gallery3d.data.LocalMergeAlbum$FetchCache: com.android.gallery3d.data.MediaItem getItem(int)> (IMAGE)
<com.android.gallery3d.filtershow.presets.ImagePreset: com.android.gallery3d.filtershow.filters.ImageFilter getFilter(java.lang.String)> (IMAGE)
<com.android.gallery3d.ui.RawTexture: int getTarget()> (IMAGE)
<com.android.gallery3d.data.FilterEmptyPromptSet: int getMediaItemCount()> (IMAGE)
<com.android.gallery3d.data.Cluster: com.android.gallery3d.data.SmallItem getLastItem()> (IMAGE)
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.util.ThreadPool getThreadPool()> (IMAGE)
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: int getCount()> (IMAGE)

BROWSER_INFORMATION:
<com.android.browser.BrowserSettings: int getPageCacheCapacity()> (BROWSER_INFORMATION)
<com.android.browser.TabControl: com.android.browser.Tab getTab(int)> (BROWSER_INFORMATION)
<com.android.browser.TabControl: int getTabCount()> (BROWSER_INFORMATION)
<com.android.browser.BrowserBookmarksAdapter: com.android.browser.BrowserBookmarksAdapterItem getRowObject(android.database.Cursor,com.android.browser.BrowserBookmarksAdapterItem)> (BROWSER_INFORMATION)
<com.android.browser.homepages.RequestHandler: byte[] htmlEncode(java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: java.lang.Object getItem(int)> (BROWSER_INFORMATION)
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: java.lang.Object getGroup(int)> (BROWSER_INFORMATION)
<com.android.browser.BrowserSnapshotPage$SnapshotAdapter: android.database.Cursor getItem(int)> (BROWSER_INFORMATION)
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter: int getCount()> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: float getFloat(int)> (BROWSER_INFORMATION)
<com.android.browser.BrowserBookmarksAdapter: long getItemId(android.database.Cursor)> (BROWSER_INFORMATION)
<com.android.browser.Tab: java.lang.String getTitle()> (BROWSER_INFORMATION)
<com.android.browser.WebStorageSizeManager$StatFsDiskInfo: long getTotalSizeBytes()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: java.lang.String getJsEngineFlags()> (BROWSER_INFORMATION)
<com.android.browser.search.OpenSearchSearchEngine: java.lang.String getName()> (BROWSER_INFORMATION)
<com.android.browser.PreloadedTabControl: com.android.browser.Tab getTab()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: java.lang.String getHomePage()> (BROWSER_INFORMATION)
<com.android.browser.Tab: android.graphics.Bitmap getFavicon()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: java.lang.String getDefaultTextEncoding()> (BROWSER_INFORMATION)
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: long getItemId(int)> (BROWSER_INFORMATION)
<com.android.browser.WebStorageSizeManager$WebKitAppCacheInfo: long getAppCacheSizeBytes()> (BROWSER_INFORMATION)
<com.android.browser.TitleBar: com.android.browser.BaseUi getUi()> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: int getCount()> (BROWSER_INFORMATION)
<com.android.browser.util.ThreadedCursorAdapter: long getItemId(int)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: java.lang.String[] getColumnNames()> (BROWSER_INFORMATION)
<com.android.browser.Preloader$PreloaderSession: android.webkit.WebView getWebView()> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider2: java.lang.String getType(android.net.Uri)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: float getFloat(int)> (BROWSER_INFORMATION)
<com.android.browser.util.ThreadedCursorAdapter: android.database.Cursor getItem(int)> (BROWSER_INFORMATION)
<com.android.browser.provider.SnapshotProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider2: java.lang.Object[] getSelectionWithAccounts(android.net.Uri,java.lang.String,java.lang.String[])> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.AutofillHandler: android.webkit.WebSettingsClassic$AutoFillProfile getAutoFillProfile()> (BROWSER_INFORMATION)
<com.android.browser.AutofillHandler$AutoFillProfileDbTask: java.lang.Object doInBackground(java.lang.Object[])> (BROWSER_INFORMATION)
<com.android.browser.BrowserBookmarksPage: android.content.Intent createShortcutIntent(android.content.Context,android.database.Cursor)> (BROWSER_INFORMATION)
<android.provider.BrowserContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> (BROWSER_INFORMATION)
<com.android.browser.view.PieItem: float getAlpha()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: com.android.browser.WebStorageSizeManager getWebStorageSizeManager()> (BROWSER_INFORMATION)
<android.provider.BrowserContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> (BROWSER_INFORMATION)
<com.android.browser.Controller: android.graphics.Bitmap getDefaultVideoPoster()> (BROWSER_INFORMATION)
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: float getFloat(int)> (BROWSER_INFORMATION)
<com.android.browser.SnapshotTab: android.content.ContentValues createSnapshotValues()> (BROWSER_INFORMATION)
<com.android.browser.TitleBar: com.android.browser.UiController getUiController()> (BROWSER_INFORMATION)
<com.android.browser.Controller: com.android.browser.Tab getCurrentTab()> (BROWSER_INFORMATION)
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)> com.android.browser.permission.READ_HISTORY_BOOKMARKS (BROWSER_INFORMATION)
<com.android.browser.TabScrollView: int getChildIndex(android.view.View)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: java.lang.String[] getColumnNames()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: java.lang.String getDefaultLinkPrefetchSetting()> (BROWSER_INFORMATION)
<com.android.browser.Controller: android.view.View getVideoLoadingProgressView()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: java.lang.String getDefaultPreloadSetting()> (BROWSER_INFORMATION)
<com.android.browser.homepages.HomeProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: int getCount()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: java.lang.String getLinkPrefetchEnabled()> (BROWSER_INFORMATION)
<com.android.browser.DateSortedExpandableListAdapter: java.lang.Object getChild(int,int)> (BROWSER_INFORMATION)
<com.android.browser.search.SearchEngineInfo: java.lang.String getSearchUriForQuery(java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (BROWSER_INFORMATION)
<com.android.browser.SuggestionsAdapter: java.lang.String getSuggestionTitle(com.android.browser.SuggestionsAdapter$SuggestItem)> (BROWSER_INFORMATION)
<com.android.browser.WebViewTimersControl: com.android.browser.WebViewTimersControl getInstance()> (BROWSER_INFORMATION)
<org.apache.http.impl.cookie.BrowserCompatSpec: org.apache.http.Header getVersionHeader()> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: short getShort(int)> (BROWSER_INFORMATION)
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: int getInt(int)> (BROWSER_INFORMATION)
<com.android.browser.BaseUi: com.android.browser.TitleBar getTitleBar()> (BROWSER_INFORMATION)
<com.android.browser.SuggestionsAdapter: java.lang.String getSuggestionUrl(com.android.browser.SuggestionsAdapter$SuggestItem)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: int getCount()> (BROWSER_INFORMATION)
<com.android.browser.homepages.Template$CursorListEntityWrapper: com.android.browser.homepages.Template$ListEntityIterator getListIterator(java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: int getInt(int)> (BROWSER_INFORMATION)
<com.android.browser.SnapshotTab: com.android.browser.Tab getParent()> (BROWSER_INFORMATION)
<com.android.browser.search.OpenSearchSearchEngine: java.lang.CharSequence getLabel()> (BROWSER_INFORMATION)
<com.android.browser.PieControl$TabAdapter: int getCount()> (BROWSER_INFORMATION)
<com.android.browser.TabControl: com.android.browser.Tab getLeastUsedTab(com.android.browser.Tab)> (BROWSER_INFORMATION)
<com.android.browser.Controller: com.android.browser.Tab openTab(com.android.browser.IntentHandler$UrlData)> (BROWSER_INFORMATION)
<com.android.browser.view.BookmarkExpandableView: com.android.browser.BreadCrumbView getBreadCrumbs(int)> (BROWSER_INFORMATION)
<com.android.browser.TabScrollView: android.view.View getSelectedTab()> (BROWSER_INFORMATION)
<com.android.browser.DeviceAccountLogin: java.lang.String[] getAccountNames()> (BROWSER_INFORMATION)
<com.android.browser.Tab: com.android.browser.Tab$SecurityState getSecurityState()> (BROWSER_INFORMATION)
<com.android.browser.Bookmarks: android.database.Cursor queryCombinedForUrl(android.content.ContentResolver,java.lang.String,java.lang.String)> com.android.browser.permission.READ_HISTORY_BOOKMARKS (BROWSER_INFORMATION)
<com.android.browser.BrowserSnapshotPage: android.graphics.Bitmap getBitmap(android.database.Cursor,int)> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: java.lang.String getPreloadAlwaysPreferenceString(android.content.Context)> (BROWSER_INFORMATION)
<com.android.browser.addbookmark.FolderSpinnerAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> (BROWSER_INFORMATION)
<com.android.browser.search.SearchEngines: com.android.browser.search.SearchEngine getDefaultSearchEngine(android.content.Context)> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: android.webkit.WebSettings$PluginState getPluginState()> (BROWSER_INFORMATION)
<com.android.browser.SuggestionsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (BROWSER_INFORMATION)
<com.android.browser.view.PieItem: float getAnimationAngle()> (BROWSER_INFORMATION)
<com.android.browser.DataUri: java.lang.String getMimeType()> (BROWSER_INFORMATION)
<com.android.browser.search.SearchEngineInfo: java.lang.String getName()> (BROWSER_INFORMATION)
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: int getChildrenCount(int)> (BROWSER_INFORMATION)
<com.android.browser.ErrorConsoleView: int getShowState()> (BROWSER_INFORMATION)
<com.android.browser.TabControl: android.webkit.WebView getCurrentSubWindow()> (BROWSER_INFORMATION)
<com.android.browser.Preloader: com.android.browser.Preloader getInstance()> (BROWSER_INFORMATION)
<com.android.browser.UrlInputView: int getState()> (BROWSER_INFORMATION)
<com.android.browser.view.PieItem: float getSweep()> (BROWSER_INFORMATION)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: android.database.Cursor doInBackground(java.lang.Void[])> com.android.browser.permission.WRITE_HISTORY_BOOKMARKS android.permission.GET_ACCOUNTS com.android.browser.permission.READ_HISTORY_BOOKMARKS (BROWSER_INFORMATION)
<com.android.browser.search.SearchEngineInfo: java.lang.String getLabel()> (BROWSER_INFORMATION)
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: java.lang.String[] getColumnNames()> (BROWSER_INFORMATION)
<com.android.browser.AutoFillProfileDatabase: com.android.browser.AutoFillProfileDatabase getInstance(android.content.Context)> (BROWSER_INFORMATION)
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (BROWSER_INFORMATION)
<com.android.browser.BrowserHistoryPage: android.view.View getTargetView(android.view.ContextMenu$ContextMenuInfo)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: double getDouble(int)> (BROWSER_INFORMATION)
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: int getViewTypeCount()> (BROWSER_INFORMATION)
<com.android.browser.NavScreen: com.android.browser.NavTabView getTabView(int)> (BROWSER_INFORMATION)
<com.android.browser.TabControl: int getCurrentPosition()> (BROWSER_INFORMATION)
<com.android.browser.XLargeUi: android.graphics.drawable.Drawable getFaviconDrawable(android.graphics.Bitmap)> (BROWSER_INFORMATION)
<com.android.browser.BaseUi: com.android.browser.Tab getActiveTab()> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: java.lang.String getString(int)> (BROWSER_INFORMATION)
<com.android.browser.widget.BookmarkThumbnailWidgetService: android.content.SharedPreferences getWidgetState(android.content.Context,int)> (BROWSER_INFORMATION)
<com.android.browser.BrowserBookmarksPage: android.graphics.Bitmap getBitmap(android.database.Cursor,int)> (BROWSER_INFORMATION)
<com.android.browser.DateSortedExpandableListAdapter: long getGroupId(int)> (BROWSER_INFORMATION)
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: android.widget.RemoteViews getViewAt(int)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider: java.lang.String getType(android.net.Uri)> (BROWSER_INFORMATION)
<com.android.browser.PieControl$TabAdapter: com.android.browser.Tab getItem(int)> (BROWSER_INFORMATION)
<com.android.browser.provider.SnapshotProvider: android.database.sqlite.SQLiteDatabase getWritableDatabase()> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: short getShort(int)> (BROWSER_INFORMATION)
<com.android.browser.homepages.RequestHandler: java.lang.String getUriResourcePath()> (BROWSER_INFORMATION)
<com.android.browser.homepages.RequestHandler$4: com.android.browser.homepages.Template$ListEntityIterator getListIterator(java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.IntentHandler: com.android.browser.IntentHandler$UrlData getUrlDataFromIntent(android.content.Intent)> (BROWSER_INFORMATION)
<com.android.browser.XLargeUi: int getContentWidth()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: android.webkit.WebSettings$ZoomDensity getDefaultZoom()> (BROWSER_INFORMATION)
<com.android.browser.DateSortedExpandableListAdapter: long getCombinedGroupId(long)> (BROWSER_INFORMATION)
<com.android.browser.NavScreen$TabAdapter: long getItemId(int)> (BROWSER_INFORMATION)
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: int getCount()> (BROWSER_INFORMATION)
<com.android.browser.DateSortedExpandableListAdapter: long getCombinedChildId(long,long)> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: android.webkit.WebSettingsClassic$AutoFillProfile getAutoFillProfile()> (BROWSER_INFORMATION)
<com.android.browser.view.PieItem: int getOuterRadius()> (BROWSER_INFORMATION)
<com.android.browser.Tab: android.webkit.WebView getWebView()> (BROWSER_INFORMATION)
<com.android.browser.NavScreen$TabAdapter: int getCount()> (BROWSER_INFORMATION)
<com.android.browser.BookmarkItem: java.lang.String getName()> (BROWSER_INFORMATION)
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: long getGroupId(int)> (BROWSER_INFORMATION)
<com.android.browser.SuggestionsAdapter: int getCount()> (BROWSER_INFORMATION)
<com.android.browser.SnapshotTab: byte[] compressBitmap(android.graphics.Bitmap)> (BROWSER_INFORMATION)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(android.os.Bundle,boolean)> (BROWSER_INFORMATION)
<com.android.browser.SuggestionsAdapter: com.android.browser.SuggestionsAdapter$SuggestionResults buildSuggestionResults()> (BROWSER_INFORMATION)
<com.android.browser.search.OpenSearchSearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.DateSortedExpandableListAdapter: long getChildId(int,int)> (BROWSER_INFORMATION)
<com.android.browser.preferences.WebsiteSettingsFragment$Site: int getFeatureCount()> (BROWSER_INFORMATION)
<com.android.browser.provider.SnapshotProvider: java.io.File getOldDatabasePath(android.content.Context)> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: int getRawTextZoom(int)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider2: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider2: int getUrlCount(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES (BROWSER_INFORMATION)
<com.android.browser.TabControl: com.android.browser.Tab getTabFromView(android.webkit.WebView)> (BROWSER_INFORMATION)
<com.android.browser.BrowserBookmarksAdapter: java.lang.CharSequence getTitle(android.database.Cursor)> (BROWSER_INFORMATION)
<com.android.browser.BookmarkUtils: android.content.Intent createAddToHomeIntent(android.content.Context,java.lang.String,java.lang.String,android.graphics.Bitmap,android.graphics.Bitmap)> (BROWSER_INFORMATION)
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: java.lang.Object getChild(int,int)> (BROWSER_INFORMATION)
<com.android.browser.DataUri: byte[] getData()> (BROWSER_INFORMATION)
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: long getItemId(int)> (BROWSER_INFORMATION)
<com.android.browser.preferences.WebsiteSettingsFragment$Site: int getFeatureByIndex(int)> (BROWSER_INFORMATION)
<com.android.browser.BaseUi: boolean isTitleBarShowing()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: int getAdjustedTextZoom(int)> (BROWSER_INFORMATION)
<com.android.browser.SuggestionsAdapter: com.android.browser.SuggestionsAdapter$SuggestItem getItem(int)> (BROWSER_INFORMATION)
<com.android.browser.Controller: android.app.Activity getActivity()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: com.android.browser.BrowserSettings getInstance()> (BROWSER_INFORMATION)
<com.android.browser.homepages.Template: com.android.browser.homepages.Template getCachedTemplate(android.content.Context,int)> (BROWSER_INFORMATION)
<com.android.browser.Controller: com.android.browser.BrowserSettings getSettings()> (BROWSER_INFORMATION)
<com.android.browser.DateSortedExpandableListAdapter: java.lang.Object getGroup(int)> (BROWSER_INFORMATION)
<com.android.browser.Controller: com.android.browser.WebViewFactory getWebViewFactory()> (BROWSER_INFORMATION)
<com.android.browser.Controller: int getDesiredThumbnailHeight(android.content.Context)> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: java.lang.String getFactoryResetHomeUrl(android.content.Context)> (BROWSER_INFORMATION)
<com.android.browser.preferences.WebsiteSettingsFragment$Site: java.lang.String getPrettyOrigin()> (BROWSER_INFORMATION)
<com.android.browser.NavScreen$TabAdapter: com.android.browser.Tab getItem(int)> (BROWSER_INFORMATION)
<com.android.browser.PieControl: com.android.browser.view.PieItem makeItem(int,int)> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()> (BROWSER_INFORMATION)
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: int getCount()> (BROWSER_INFORMATION)
<com.android.browser.TabControl: long getNextId()> (BROWSER_INFORMATION)
<com.android.browser.DateSortedExpandableListAdapter: android.content.Context getContext()> (BROWSER_INFORMATION)
<com.android.browser.DateSortedExpandableListAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)> (BROWSER_INFORMATION)
<com.android.browser.BrowserHistoryPage$HistoryAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)> (BROWSER_INFORMATION)
<com.android.browser.view.PieItem: float getStartAngle()> (BROWSER_INFORMATION)
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: int getGroupCount()> (BROWSER_INFORMATION)
<com.android.browser.Tab$3: android.view.View getVideoLoadingProgressView()> (BROWSER_INFORMATION)
<com.android.browser.BreadCrumbView: com.android.browser.BreadCrumbView$Crumb getTopCrumb()> (BROWSER_INFORMATION)
<com.android.browser.Tab: com.android.browser.ErrorConsoleView getErrorConsole(boolean)> (BROWSER_INFORMATION)
<com.android.browser.widget.BookmarkThumbnailWidgetProvider: android.content.ComponentName getComponentName(android.content.Context)> (BROWSER_INFORMATION)
<com.android.browser.BrowserBookmarksAdapter: com.android.browser.BrowserBookmarksAdapterItem getLoadingObject()> (BROWSER_INFORMATION)
<com.android.browser.TitleBar: int getEmbeddedHeight()> (BROWSER_INFORMATION)
<com.android.browser.IntentHandler$UrlData: com.android.browser.PreloadedTabControl getPreloadedTab()> (BROWSER_INFORMATION)
<com.android.browser.IntentHandler$UrlData: java.lang.String getSearchBoxQueryToSubmit()> (BROWSER_INFORMATION)
<com.android.browser.Tab: com.android.browser.DeviceAccountLogin getDeviceAccountLogin()> (BROWSER_INFORMATION)
<com.android.browser.PreloadController: com.android.browser.TabControl getTabControl()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: com.android.browser.search.SearchEngine getSearchEngine()> (BROWSER_INFORMATION)
<com.android.browser.BrowserHistoryPage$HistoryAdapter: long getChildId(int,int)> (BROWSER_INFORMATION)
<com.android.browser.Controller: com.android.browser.SnapshotTab createNewSnapshotTab(long,boolean)> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: java.lang.String getSearchEngineName()> (BROWSER_INFORMATION)
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (BROWSER_INFORMATION)
<com.android.browser.homepages.Template$CursorListEntityWrapper: android.database.Cursor getCursor()> (BROWSER_INFORMATION)
<com.android.browser.search.SearchEngines: java.util.List getSearchEngineInfos(android.content.Context)> (BROWSER_INFORMATION)
<android.webkit.BrowserFrame: android.webkit.CallbackProxy getCallbackProxy()> (BROWSER_INFORMATION)
<com.android.browser.BookmarkUtils: android.graphics.drawable.Drawable createListFaviconBackground(android.content.Context)> (BROWSER_INFORMATION)
<com.android.browser.Controller: com.android.browser.TabControl getTabControl()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: int getUserAgent()> (BROWSER_INFORMATION)
<com.android.browser.Tab: android.webkit.WebView getTopWindow()> (BROWSER_INFORMATION)
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: com.android.browser.BreadCrumbView getBreadCrumbView(int)> (BROWSER_INFORMATION)
<com.android.browser.search.SearchEngines: com.android.browser.search.SearchEngineInfo getSearchEngineInfo(android.content.Context,java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.BookmarkUtils: android.graphics.Bitmap createIcon(android.content.Context,android.graphics.Bitmap,android.graphics.Bitmap,com.android.browser.BookmarkUtils$BookmarkIconType)> (BROWSER_INFORMATION)
<com.android.browser.BrowserBookmarksPage: java.lang.String getUrl(android.database.Cursor)> (BROWSER_INFORMATION)
<com.android.browser.Tab: com.android.browser.Tab getParent()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: android.content.SharedPreferences getPreferences()> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: long getLong(int)> (BROWSER_INFORMATION)
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: short getShort(int)> (BROWSER_INFORMATION)
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: int getCount()> (BROWSER_INFORMATION)
<com.android.browser.preferences.WebsiteSettingsFragment$Site: java.lang.String getOrigin()> (BROWSER_INFORMATION)
<com.android.browser.Controller: android.content.Context getContext()> (BROWSER_INFORMATION)
<com.android.browser.addbookmark.FolderSpinnerAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (BROWSER_INFORMATION)
<com.android.browser.BrowserSnapshotPage: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (BROWSER_INFORMATION)
<com.android.browser.NavTabScroller: com.android.browser.NavTabView getTabView(int)> (BROWSER_INFORMATION)
<com.android.browser.TabControl: int getTabPosition(com.android.browser.Tab)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: long getLong(int)> (BROWSER_INFORMATION)
<com.android.browser.homepages.Template: com.android.browser.homepages.Template copy()> (BROWSER_INFORMATION)
<com.android.browser.BackgroundHandler: android.os.Looper getLooper()> (BROWSER_INFORMATION)
<com.android.browser.BrowserHistoryPage$HistoryAdapter: android.database.Cursor getCursor(int)> (BROWSER_INFORMATION)
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: java.lang.Object getItem(int)> (BROWSER_INFORMATION)
<com.android.browser.BrowserBookmarksPage: android.graphics.Bitmap getBitmap(android.database.Cursor,int,android.graphics.Bitmap)> (BROWSER_INFORMATION)
<com.android.browser.BreadCrumbView: java.lang.Object getTopData()> (BROWSER_INFORMATION)
<com.android.browser.BaseUi: android.webkit.WebView getWebView()> (BROWSER_INFORMATION)
<com.android.browser.PreloadController: android.content.Context getContext()> (BROWSER_INFORMATION)
<com.android.browser.provider.SnapshotProvider: java.lang.String getType(android.net.Uri)> (BROWSER_INFORMATION)
<com.android.browser.BookmarkUtils: android.net.Uri getBookmarksUri(android.content.Context)> (BROWSER_INFORMATION)
<com.android.browser.provider.SnapshotProvider: android.database.sqlite.SQLiteDatabase getReadableDatabase()> (BROWSER_INFORMATION)
<com.android.browser.NavTabScroller: int getGap()> (BROWSER_INFORMATION)
<com.android.browser.view.PieItem: java.util.List getItems()> (BROWSER_INFORMATION)
<com.android.browser.Tab: android.webkit.WebViewClassic getWebViewClassic()> (BROWSER_INFORMATION)
<com.android.browser.search.DefaultSearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.view.ScrollerView: int getMaxScrollAmount()> (BROWSER_INFORMATION)
<com.android.browser.BaseUi: android.view.View getVideoLoadingProgressView()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: int getTextZoom()> (BROWSER_INFORMATION)
<com.android.browser.DateSortedExpandableListAdapter: int getChildrenCount(int)> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: java.lang.String getLinkPrefetchOnWifiOnlyPreferenceString(android.content.Context)> (BROWSER_INFORMATION)
<com.android.browser.util.ThreadedCursorAdapter: int getCount()> (BROWSER_INFORMATION)
<com.android.browser.Controller: android.webkit.WebView getCurrentWebView()> (BROWSER_INFORMATION)
<com.android.browser.provider.SQLiteContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (BROWSER_INFORMATION)
<com.android.browser.search.SearchEngineInfo: java.lang.String getSuggestUriForQuery(java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: long getItemId(int)> (BROWSER_INFORMATION)
<com.android.browser.Controller: android.webkit.WebView getCurrentTopWebView()> (BROWSER_INFORMATION)
<com.android.browser.Controller: int getDesiredThumbnailWidth(android.content.Context)> (BROWSER_INFORMATION)
<com.android.browser.BaseUi: android.graphics.drawable.Drawable getFaviconDrawable(android.graphics.Bitmap)> (BROWSER_INFORMATION)
<com.android.browser.PreloadController: android.view.View getVideoLoadingProgressView()> (BROWSER_INFORMATION)
<com.android.browser.UrlInputView: android.widget.ListAdapter getAdapter()> (BROWSER_INFORMATION)
<com.android.browser.TabControl: com.android.browser.Tab getTabFromAppId(java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.Controller: int getMaxTabs()> (BROWSER_INFORMATION)
<com.android.browser.DateSortedExpandableListAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)> (BROWSER_INFORMATION)
<com.android.browser.SnapshotTab$LoadData: android.database.Cursor doInBackground(java.lang.Void[])> com.android.browser.permission.READ_HISTORY_BOOKMARKS (BROWSER_INFORMATION)
<com.android.browser.Tab: java.lang.String getUrl()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: java.lang.String getPreloadOnWifiOnlyPreferenceString(android.content.Context)> (BROWSER_INFORMATION)
<com.android.browser.TabControl: android.webkit.WebView getCurrentTopWebView()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: float getInvertedContrast()> (BROWSER_INFORMATION)
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: long getItemId(int)> (BROWSER_INFORMATION)
<com.android.browser.SuggestionsAdapter$CombinedCursor: com.android.browser.SuggestionsAdapter$SuggestItem getItem()> (BROWSER_INFORMATION)
<com.android.browser.Tab: com.android.browser.GeolocationPermissionsPrompt getGeolocationPermissionsPrompt()> (BROWSER_INFORMATION)
<com.android.browser.Tab: android.view.View getSubViewContainer()> (BROWSER_INFORMATION)
<com.android.browser.ComboViewActivity$TabsAdapter: int getCount()> (BROWSER_INFORMATION)
<com.android.browser.SuggestionsAdapter: long getItemId(int)> (BROWSER_INFORMATION)
<com.android.browser.PieControl$TabAdapter: long getItemId(int)> (BROWSER_INFORMATION)
<com.android.browser.SnapshotTab: android.graphics.Bitmap getScreenshot()> (BROWSER_INFORMATION)
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (BROWSER_INFORMATION)
<com.android.browser.Controller: android.content.Intent createBookmarkCurrentPageIntent(boolean)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: int getInt(int)> (BROWSER_INFORMATION)
<com.android.browser.Tab$3: android.graphics.Bitmap getDefaultVideoPoster()> (BROWSER_INFORMATION)
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: long getChildId(int,int)> (BROWSER_INFORMATION)
<com.android.browser.preferences.WebsiteSettingsFragment$Site: java.lang.String getPrettyTitle()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: long getLastRecovered()> (BROWSER_INFORMATION)
<com.android.browser.view.ScrollerView: float getTopFadingEdgeStrength()> (BROWSER_INFORMATION)
<com.android.browser.SuggestionsAdapter: android.widget.Filter getFilter()> (BROWSER_INFORMATION)
<com.android.browser.util.ThreadedCursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (BROWSER_INFORMATION)
<com.android.browser.Controller: com.android.browser.UI getUi()> (BROWSER_INFORMATION)
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)> (BROWSER_INFORMATION)
<android.webkit.BrowserFrame: java.lang.String getRawResFilename(int,android.content.Context)> (BROWSER_INFORMATION)
<com.android.browser.NfcHandler: android.nfc.NdefMessage createNdefMessage(android.nfc.NfcEvent)> (BROWSER_INFORMATION)
<com.android.browser.PreloadController: android.app.Activity getActivity()> (BROWSER_INFORMATION)
<com.android.browser.view.PieItem: android.view.View getView()> (BROWSER_INFORMATION)
<org.apache.http.impl.cookie.BrowserCompatSpec: int getVersion()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: java.lang.String getPreloadEnabled()> (BROWSER_INFORMATION)
<com.android.browser.ComboViewActivity$TabsAdapter: android.app.Fragment getItem(int)> (BROWSER_INFORMATION)
<com.android.browser.WebStorageSizeManager: long getAppCacheMaxSize()> (BROWSER_INFORMATION)
<com.android.browser.TabScrollView$TabLayout: int getChildDrawingOrder(int,int)> (BROWSER_INFORMATION)
<com.android.browser.Controller: android.graphics.Bitmap createScreenshot(android.webkit.WebView,int,int)> (BROWSER_INFORMATION)
<android.webkit.BrowserFrame: boolean getShouldStartScrolledRight()> (BROWSER_INFORMATION)
<com.android.browser.AutoFillProfileDatabase: android.database.Cursor getProfile(int)> (BROWSER_INFORMATION)
<com.android.browser.SnapshotTab: long getDateCreated()> (BROWSER_INFORMATION)
<com.android.browser.TitleBar: com.android.browser.PageProgressView getProgressView()> (BROWSER_INFORMATION)
<com.android.browser.view.ScrollerView: float getBottomFadingEdgeStrength()> (BROWSER_INFORMATION)
<com.android.browser.addbookmark.FolderSpinnerAdapter: long getItemId(int)> (BROWSER_INFORMATION)
<com.android.browser.NavTabScroller: int getScrollValue()> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider: java.lang.String getClientId(android.content.ContentResolver)> (BROWSER_INFORMATION)
<com.android.browser.TitleBar: com.android.browser.NavigationBarBase getNavigationBar()> (BROWSER_INFORMATION)
<com.android.browser.BrowserHistoryPage$HistoryAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)> (BROWSER_INFORMATION)
<com.android.browser.TabControl: com.android.browser.TabControl$OnThumbnailUpdatedListener getOnThumbnailUpdatedListener()> (BROWSER_INFORMATION)
<com.android.browser.TitleBar: android.webkit.WebView getCurrentWebView()> (BROWSER_INFORMATION)
<com.android.browser.view.BookmarkExpandableView: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()> (BROWSER_INFORMATION)
<com.android.browser.DateSortedExpandableListAdapter: long getLong(int)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: double getDouble(int)> (BROWSER_INFORMATION)
<com.android.browser.DeviceAccountLogin: int getState()> (BROWSER_INFORMATION)
<com.android.browser.WebStorageSizeManager$StatFsDiskInfo: long getFreeSpaceSizeBytes()> (BROWSER_INFORMATION)
<com.android.browser.provider.SQLiteContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])> (BROWSER_INFORMATION)
<com.android.browser.Preloader: com.android.browser.PreloadedTabControl getPreloadedTab(java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.search.DefaultSearchEngine: java.lang.CharSequence getLabel()> (BROWSER_INFORMATION)
<com.android.browser.Tab: android.view.View getViewContainer()> (BROWSER_INFORMATION)
<com.android.browser.Controller: android.os.Bundle createSaveState()> (BROWSER_INFORMATION)
<com.android.browser.TabControl: com.android.browser.Tab getCurrentTab()> (BROWSER_INFORMATION)
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)> (BROWSER_INFORMATION)
<com.android.browser.provider.SQLiteContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (BROWSER_INFORMATION)
<com.android.browser.search.SearchEngines: com.android.browser.search.SearchEngine get(android.content.Context,java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.SuggestionsAdapter$CursorSource: int getCount()> (BROWSER_INFORMATION)
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)> (BROWSER_INFORMATION)
<com.android.browser.Preloader$PreloaderSession: com.android.browser.PreloadedTabControl getTabControl()> (BROWSER_INFORMATION)
<com.android.browser.BaseUi: android.app.Activity getActivity()> (BROWSER_INFORMATION)
<com.android.browser.Tab: long getId()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: java.lang.String getLinkPrefetchAlwaysPreferenceString(android.content.Context)> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: int getAdjustedDoubleTapZoom(int)> (BROWSER_INFORMATION)
<com.android.browser.preferences.WebsiteSettingsFragment$Site: android.graphics.Bitmap getIcon()> (BROWSER_INFORMATION)
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: java.lang.Object getItem(int)> (BROWSER_INFORMATION)
<com.android.browser.Tab: int getLoadProgress()> (BROWSER_INFORMATION)
<com.android.browser.Tab: java.lang.String getOriginalUrl()> (BROWSER_INFORMATION)
<com.android.browser.PieControl$TabAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (BROWSER_INFORMATION)
<com.android.browser.BaseUi: android.graphics.Bitmap getDefaultVideoPoster()> (BROWSER_INFORMATION)
<com.android.browser.Tab: android.graphics.Bitmap getScreenshot()> (BROWSER_INFORMATION)
<com.android.browser.TabScrollView: int getScroll()> (BROWSER_INFORMATION)
<com.android.browser.view.PieItem: int getInnerRadius()> (BROWSER_INFORMATION)
<com.android.browser.view.PieItem: com.android.browser.view.PieMenu$PieView getPieView()> (BROWSER_INFORMATION)
<com.android.browser.BrowserBookmarksAdapter: java.lang.Object getRowObject(android.database.Cursor,java.lang.Object)> (BROWSER_INFORMATION)
<com.android.browser.search.DefaultSearchEngine: java.lang.String getName()> (BROWSER_INFORMATION)
<com.android.browser.PreloadController: android.graphics.Bitmap getDefaultVideoPoster()> (BROWSER_INFORMATION)
<com.android.browser.homepages.Template$HashMapEntityData: com.android.browser.homepages.Template$ListEntityIterator getListIterator(java.lang.String)> (BROWSER_INFORMATION)
<com.android.browser.view.PieItem: float getStart()> (BROWSER_INFORMATION)
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: double getDouble(int)> (BROWSER_INFORMATION)
<com.android.browser.BrowserHistoryPage$HistoryAdapter: int getGroupCount()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: int getAdjustedMinimumFontSize(int)> (BROWSER_INFORMATION)
<com.android.browser.SnapshotTab: long getId()> (BROWSER_INFORMATION)
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: int getCount()> (BROWSER_INFORMATION)
<com.android.browser.SuggestionsAdapter$SuggestionResults: int getLineCount()> (BROWSER_INFORMATION)
<com.android.browser.DataController: com.android.browser.DataController getInstance(android.content.Context)> (BROWSER_INFORMATION)
<com.android.browser.BrowserWebView: int getTitleHeight()> (BROWSER_INFORMATION)
<com.android.browser.addbookmark.FolderSpinnerAdapter: int getCount()> (BROWSER_INFORMATION)
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: java.lang.String getString(int)> (BROWSER_INFORMATION)
<android.webkit.BrowserFrame: java.lang.String getUserAgentString()> (BROWSER_INFORMATION)
<com.android.browser.TabControl: android.webkit.WebView getCurrentWebView()> (BROWSER_INFORMATION)
<com.android.browser.SuggestionsAdapter$SuggestCursor: com.android.browser.SuggestionsAdapter$SuggestItem getItem()> (BROWSER_INFORMATION)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(boolean)> (BROWSER_INFORMATION)
<com.android.browser.addbookmark.FolderSpinnerAdapter: java.lang.Object getItem(int)> (BROWSER_INFORMATION)
<com.android.browser.Controller: java.util.List getTabs()> (BROWSER_INFORMATION)
<com.android.browser.view.BookmarkExpandableView: com.android.browser.BrowserBookmarksAdapter getChildAdapter(int)> (BROWSER_INFORMATION)
<com.android.browser.Tab: android.webkit.WebView getSubWebView()> (BROWSER_INFORMATION)
<com.android.browser.Tab: android.net.http.SslError getSslCertificateError()> (BROWSER_INFORMATION)
<com.android.browser.DateSortedExpandableListAdapter: int getGroupCount()> (BROWSER_INFORMATION)
<com.android.browser.NavScreen$TabAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (BROWSER_INFORMATION)
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: long getLong(int)> (BROWSER_INFORMATION)
<com.android.browser.BreadCrumbView: int getBaseline()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: int getDoubleTapZoom()> (BROWSER_INFORMATION)
<com.android.browser.BrowserSettings: int getMinimumFontSize()> (BROWSER_INFORMATION)
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)> (BROWSER_INFORMATION)
<com.android.browser.BookmarkItem: java.lang.String getUrl()> (BROWSER_INFORMATION)
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: java.lang.String getString(int)> (BROWSER_INFORMATION)
<com.android.browser.PreloadController: com.android.browser.WebViewFactory getWebViewFactory()> (BROWSER_INFORMATION)
<com.android.browser.view.PieItem: int getLevel()> (BROWSER_INFORMATION)
<com.android.browser.homepages.HomeProvider: java.lang.String getType(android.net.Uri)> (BROWSER_INFORMATION)
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: android.widget.RemoteViews getLoadingView()> (BROWSER_INFORMATION)
<com.android.browser.TabControl: java.util.List getTabs()> (BROWSER_INFORMATION)
<com.android.browser.BrowserActivity: com.android.browser.Controller getController()> (BROWSER_INFORMATION)
<com.android.browser.Tab: java.lang.String getAppId()> (BROWSER_INFORMATION)

NFC:
<android.nfc.INfcAdapterExtras$Stub$Proxy: java.lang.String getDriverName(java.lang.String)> (NFC)
<com.android.nfc.NfcService$TagService: int getTimeout(int)> (NFC)
<android.nfc.INfcTag$Stub: android.os.IBinder asBinder()> (NFC)
<android.nfc.INfcTag$Stub$Proxy: int[] getTechList(int)> android.permission.NFC (NFC)
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parse(android.nfc.NdefMessage)> (NFC)
<android.nfc.INfcTag$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (NFC)
<com.android.nfc.NfcService: byte[] doTransceiveNoLock(int,byte[])> (NFC)
<com.android.nfc.dhimpl.NativeNfcTag: byte[] transceive(byte[],boolean,int[])> (NFC)
<android.nfc.NdefRecord: int getByteLength()> android.permission.STOP_APP_SWITCHES (NFC)
<android.nfc.tech.IsoDep: int getMaxTransceiveLength()> (NFC)
<com.android.nfc.NfcService$NfcAdapterService: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)> (NFC)
<com.android.nfc.handover.HandoverManager: android.nfc.NdefMessage createHandoverSelectMessage(boolean)> (NFC)
<android.nfc.INdefPushCallback$Stub$Proxy: android.net.Uri[] getUris()> (NFC)
<android.nfc.tech.NdefFormatable: byte[] transceive(byte[],boolean)> android.permission.NFC (NFC)
<android.nfc.tech.Ndef: byte[] transceive(byte[],boolean)> android.permission.NFC (NFC)
<com.android.nfc.P2pLinkManager: java.lang.String getMessageType(android.nfc.NdefMessage)> (NFC)
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createBluetoothOobDataRecord()> android.permission.BLUETOOTH (NFC)
<com.android.nfc.handover.HandoverManager: android.nfc.NdefMessage createHandoverRequestMessage()> (NFC)
<com.android.nfc.dhimpl.NativeNfcManager: com.android.nfc.DeviceHost$LlcpSocket createLlcpSocket(int,int,int,int)> (NFC)
<com.android.nfc.dhimpl.NativeP2pDevice: byte[] getGeneralBytes()> (NFC)
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseBtOob(java.nio.ByteBuffer)> (NFC)
<android.nfc.tech.NfcBarcode: android.nfc.Tag getTag()> android.permission.STOP_APP_SWITCHES (NFC)
<android.nfc.Tag: java.lang.String[] getTechList()> (NFC)
<android.nfc.INfcAdapter$Stub$Proxy: int getState()> (NFC)
<android.nfc.Tag: byte[] getId()> (NFC)
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[],boolean)> android.permission.NFC (NFC)
<android.nfc.tech.NfcF: byte[] transceive(byte[],boolean)> android.permission.NFC (NFC)
<android.nfc.tech.NfcB: byte[] transceive(byte[],boolean)> android.permission.NFC (NFC)
<com.android.nfc.handover.BluetoothOppHandover: java.lang.String getMimeTypeForUri(android.content.Context,android.net.Uri)> (NFC)
<android.nfc.tech.NfcV: byte[] transceive(byte[],boolean)> android.permission.NFC (NFC)
<com.android.nfc.dhimpl.NativeNfcManager: int getTimeout(int)> (NFC)
<com.android.nfc.NfcService$NfcAdapterService: int getState()> (NFC)
<android.nfc.tech.MifareClassic: byte[] transceive(byte[])> (NFC)
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseHandoverSelect(android.nfc.NdefMessage)> (NFC)
<android.nfc.tech.MifareClassic: android.nfc.tech.MifareClassic get(android.nfc.Tag)> (NFC)
<com.android.nfc.snep.SnepMessage: byte getVersion()> (NFC)
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseNokia(java.nio.ByteBuffer)> (NFC)
<android.nfc.NdefRecord: byte[] getPayload()> (NFC)
<android.nfc.tech.NfcB: byte[] getProtocolInfo()> (NFC)
<android.nfc.tech.NfcBarcode: byte[] getBarcode()> (NFC)
<android.nfc.tech.IsoDep: byte[] transceive(byte[],boolean)> android.permission.NFC (NFC)
<android.nfc.INfcTag$Stub$Proxy: android.nfc.NdefMessage ndefRead(int)> (NFC)
<android.nfc.tech.Ndef: android.nfc.NdefMessage getCachedNdefMessage()> (NFC)
<android.nfc.NdefMessage: android.nfc.NdefRecord[] getRecords()> (NFC)
<com.android.nfc.dhimpl.NativeLlcpConnectionlessSocket: int getSap()> (NFC)
<android.nfc.Tag: byte[] readBytesWithNull(android.os.Parcel)> (NFC)
<com.android.nfc.dhimpl.NativeLlcpConnectionlessSocket: int getHandle()> (NFC)
<android.nfc.NfcAdapter: android.content.Context getContext()> (NFC)
<android.nfc.tech.MifareClassic: int getSize()> (NFC)
<android.nfc.tech.MifareClassic: int getBlockCountInSector(int)> (NFC)
<com.android.nfc.NfcService$NfcAdapterExtrasService: java.lang.String getDriverName(java.lang.String)> (NFC)
<android.nfc.TransceiveResult: byte[] getResponseOrThrow()> (NFC)
<com.android.nfc.NfcDispatcher: android.content.Intent getAppSearchIntent(java.lang.String)> (NFC)
<android.nfc.NfcManager: android.nfc.NfcAdapter getDefaultAdapter()> (NFC)
<android.nfc.INfcTag$Stub$Proxy: android.nfc.TransceiveResult transceive(int,byte[],boolean)> (NFC)
<com.android.nfc.NfcService$NfcAdapterService: android.nfc.INfcTag getNfcTagInterface()> (NFC)
<android.nfc.tech.NfcV: byte getDsfId()> (NFC)
<com.android.nfc.dhimpl.NativeP2pDevice: byte[] transceive(byte[])> (NFC)
<android.nfc.INfcAdapterExtras$Stub$Proxy: int getCardEmulationRoute(java.lang.String)> android.permission.NFC (NFC)
<com.android.nfc.dhimpl.NativeP2pDevice: byte[] receive()> (NFC)
<android.nfc.tech.MifareClassic: int getBlockCount()> (NFC)
<android.nfc.tech.Ndef: android.nfc.Tag getTag()> (NFC)
<com.android.nfc.dhimpl.NativeNfcManager: com.android.nfc.DeviceHost$LlcpConnectionlessSocket createLlcpConnectionlessSocket(int,java.lang.String)> (NFC)
<android.nfc.tech.Ndef: android.nfc.tech.Ndef get(android.nfc.Tag)> (NFC)
<android.nfc.tech.NfcV: byte getResponseFlags()> (NFC)
<android.nfc.tech.NfcV: byte[] transceive(byte[])> (NFC)
<android.nfc.tech.NfcF: byte[] transceive(byte[])> (NFC)
<android.nfc.tech.NfcA: byte[] transceive(byte[])> (NFC)
<android.nfc.tech.NfcB: byte[] transceive(byte[])> (NFC)
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState findResumedActivityState()> (NFC)
<android.nfc.tech.MifareUltralight: android.nfc.tech.MifareUltralight get(android.nfc.Tag)> (NFC)
<android.nfc.NfcAdapter: int getSdkVersion()> (NFC)
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.PendingHandoverTransfer registerInTransferLocked(android.bluetooth.BluetoothDevice)> (NFC)
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getGetRequest(int,android.nfc.NdefMessage)> (NFC)
<android.nfc.tech.NfcA: int getTimeout()> (NFC)
<com.android.nfc.handover.HandoverTransfer: int getTransferId()> (NFC)
<android.nfc.tech.NfcF: int getTimeout()> android.permission.NFC (NFC)
<com.android.nfc.RegisteredComponentCache: java.util.ArrayList getComponents()> (NFC)
<android.nfc.tech.NfcA: int getMaxTransceiveLength()> (NFC)
<android.nfc.tech.NfcF: int getMaxTransceiveLength()> (NFC)
<android.nfc.tech.NfcB: int getMaxTransceiveLength()> (NFC)
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter(android.content.Context)> (NFC)
<android.nfc.tech.NfcV: int getMaxTransceiveLength()> (NFC)
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle transceive(java.lang.String,byte[])> (NFC)
<android.nfc.tech.NdefFormatable: android.nfc.tech.NdefFormatable get(android.nfc.Tag)> (NFC)
<android.nfc.tech.MifareUltralight: android.nfc.Tag getTag()> (NFC)
<android.nfc.NdefRecord: byte[] toByteArray()> (NFC)
<com.android.nfc.dhimpl.NativeLlcpSocket: int getRemoteRw()> (NFC)
<android.nfc.tech.MifareClassic: int getMaxTransceiveLength()> (NFC)
<com.android.nfc.dhimpl.NativeNfcManager: com.android.nfc.DeviceHost$LlcpServerSocket createLlcpServerSocket(int,java.lang.String,int,int,int)> (NFC)
<android.nfc.tech.NfcB: android.nfc.Tag getTag()> (NFC)
<android.nfc.tech.NfcA: android.nfc.Tag getTag()> (NFC)
<android.nfc.tech.NfcF: android.nfc.Tag getTag()> (NFC)
<android.nfc.tech.NfcV: android.nfc.Tag getTag()> (NFC)
<android.nfc.tech.Ndef: java.lang.String getType()> (NFC)
<android.nfc.INdefPushCallback$Stub$Proxy: android.nfc.NdefMessage createMessage()> (NFC)
<android.nfc.tech.NfcA: short getSak()> (NFC)
<android.nfc.tech.NfcA: byte[] getAtqa()> (NFC)
<com.android.nfc.handover.HandoverManager: byte[] addressToReverseBytes(java.lang.String)> (NFC)
<com.android.nfc.dhimpl.NativeNfcTag: int[] getTechList()> (NFC)
<com.android.nfc.dhimpl.NativeNfcManager: byte[][] getWipeApdus()> (NFC)
<android.nfc.tech.BasicTagTechnology: android.nfc.Tag getTag()> (NFC)
<android.nfc.tech.NfcV: android.nfc.tech.NfcV get(android.nfc.Tag)> (NFC)
<android.nfc.NdefMessage: int getByteArrayLength()> (NFC)
<com.android.nfc.NfcDispatcher$DispatchInfo: android.content.Intent setTagIntent()> (NFC)
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createHandoverSelectRecord(boolean)> (NFC)
<android.nfc.tech.NfcF: byte[] getSystemCode()> (NFC)
<com.android.nfc.dhimpl.NativeLlcpSocket: int getLocalMiu()> (NFC)
<com.android.nfc.SendUi: float getDegreesForRotation(int)> (NFC)
<android.nfc.tech.IsoDep: byte[] getHistoricalBytes()> (NFC)
<com.android.nfc.NfcService: com.android.nfc.DeviceHost$LlcpSocket createLlcpSocket(int,int,int,int)> (NFC)
<android.nfc.tech.IsoDep: android.nfc.Tag getTag()> (NFC)
<com.android.nfc.NfcService: com.android.nfc.NfcService getInstance()> (NFC)
<android.nfc.NfcActivityManager: android.net.Uri[] getUris()> (NFC)
<com.android.nfc.handover.HandoverManager: android.nfc.NdefMessage tryHandoverRequest(android.nfc.NdefMessage)> (NFC)
<android.nfc.TechListParcel: java.lang.String[][] getTechLists()> (NFC)
<com.android.nfc.dhimpl.NativeLlcpSocket: int getRemoteMiu()> (NFC)
<android.nfc.NdefMessage: byte[] toByteArray()> (NFC)
<com.android.nfc.snep.SnepMessage: byte getField()> (NFC)
<android.nfc.tech.NfcBarcode: int getType()> (NFC)
<com.android.nfc.dhimpl.NativeNfcTag: int getHandle()> (NFC)
<android.nfc.Tag: android.nfc.INfcTag getTagService()> (NFC)
<android.nfc.tech.NfcF: android.nfc.tech.NfcF get(android.nfc.Tag)> (NFC)
<android.nfc.tech.NfcB: android.nfc.tech.NfcB get(android.nfc.Tag)> (NFC)
<android.nfc.INfcAdapterExtras$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (NFC)
<android.nfc.tech.NfcA: android.nfc.tech.NfcA get(android.nfc.Tag)> (NFC)
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[])> (NFC)
<com.android.nfc.snep.SnepMessage: android.nfc.NdefMessage getNdefMessage()> (NFC)
<com.android.nfc.dhimpl.NativeLlcpConnectionlessSocket: int getLinkMiu()> (NFC)
<android.nfc.NfcAdapter: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface()> (NFC)
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(java.lang.String)> (NFC)
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getSuccessResponse(android.nfc.NdefMessage)> (NFC)
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getNfcAdapter(android.content.Context)> (NFC)
<com.android.nfc.P2pLinkManager: int getMessageAarPresent(android.nfc.NdefMessage)> (NFC)
<com.android.nfc.dhimpl.NativeNfcManager: java.lang.String dump()> (NFC)
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState findActivityState(android.app.Activity)> (NFC)
<android.nfc.NfcAdapter: android.nfc.INfcAdapter getService()> (NFC)
<android.nfc.tech.MifareClassic: byte[] readBlock(int)> (NFC)
<android.nfc.tech.MifareClassic: int getTimeout()> (NFC)
<android.nfc.tech.IsoDep: byte[] getHiLayerResponse()> (NFC)
<android.nfc.tech.IsoDep: byte[] transceive(byte[])> android.permission.NFC (NFC)
<com.android.nfc.P2pLinkManager: android.nfc.NdefMessage createDefaultNdef(java.lang.String)> (NFC)
<android.nfc.INfcAdapter$Stub: android.os.IBinder asBinder()> (NFC)
<android.nfc.tech.IsoDep: int getTimeout()> (NFC)
<android.nfc.tech.MifareClassic: byte[] transceive(byte[],boolean)> android.permission.NFC (NFC)
<android.nfc.INfcTag$Stub$Proxy: boolean isPresent(int)> (NFC)
<com.android.nfc.LlcpPacket: byte[] getDataBuffer()> (NFC)
<com.android.nfc.dhimpl.NativeNfcTag: byte[] getUid()> (NFC)
<com.android.nfc.dhimpl.NativeLlcpSocket: int getLocalSap()> (NFC)
<android.nfc.tech.IsoDep: android.nfc.tech.IsoDep get(android.nfc.Tag)> (NFC)
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcTag getNfcTagInterface()> (NFC)
<com.android.nfc.dhimpl.NativeNfcTag: byte[] readNdef()> (NFC)
<com.android.nfc.snep.SnepClient: com.android.nfc.snep.SnepMessage get(android.nfc.NdefMessage)> (NFC)
<android.nfc.INfcAdapter$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (NFC)
<android.nfc.INfcAdapterExtras$Stub: android.os.IBinder asBinder()> (NFC)
<android.nfc.INdefPushCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> (NFC)
<com.android.nfc.dhimpl.NativeP2pDevice: int getMode()> (NFC)
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter()> (NFC)
<android.nfc.tech.NfcF: byte[] getManufacturer()> (NFC)
<com.android.nfc.SendUi: android.graphics.Bitmap createScreenshot()> (NFC)
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createHandoverRequestRecord()> (NFC)
<android.nfc.tech.BasicTagTechnology: int getMaxTransceiveLengthInternal()> (NFC)
<com.android.nfc.ndefpush.NdefPushProtocol: byte[] toByteArray()> (NFC)
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createCollisionRecord()> (NFC)
<com.android.nfc.snep.SnepMessenger: com.android.nfc.snep.SnepMessage getMessage()> (NFC)
<android.nfc.tech.MifareUltralight: int getType()> (NFC)
<com.android.nfc.snep.SnepMessage: byte[] toByteArray()> (NFC)
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState getActivityState(android.app.Activity)> (NFC)
<com.android.nfc.P2pLinkManager: int getMessageTnf(android.nfc.NdefMessage)> (NFC)
<android.nfc.tech.Ndef: android.nfc.NdefMessage getNdefMessage()> (NFC)
<com.android.nfc.NfcService: com.android.nfc.DeviceHost$LlcpServerSocket createLlcpServerSocket(int,java.lang.String,int,int,int)> (NFC)
<com.android.nfc.dhimpl.NativeNfcTag: int getConnectedTechnology()> (NFC)
<com.android.nfc.dhimpl.NativeP2pDevice: int getHandle()> (NFC)
<android.nfc.tech.NdefFormatable: android.nfc.Tag getTag()> (NFC)
<android.nfc.tech.NfcB: byte[] getApplicationData()> (NFC)
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getMessage(byte)> (NFC)
<com.android.nfc.NfcDispatcher$DispatchInfo: android.content.Intent setTechIntent()> (NFC)
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle close(java.lang.String,android.os.IBinder)> (NFC)
<com.android.nfc.snep.SnepMessage: int getLength()> (NFC)
<android.nfc.INfcTag$Stub$Proxy: android.nfc.Tag rediscover(int)> (NFC)
<com.android.nfc.dhimpl.NativeNfcManager: int getDefaultLlcpRwSize()> (NFC)
<com.android.nfc.NfcService$TagService: int getMaxTransceiveLength(int)> (NFC)
<android.nfc.tech.MifareClassic: android.nfc.Tag getTag()> (NFC)
<android.nfc.INfcTag$Stub$Proxy: int getMaxTransceiveLength(int)> (NFC)
<android.nfc.tech.MifareClassic: int getType()> (NFC)
<com.android.nfc.handover.BluetoothHeadsetHandover: boolean getProfileProxys()> (NFC)
<com.android.nfc.NfcService: com.android.nfc.DeviceHost$LlcpConnectionlessSocket createLlcpConnectionLessSocket(int,java.lang.String)> (NFC)
<android.nfc.Tag: int getServiceHandle()> (NFC)
<android.nfc.NfcAdapter: android.nfc.INfcTag getTagService()> (NFC)
<android.nfc.tech.BasicTagTechnology: byte[] transceive(byte[],boolean)> android.permission.NFC (NFC)
<com.android.nfc.dhimpl.NativeNfcManager: boolean getExtendedLengthApdusSupported()> (NFC)
<com.android.nfc.dhimpl.NativeLlcpSocket: int getLocalRw()> (NFC)
<com.android.nfc.dhimpl.NativeNfcManager: int getMaxTransceiveLength(int)> (NFC)
<android.nfc.tech.NfcBarcode: android.nfc.tech.NfcBarcode get(android.nfc.Tag)> (NFC)
<com.android.nfc.ndefpush.NdefPushProtocol: android.nfc.NdefMessage getImmediate()> (NFC)
<android.nfc.NdefRecord: byte[] getType()> (NFC)
<android.nfc.INfcTag$Stub$Proxy: int getTimeout(int)> (NFC)
<android.nfc.INdefPushCallback$Stub: android.os.IBinder asBinder()> (NFC)
<android.nfc.Tag: int getConnectedTechnology()> (NFC)
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createBluetoothAlternateCarrierRecord(boolean)> (NFC)
<android.nfc.NdefRecord: byte[] getId()> (NFC)
<com.android.nfc.NfcService: byte[] doTransceive(int,byte[])> (NFC)
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.PendingHandoverTransfer registerOutTransferLocked(com.android.nfc.handover.HandoverManager$BluetoothHandoverData,android.net.Uri[])> (NFC)
<com.android.nfc.dhimpl.NativeNfcTag: android.os.Bundle[] getTechExtras()> (NFC)
<com.android.nfc.snep.SnepMessage: int getAcceptableLength()> (NFC)
<android.nfc.tech.MifareUltralight: int getTimeout()> (NFC)
<android.nfc.tech.Ndef: int getMaxSize()> (NFC)
<android.nfc.tech.MifareUltralight: byte[] readPages(int)> (NFC)
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)> android.permission.NFC (NFC)
<com.android.nfc.dhimpl.NativeNfcManager: java.lang.String getName()> (NFC)
<com.android.nfc.dhimpl.NativeNfcManager: int getDefaultLlcpMiu()> (NFC)
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getPutRequest(android.nfc.NdefMessage)> (NFC)
<android.nfc.INfcTag$Stub$Proxy: boolean isNdef(int)> (NFC)
<android.nfc.tech.MifareClassic: int getSectorCount()> (NFC)
<android.nfc.NfcAdapter: int getAdapterState()> (NFC)
<com.android.nfc.LlcpPacket: int getRemoteSap()> (NFC)
<android.nfc.NdefRecord: short getTnf()> (NFC)
<android.nfc.Tag: android.os.Bundle getTechExtras(int)> (NFC)
<com.android.nfc.NfcService$NfcAdapterExtrasService: int getCardEmulationRoute(java.lang.String)> android.permission.NFC (NFC)
<com.android.nfc.NfcService$TagService: int[] getTechList(int)> (NFC)
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcApplicationState findAppState(android.app.Application)> (NFC)
<com.android.nfc.P2pLinkManager: int getMessageSize(android.nfc.NdefMessage)> (NFC)
<android.nfc.NfcActivityManager: android.nfc.NdefMessage createMessage()> (NFC)
<android.nfc.tech.MifareUltralight: int getMaxTransceiveLength()> (NFC)

